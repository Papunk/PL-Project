// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LOOP = 2;
  public static final int FUNC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\5\0\1\7\1\10\1\11\1\12\1\13\11\14"+
    "\1\15\1\0\1\4\1\16\1\17\2\0\32\20\4\0"+
    "\1\20\1\0\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\20\1\32\1\33\1\34\1\35"+
    "\1\36\2\20\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\3\20\1\45\1\46\1\47\7\0\1\2\u01a2\0\2\2"+
    "\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\11\1\1\4\1\5\1\6"+
    "\1\7\6\0\1\3\11\0\1\3\35\0\1\10\44\0"+
    "\1\11\22\0\1\11\14\0\1\12\11\0\2\11\23\0"+
    "\1\12\4\0\1\12\4\0\1\11\1\0\1\13\25\0"+
    "\1\12\5\0\1\11\1\13\7\0\1\13\12\0\2\12"+
    "\4\0\1\13\15\0\2\13\3\0\1\3\40\0\1\14"+
    "\6\0\1\15\26\0\1\15\17\0\1\16\11\0\1\14"+
    "\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\170\0\240\0\310\0\360"+
    "\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\170"+
    "\0\170\0\170\0\170\0\360\0\u0168\0\u0190\0\u01b8\0\u01e0"+
    "\0\u0208\0\u0230\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320"+
    "\0\u0348\0\u0370\0\u0398\0\170\0\u03c0\0\u03e8\0\u0410\0\u0438"+
    "\0\u0460\0\u0488\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578"+
    "\0\u05a0\0\u05c8\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8"+
    "\0\u06e0\0\u0708\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8"+
    "\0\u0820\0\360\0\u0848\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910"+
    "\0\u0938\0\u0960\0\u0988\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50"+
    "\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0"+
    "\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10"+
    "\0\u0e38\0\u0e60\0\u0e88\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50"+
    "\0\u0f78\0\u0fa0\0\u0fc8\0\u0ff0\0\u1018\0\u1040\0\u1068\0\u1090"+
    "\0\u10b8\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0"+
    "\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u06e0\0\u12e8"+
    "\0\u1310\0\u1338\0\u1360\0\u1388\0\u13b0\0\u13d8\0\u1400\0\u1428"+
    "\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568"+
    "\0\u1590\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u1680\0\u16a8"+
    "\0\u16d0\0\u16f8\0\u1720\0\u1748\0\u1770\0\u0988\0\u1798\0\u17c0"+
    "\0\u17e8\0\u1810\0\170\0\u1838\0\u1860\0\u1888\0\u18b0\0\u1428"+
    "\0\u18d8\0\u11f8\0\u1900\0\u1928\0\u1950\0\u1978\0\u19a0\0\u19c8"+
    "\0\u19f0\0\u1a18\0\u1a40\0\u1a68\0\u1a90\0\u1ab8\0\u1ae0\0\u1b08"+
    "\0\u1b30\0\u1b58\0\u1b80\0\u1ba8\0\u1bd0\0\u1bf8\0\u1c20\0\u0640"+
    "\0\u1c48\0\u1c70\0\u1c98\0\u1cc0\0\u1ce8\0\u18d8\0\u1568\0\u1d10"+
    "\0\u1d38\0\u1d60\0\u1d88\0\u1db0\0\u1dd8\0\u1e00\0\170\0\u1e28"+
    "\0\u1e50\0\u1e78\0\u1ea0\0\u1ec8\0\u1ef0\0\u1f18\0\u1f40\0\u1f68"+
    "\0\u1f90\0\u0910\0\u1068\0\u1fb8\0\u1fe0\0\u2008\0\u2030\0\u1158"+
    "\0\u2058\0\u2080\0\u20a8\0\u20d0\0\u20f8\0\u2120\0\u2148\0\u2170"+
    "\0\u2198\0\u21c0\0\u21e8\0\u2210\0\u2238\0\u14f0\0\u1e00\0\u2260"+
    "\0\u2288\0\u22b0\0\u07d0\0\u22d8\0\u2300\0\u2328\0\u2350\0\u2378"+
    "\0\u23a0\0\u23c8\0\u23f0\0\u2418\0\u2440\0\u2468\0\u2490\0\u24b8"+
    "\0\u24e0\0\u2508\0\u2530\0\u2558\0\u2580\0\u25a8\0\u25d0\0\u25f8"+
    "\0\u2620\0\u2648\0\u2670\0\u2698\0\u26c0\0\u26e8\0\u2710\0\u2738"+
    "\0\u2760\0\u2788\0\u27b0\0\170\0\u27d8\0\u2800\0\u2828\0\u2850"+
    "\0\u2878\0\u28a0\0\170\0\u28c8\0\u28f0\0\u2918\0\u2940\0\u2968"+
    "\0\u2990\0\u29b8\0\u29e0\0\u2a08\0\u2a30\0\u2a58\0\u2a80\0\u2aa8"+
    "\0\u2ad0\0\u2af8\0\u2b20\0\u2b48\0\u2b70\0\u2b98\0\u2bc0\0\u2be8"+
    "\0\u2c10\0\u1860\0\u2c38\0\u2c60\0\u2c88\0\u2cb0\0\u2cd8\0\u2d00"+
    "\0\u2d28\0\u2d50\0\u2d78\0\u2da0\0\u2dc8\0\u2df0\0\u2e18\0\u2e40"+
    "\0\u2e68\0\170\0\u2e90\0\u2eb8\0\u2ee0\0\u2f08\0\u2f30\0\u2f58"+
    "\0\u2f80\0\u2fa8\0\u2fd0\0\u23f0\0\u2ff8\0\u3020\0\u3048\0\u3070"+
    "\0\u3098\0\u30c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\6\4\1\7\2\10\3\4"+
    "\2\10\1\11\1\12\2\10\1\13\2\10\1\14\1\10"+
    "\1\15\3\10\1\16\4\10\1\17\1\20\1\4\1\21"+
    "\45\4\1\22\47\4\1\23\2\4\53\0\1\6\7\0"+
    "\2\24\3\0\6\24\1\25\2\24\1\26\1\24\1\27"+
    "\3\24\1\30\4\24\1\31\15\0\1\32\40\0\1\33"+
    "\7\0\2\24\3\0\25\24\6\0\1\33\7\0\2\24"+
    "\3\0\17\24\1\34\5\24\6\0\1\33\7\0\2\24"+
    "\3\0\16\24\1\35\6\24\6\0\1\33\7\0\2\24"+
    "\3\0\16\24\1\36\3\24\1\37\2\24\6\0\1\33"+
    "\7\0\2\24\3\0\6\24\1\40\16\24\6\0\1\33"+
    "\7\0\2\24\3\0\5\24\1\41\17\24\6\0\1\33"+
    "\7\0\2\24\3\0\5\24\1\42\17\24\6\0\1\33"+
    "\7\0\2\24\3\0\10\24\1\43\14\24\3\0\1\32"+
    "\1\44\1\0\45\32\3\0\1\33\12\0\1\45\34\0"+
    "\1\33\7\0\2\24\3\0\5\24\1\46\17\24\6\0"+
    "\1\33\7\0\2\24\3\0\15\24\1\47\7\24\6\0"+
    "\1\33\7\0\2\24\3\0\17\24\1\50\5\24\6\0"+
    "\1\33\7\0\2\24\3\0\15\24\1\51\7\24\6\0"+
    "\1\52\7\0\2\24\3\0\25\24\6\0\1\33\7\0"+
    "\2\24\3\0\21\24\1\53\3\24\6\0\1\33\7\0"+
    "\2\24\3\0\21\24\1\54\3\24\6\0\1\33\7\0"+
    "\2\24\3\0\11\24\1\55\13\24\6\0\1\56\47\0"+
    "\1\33\7\0\2\24\3\0\1\24\1\57\23\24\6\0"+
    "\1\33\7\0\2\24\3\0\21\24\1\60\3\24\6\0"+
    "\1\61\7\0\2\24\3\0\25\24\6\0\1\33\7\0"+
    "\2\24\3\0\3\24\1\62\21\24\6\0\1\63\1\64"+
    "\1\65\1\66\4\0\2\67\1\0\1\70\1\64\25\71"+
    "\1\0\1\72\4\0\1\73\7\0\2\24\3\0\25\24"+
    "\6\0\1\33\7\0\2\24\3\0\22\24\1\74\2\24"+
    "\6\0\1\33\7\0\2\24\3\0\13\24\1\75\11\24"+
    "\6\0\1\76\1\0\1\77\5\0\2\100\3\0\25\101"+
    "\6\0\1\33\7\0\2\24\3\0\12\24\1\102\12\24"+
    "\6\0\1\33\7\0\2\24\3\0\11\24\1\103\13\24"+
    "\6\0\1\61\7\0\2\104\1\0\1\45\1\0\25\104"+
    "\6\0\1\105\7\0\2\24\3\0\25\24\6\0\1\63"+
    "\1\64\1\65\1\66\4\0\2\67\1\0\1\70\1\64"+
    "\21\71\1\106\3\71\1\0\1\72\4\0\1\107\1\0"+
    "\1\110\5\0\2\111\1\0\1\112\1\0\25\113\3\0"+
    "\1\65\2\0\2\65\1\114\42\65\6\0\1\112\44\0"+
    "\1\115\1\64\1\0\1\66\2\0\1\116\1\0\2\67"+
    "\1\0\1\117\1\64\25\71\1\0\1\72\4\0\1\56"+
    "\12\0\1\112\34\0\1\115\1\64\1\0\1\66\4\0"+
    "\2\71\1\0\1\117\1\64\25\71\1\0\1\72\47\0"+
    "\1\112\4\0\1\73\7\0\2\120\1\0\1\45\1\0"+
    "\25\120\6\0\1\33\7\0\2\24\3\0\17\24\1\121"+
    "\5\24\6\0\1\33\7\0\2\24\3\0\5\24\1\122"+
    "\17\24\6\0\1\76\1\0\1\77\2\0\1\123\2\0"+
    "\2\100\3\0\25\101\3\0\1\77\2\0\2\77\1\124"+
    "\42\77\3\0\1\125\5\0\1\126\1\0\2\100\3\0"+
    "\25\101\6\0\1\125\7\0\2\101\3\0\25\101\6\0"+
    "\1\33\7\0\2\24\3\0\15\24\1\127\7\24\6\0"+
    "\1\130\7\0\2\104\3\0\25\104\6\0\1\105\7\0"+
    "\2\131\1\0\1\45\1\0\25\131\6\0\1\115\1\64"+
    "\1\0\1\66\4\0\2\71\1\0\1\117\1\64\10\71"+
    "\1\132\14\71\1\0\1\72\4\0\1\107\1\0\1\110"+
    "\5\0\2\111\3\0\21\113\1\133\3\113\3\0\1\110"+
    "\2\0\2\110\1\134\42\110\3\0\1\135\5\0\1\136"+
    "\1\0\2\111\3\0\25\113\6\0\1\107\1\0\1\110"+
    "\5\0\2\111\3\0\25\113\6\0\1\135\7\0\2\113"+
    "\3\0\25\113\3\0\1\65\2\0\1\137\1\140\1\114"+
    "\1\141\7\65\1\142\1\140\26\65\1\143\1\65\3\0"+
    "\1\115\1\64\1\0\1\66\7\0\1\117\1\64\21\0"+
    "\1\144\4\0\1\72\14\0\2\145\51\0\1\112\34\0"+
    "\1\146\7\0\2\120\3\0\25\120\6\0\1\33\7\0"+
    "\2\24\3\0\15\24\1\147\7\24\6\0\1\150\7\0"+
    "\2\24\3\0\25\24\22\0\1\151\30\0\1\77\2\0"+
    "\1\152\1\77\1\124\42\77\3\0\1\125\4\0\1\123"+
    "\52\0\2\153\36\0\1\33\7\0\2\24\3\0\22\24"+
    "\1\154\2\24\6\0\1\130\22\0\1\155\34\0\2\131"+
    "\1\156\2\0\25\131\6\0\1\115\1\64\1\0\1\66"+
    "\4\0\2\71\1\0\1\117\1\64\5\71\1\157\17\71"+
    "\1\0\1\72\4\0\1\135\7\0\2\113\3\0\10\113"+
    "\1\160\14\113\3\0\1\110\2\0\1\161\1\110\1\134"+
    "\42\110\3\0\1\135\35\0\1\144\21\0\2\162\33\0"+
    "\1\65\2\0\1\137\1\140\1\114\1\141\7\65\1\142"+
    "\1\140\21\65\1\163\4\65\1\143\2\65\2\0\1\164"+
    "\1\65\1\114\5\65\2\165\1\65\1\166\1\65\25\167"+
    "\4\65\2\0\2\65\1\114\1\166\42\65\2\0\2\65"+
    "\1\114\10\65\1\166\32\65\2\0\2\65\1\114\40\65"+
    "\1\166\1\65\30\0\1\170\22\0\1\115\1\64\1\0"+
    "\1\66\4\0\2\145\1\0\1\117\1\64\26\0\1\72"+
    "\4\0\1\146\12\0\1\171\34\0\1\172\7\0\2\24"+
    "\3\0\25\24\6\0\1\173\1\174\1\175\1\176\4\0"+
    "\2\177\1\0\1\200\1\174\25\201\1\0\1\202\4\0"+
    "\1\203\44\0\1\77\2\0\1\152\1\77\1\124\2\77"+
    "\1\204\37\77\3\0\1\125\7\0\2\153\36\0\1\33"+
    "\7\0\2\24\3\0\5\24\1\102\17\24\42\0\1\205"+
    "\13\0\1\206\47\0\1\115\1\64\1\0\1\66\4\0"+
    "\2\71\1\0\1\117\1\64\15\71\1\207\7\71\1\0"+
    "\1\72\4\0\1\135\7\0\2\113\3\0\5\113\1\210"+
    "\17\113\3\0\1\110\2\0\1\161\1\110\1\134\33\110"+
    "\1\211\6\110\3\0\1\135\7\0\2\162\33\0\1\65"+
    "\2\0\2\65\1\114\22\65\1\212\20\65\2\0\1\164"+
    "\1\65\1\114\5\65\2\165\3\65\21\167\1\213\3\167"+
    "\4\65\2\0\1\214\1\65\1\114\3\65\1\215\1\65"+
    "\2\165\3\65\25\167\4\65\2\0\1\164\1\65\1\114"+
    "\5\65\2\165\3\65\25\167\4\65\2\0\1\214\1\65"+
    "\1\114\5\65\2\167\3\65\25\167\3\65\25\0\1\216"+
    "\25\0\1\217\47\0\1\172\1\0\1\220\5\0\2\221"+
    "\1\0\1\45\1\0\25\222\6\0\1\173\1\174\1\175"+
    "\1\176\4\0\2\177\1\0\1\200\1\174\4\201\1\223"+
    "\20\201\1\0\1\202\4\0\1\224\1\0\1\225\5\0"+
    "\2\226\1\0\1\227\1\0\25\230\3\0\1\175\2\0"+
    "\2\175\1\231\42\175\6\0\1\227\44\0\1\232\1\174"+
    "\1\0\1\176\2\0\1\233\1\0\2\177\1\0\1\234"+
    "\1\174\25\201\1\0\1\202\4\0\1\56\12\0\1\227"+
    "\34\0\1\232\1\174\1\0\1\176\4\0\2\201\1\0"+
    "\1\234\1\174\25\201\1\0\1\202\47\0\1\227\4\0"+
    "\1\203\16\0\1\235\12\0\1\236\2\0\1\237\7\0"+
    "\1\77\2\0\2\77\1\124\11\77\1\240\30\77\36\0"+
    "\1\241\14\0\1\242\16\0\1\243\12\0\1\244\2\0"+
    "\1\245\12\0\1\135\7\0\2\113\3\0\15\113\1\246"+
    "\7\113\3\0\1\110\2\0\2\110\1\134\22\110\1\247"+
    "\17\110\1\65\2\0\2\65\1\114\17\65\1\250\23\65"+
    "\2\0\1\214\1\65\1\114\5\65\2\167\3\65\10\167"+
    "\1\251\14\167\4\65\2\0\1\214\1\65\1\114\33\65"+
    "\1\163\7\65\2\0\2\65\1\114\5\65\2\252\33\65"+
    "\35\0\1\253\15\0\1\254\1\0\1\255\5\0\2\256"+
    "\3\0\25\257\3\0\1\220\2\0\2\220\1\260\42\220"+
    "\11\0\1\261\1\0\2\221\3\0\25\222\16\0\2\222"+
    "\3\0\25\222\6\0\1\232\1\174\1\0\1\176\4\0"+
    "\2\201\1\0\1\234\1\174\16\201\1\262\6\201\1\0"+
    "\1\202\4\0\1\224\1\0\1\225\5\0\2\226\3\0"+
    "\4\230\1\263\20\230\3\0\1\225\2\0\2\225\1\264"+
    "\42\225\3\0\1\265\5\0\1\266\1\0\2\226\3\0"+
    "\25\230\6\0\1\224\1\0\1\225\5\0\2\226\3\0"+
    "\25\230\6\0\1\265\7\0\2\230\3\0\25\230\3\0"+
    "\1\175\2\0\1\267\1\270\1\231\1\271\7\175\1\272"+
    "\1\270\26\175\1\273\1\175\3\0\1\232\1\174\1\0"+
    "\1\176\7\0\1\234\1\174\4\0\1\274\21\0\1\202"+
    "\14\0\2\275\51\0\1\227\67\0\1\276\53\0\1\277"+
    "\46\0\1\300\6\0\1\77\2\0\1\301\1\77\1\124"+
    "\42\77\34\0\1\302\16\0\1\242\4\0\1\303\11\0"+
    "\1\243\12\0\1\244\2\0\1\245\45\0\1\304\53\0"+
    "\1\305\46\0\1\306\6\0\1\110\2\0\2\110\1\134"+
    "\17\110\1\307\22\110\1\65\2\0\2\65\1\114\27\65"+
    "\1\310\13\65\2\0\1\214\1\65\1\114\5\65\2\167"+
    "\3\65\5\167\1\311\17\167\4\65\2\0\1\214\1\65"+
    "\1\114\5\65\2\252\33\65\3\0\1\254\1\0\1\255"+
    "\2\0\1\312\2\0\2\256\3\0\25\257\3\0\1\255"+
    "\2\0\2\255\1\313\42\255\3\0\1\314\5\0\1\315"+
    "\1\0\2\256\3\0\25\257\6\0\1\314\7\0\2\257"+
    "\3\0\25\257\16\0\2\316\36\0\1\265\7\0\2\230"+
    "\3\0\16\230\1\317\6\230\3\0\1\225\2\0\1\320"+
    "\1\225\1\264\42\225\3\0\1\265\20\0\1\274\36\0"+
    "\2\321\33\0\1\175\2\0\1\267\1\270\1\231\1\271"+
    "\7\175\1\272\1\270\4\175\1\322\21\175\1\273\2\175"+
    "\2\0\1\323\1\175\1\231\5\175\2\324\1\175\1\325"+
    "\1\175\25\326\4\175\2\0\2\175\1\231\1\325\42\175"+
    "\2\0\2\175\1\231\10\175\1\325\32\175\2\0\2\175"+
    "\1\231\40\175\1\325\1\175\36\0\1\327\14\0\1\232"+
    "\1\174\1\0\1\176\4\0\2\275\1\0\1\234\1\174"+
    "\26\0\1\202\37\0\1\330\45\0\1\44\52\0\1\331"+
    "\10\0\1\77\2\0\1\301\1\77\1\124\14\77\1\332"+
    "\12\77\1\333\2\77\1\334\7\77\3\0\1\335\63\0"+
    "\1\336\66\0\1\337\45\0\1\340\52\0\1\341\10\0"+
    "\1\110\2\0\2\110\1\134\27\110\1\342\12\110\1\65"+
    "\2\0\1\214\1\65\1\114\5\65\2\167\3\65\15\167"+
    "\1\343\7\167\3\65\17\0\1\344\30\0\1\255\2\0"+
    "\1\345\1\255\1\313\42\255\3\0\1\314\4\0\1\312"+
    "\52\0\2\346\33\0\1\225\2\0\1\320\1\225\1\264"+
    "\16\225\1\347\23\225\3\0\1\265\7\0\2\321\33\0"+
    "\1\175\2\0\2\175\1\231\30\175\1\350\12\175\2\0"+
    "\1\323\1\175\1\231\5\175\2\324\3\175\4\326\1\351"+
    "\20\326\4\175\2\0\1\352\1\175\1\231\3\175\1\353"+
    "\1\175\2\324\3\175\25\326\4\175\2\0\1\323\1\175"+
    "\1\231\5\175\2\324\3\175\25\326\4\175\2\0\1\352"+
    "\1\175\1\231\5\175\2\326\3\175\25\326\3\175\33\0"+
    "\1\44\45\0\1\354\16\0\1\77\2\0\2\77\1\124"+
    "\30\77\1\355\12\77\2\0\2\77\1\124\34\77\1\356"+
    "\6\77\2\0\2\77\1\124\33\77\1\357\6\77\3\0"+
    "\1\335\10\0\1\360\36\0\1\361\77\0\1\340\17\0"+
    "\1\362\75\0\1\363\21\0\1\364\44\0\1\255\2\0"+
    "\1\345\1\255\1\313\2\255\1\365\37\255\3\0\1\314"+
    "\7\0\2\346\33\0\1\225\2\0\2\225\1\264\30\225"+
    "\1\366\11\225\1\175\2\0\1\352\1\175\1\231\5\175"+
    "\2\326\3\175\16\326\1\367\6\326\4\175\2\0\1\352"+
    "\1\175\1\231\16\175\1\322\24\175\2\0\2\175\1\231"+
    "\5\175\2\370\33\175\35\0\1\371\12\0\1\77\2\0"+
    "\2\77\1\124\30\77\1\372\12\77\2\0\2\77\1\124"+
    "\26\77\1\373\14\77\2\0\2\77\1\124\31\77\1\374"+
    "\10\77\3\0\1\375\7\0\2\360\36\0\1\361\16\0"+
    "\1\376\12\0\1\377\2\0\1\u0100\2\0\1\u0101\7\0"+
    "\1\u0102\1\0\1\u0103\1\0\1\u0104\3\0\2\u0105\3\0"+
    "\25\u0106\40\0\1\u0107\15\0\1\364\16\0\1\u0108\12\0"+
    "\1\u0109\2\0\1\u010a\7\0\1\255\2\0\2\255\1\313"+
    "\11\255\1\u010b\30\255\1\175\2\0\1\352\1\175\1\231"+
    "\5\175\2\370\33\175\27\0\1\44\20\0\1\77\2\0"+
    "\2\77\1\124\25\77\1\373\15\77\2\0\2\77\1\124"+
    "\23\77\1\u010c\16\77\3\0\1\375\35\0\1\u010d\44\0"+
    "\1\u010e\53\0\1\u010f\46\0\1\u0110\44\0\1\u0111\14\0"+
    "\1\u0102\1\0\1\u0103\1\0\1\u0104\1\303\2\0\2\u0105"+
    "\3\0\25\u0106\3\0\1\u0103\2\0\2\u0103\1\u0112\42\u0103"+
    "\3\0\1\u0104\16\0\1\243\12\0\1\244\2\0\1\245"+
    "\12\0\1\u0113\3\0\1\u0104\1\0\1\u0114\1\0\2\u0105"+
    "\3\0\25\u0106\6\0\1\u0113\3\0\1\u0104\3\0\2\u0106"+
    "\3\0\25\u0106\32\0\1\340\56\0\1\u0115\53\0\1\u0116"+
    "\46\0\1\u0117\6\0\1\255\2\0\1\u0118\1\255\1\313"+
    "\42\255\1\77\2\0\2\77\1\124\27\77\1\u0119\12\77"+
    "\36\0\1\u011a\47\0\1\u011b\45\0\1\u011c\52\0\1\u011d"+
    "\41\0\1\u011e\16\0\1\u0103\2\0\1\u011f\1\u0103\1\u0112"+
    "\1\u0103\1\u0120\40\u0103\3\0\1\u0113\4\0\1\303\52\0"+
    "\2\u0121\71\0\1\u0122\45\0\1\u0123\52\0\1\u0124\10\0"+
    "\1\255\2\0\1\u0118\1\255\1\313\14\255\1\u0125\12\255"+
    "\1\u0126\2\255\1\u0127\7\255\1\77\2\0\2\77\1\124"+
    "\21\77\1\373\20\77\3\0\1\u0128\77\0\1\u011c\45\0"+
    "\1\u0129\42\0\1\u011c\23\0\1\u0103\2\0\1\u011f\1\u0103"+
    "\1\u0112\2\u0103\1\u012a\40\u0103\2\0\1\u0120\1\u0103\1\u0112"+
    "\14\u0103\1\u012b\12\u0103\1\u012c\2\u0103\1\u012d\7\u0103\3\0"+
    "\1\u0113\3\0\1\u0104\3\0\2\u0121\66\0\1\u0123\45\0"+
    "\1\u012e\16\0\1\255\2\0\2\255\1\313\30\255\1\u012f"+
    "\12\255\2\0\2\255\1\313\34\255\1\u0130\6\255\2\0"+
    "\2\255\1\313\33\255\1\u0131\6\255\3\0\1\u0128\10\0"+
    "\1\u0132\70\0\1\u0133\12\0\1\u0103\2\0\2\u0103\1\u0112"+
    "\11\u0103\1\u0134\31\u0103\2\0\2\u0103\1\u0112\30\u0103\1\u0135"+
    "\12\u0103\2\0\2\u0103\1\u0112\34\u0103\1\u0136\6\u0103\2\0"+
    "\2\u0103\1\u0112\33\u0103\1\u0137\6\u0103\35\0\1\u0138\12\0"+
    "\1\255\2\0\2\255\1\313\30\255\1\u0139\12\255\2\0"+
    "\2\255\1\313\26\255\1\u013a\14\255\2\0\2\255\1\313"+
    "\31\255\1\u013b\10\255\3\0\1\u013c\7\0\2\u0132\62\0"+
    "\1\u011c\20\0\1\u0103\2\0\1\u013d\1\u0103\1\u0112\43\u0103"+
    "\2\0\2\u0103\1\u0112\30\u0103\1\u013e\12\u0103\2\0\2\u0103"+
    "\1\u0112\26\u0103\1\u013f\14\u0103\2\0\2\u0103\1\u0112\31\u0103"+
    "\1\u0140\10\u0103\27\0\1\u0123\20\0\1\255\2\0\2\255"+
    "\1\313\25\255\1\u013a\15\255\2\0\2\255\1\313\23\255"+
    "\1\u0141\16\255\3\0\1\u013c\20\0\1\u0142\23\0\1\u0103"+
    "\2\0\1\u013d\1\u0103\1\u0112\14\u0103\1\u0143\12\u0103\1\u0144"+
    "\2\u0103\1\u0145\2\u0103\1\u0146\5\u0103\2\0\2\u0103\1\u0112"+
    "\25\u0103\1\u013f\15\u0103\2\0\1\u0147\1\u0103\1\u0112\43\u0103"+
    "\2\0\2\u0103\1\u0112\23\u0103\1\u0148\16\u0103\1\255\2\0"+
    "\2\255\1\313\27\255\1\u0149\12\255\36\0\1\u014a\11\0"+
    "\1\u0103\2\0\2\u0103\1\u0112\30\u0103\1\u014b\12\u0103\2\0"+
    "\2\u0103\1\u0112\34\u0103\1\u014c\6\u0103\2\0\2\u0103\1\u0112"+
    "\33\u0103\1\u014d\7\u0103\2\0\2\u0103\1\u0112\30\u0103\1\u014e"+
    "\12\u0103\2\0\1\u014f\1\u0103\1\u0112\1\u0103\1\u0120\3\u0103"+
    "\2\u0150\3\u0103\25\u0151\4\u0103\2\0\2\u0103\1\u0112\27\u0103"+
    "\1\u0152\12\u0103\1\255\2\0\2\255\1\313\21\255\1\u013a"+
    "\20\255\1\u0103\2\0\2\u0103\1\u0112\30\u0103\1\u0153\12\u0103"+
    "\2\0\2\u0103\1\u0112\26\u0103\1\u0154\14\u0103\2\0\2\u0103"+
    "\1\u0112\31\u0103\1\u0155\11\u0103\2\0\2\u0103\1\u0112\23\u0103"+
    "\1\u0156\17\u0103\2\0\1\u014f\1\u0103\1\u0112\1\u0103\1\u0120"+
    "\1\u012a\2\u0103\2\u0150\3\u0103\25\u0151\4\u0103\2\0\1\u011f"+
    "\1\u0103\1\u0112\1\u0103\1\u0120\1\u0103\1\u0157\1\u0103\2\u0150"+
    "\3\u0103\25\u0151\4\u0103\2\0\1\u011f\1\u0103\1\u0112\1\u0103"+
    "\1\u0120\3\u0103\2\u0151\3\u0103\25\u0151\4\u0103\2\0\2\u0103"+
    "\1\u0112\21\u0103\1\u013f\21\u0103\2\0\2\u0103\1\u0112\25\u0103"+
    "\1\u0154\15\u0103\2\0\2\u0103\1\u0112\23\u0103\1\u0158\17\u0103"+
    "\2\0\2\u0103\1\u0112\16\u0103\1\u0154\24\u0103\2\0\2\u0103"+
    "\1\u0112\5\u0103\2\u0159\34\u0103\2\0\2\u0103\1\u0112\27\u0103"+
    "\1\u015a\13\u0103\2\0\1\u011f\1\u0103\1\u0112\1\u0103\1\u0120"+
    "\3\u0103\2\u0159\34\u0103\2\0\2\u0103\1\u0112\21\u0103\1\u0154"+
    "\20\u0103";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\4\11\6\0\1\1\11\0\1\11"+
    "\35\0\1\1\44\0\1\1\22\0\1\1\14\0\1\1"+
    "\11\0\2\1\23\0\1\1\4\0\1\11\4\0\1\1"+
    "\1\0\1\1\25\0\1\1\5\0\2\1\7\0\1\11"+
    "\12\0\2\1\4\0\1\1\15\0\2\1\3\0\1\1"+
    "\40\0\1\11\6\0\1\11\26\0\1\1\17\0\1\11"+
    "\11\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[346];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 15: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 16: break;
          case 3:
            { 
            }
            // fall through
          case 17: break;
          case 4:
            { parser.lb(ScopeType.main);
            }
            // fall through
          case 18: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 19: break;
          case 6:
            { parser.lb(ScopeType.loop);
        yybegin(YYINITIAL);
            }
            // fall through
          case 20: break;
          case 7:
            { parser.lb(ScopeType.func);
        yybegin(YYINITIAL);
            }
            // fall through
          case 21: break;
          case 8:
            { parser.scope_ctrl(parser.split(yytext()));
            }
            // fall through
          case 22: break;
          case 9:
            { parser.return_stmt(parser.split(yytext()));
            }
            // fall through
          case 23: break;
          case 10:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 24: break;
          case 11:
            { parser.while_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 25: break;
          case 12:
            { parser.func_def(parser.split(yytext()));
        yybegin(FUNC);
            }
            // fall through
          case 26: break;
          case 13:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 27: break;
          case 14:
            { parser.for_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
