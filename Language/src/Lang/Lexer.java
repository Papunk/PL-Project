// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\1\0\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\15\11\16\2\0\1\4\1\17\1\20\2\0"+
    "\32\21\4\0\1\21\1\0\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\2\21\1\32\1\33"+
    "\1\34\1\35\2\21\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\3\21\1\44\1\45\1\46\7\0\1\2\u01a2\0"+
    "\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\5\3\1\4\1\5"+
    "\5\0\1\3\1\0\5\3\5\0\1\3\1\0\2\3"+
    "\1\0\2\3\6\0\1\3\11\0\1\3\23\0\1\3"+
    "\65\0\1\6\33\0\1\6\4\0\1\6\4\0\1\7"+
    "\25\0\1\6\5\0\1\7\7\0\1\7\11\0\2\6"+
    "\4\0\1\7\20\0\2\7\3\0\1\3\41\0\1\10"+
    "\11\0\1\11\32\0\1\11\21\0\1\12\70\0\1\10"+
    "\3\0\1\10\12\0\1\10\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\47\0\116\0\165\0\234\0\303\0\352"+
    "\0\u0111\0\u0138\0\47\0\47\0\u015f\0\u0186\0\u01ad\0\u01d4"+
    "\0\u01fb\0\u0222\0\u0249\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\47\0\u03f6\0\u041d"+
    "\0\u0444\0\u046b\0\u0492\0\u04b9\0\u04e0\0\u0507\0\u052e\0\u0555"+
    "\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\u079e\0\u07c5"+
    "\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af\0\u08d6\0\u08fd"+
    "\0\u0924\0\u094b\0\u0972\0\u0999\0\u09c0\0\u09e7\0\u0a0e\0\u0a35"+
    "\0\u0a5c\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d"+
    "\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5"+
    "\0\u0ccc\0\u0cf3\0\u0d1a\0\u0d41\0\u0d68\0\u0d8f\0\u0db6\0\u0ddd"+
    "\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0fff\0\u1026\0\u104d"+
    "\0\u1074\0\u109b\0\u10c2\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185"+
    "\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u06db\0\u1296"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u1380\0\u13a7\0\u13ce"+
    "\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df\0\u1506"+
    "\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u15f0\0\u1617\0\u163e"+
    "\0\u1665\0\u168c\0\u0972\0\u16b3\0\u16da\0\u1701\0\u1728\0\47"+
    "\0\u174f\0\u1776\0\u179d\0\u17c4\0\u1137\0\u17eb\0\u1812\0\u1839"+
    "\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u194a\0\u1971"+
    "\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9"+
    "\0\u1ad0\0\u1af7\0\u063f\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba"+
    "\0\u1491\0\u1be1\0\u1c08\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb"+
    "\0\47\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc"+
    "\0\u1e03\0\u1e2a\0\u08fd\0\u0fd8\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6"+
    "\0\u109b\0\u1eed\0\u1f14\0\u1f3b\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7"+
    "\0\u1ffe\0\u2025\0\u204c\0\u2073\0\u209a\0\u20c1\0\u20e8\0\u210f"+
    "\0\u2136\0\u141c\0\u1ccb\0\u215d\0\u2184\0\u21ab\0\u07ec\0\u21d2"+
    "\0\u21f9\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3\0\u230a"+
    "\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b\0\u2442"+
    "\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553\0\u257a"+
    "\0\u25a1\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664\0\u268b\0\u26b2"+
    "\0\47\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c\0\u27c3"+
    "\0\u27ea\0\u2811\0\47\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4"+
    "\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c"+
    "\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u1776\0\u2c2e\0\u2c55"+
    "\0\u2c7c\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d"+
    "\0\u2db4\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u2e9e\0\47"+
    "\0\u2ec5\0\u2eec\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2faf\0\u2fd6"+
    "\0\u2ffd\0\u3024\0\u304b\0\u3072\0\u3099\0\u30c0\0\u30e7\0\u310e"+
    "\0\u3135\0\u315c\0\u3183\0\u31aa\0\u31d1\0\u31f8\0\u321f\0\u3246"+
    "\0\u326d\0\u3294\0\u32bb\0\u32e2\0\u3309\0\u3330\0\u3357\0\u337e"+
    "\0\u33a5\0\u33cc\0\u33f3\0\u341a\0\u3441\0\u3468\0\u348f\0\u34b6"+
    "\0\u34dd\0\u3504\0\u352b\0\u3552\0\u3579\0\u35a0\0\u35c7\0\u35ee"+
    "\0\u3615\0\u363c\0\u3663\0\u368a\0\u36b1\0\u36d8\0\u36ff\0\u3726"+
    "\0\u204c\0\u374d\0\u3774\0\u379b\0\u2b44\0\u37c2\0\u37e9\0\u3810"+
    "\0\u3837\0\u385e\0\u3885\0\u38ac\0\u38d3\0\u38fa\0\u3921\0\u2ec5"+
    "\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4\0\u3a0b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\10\2\1\5\2\6\2\2"+
    "\5\6\1\7\2\6\1\10\1\11\10\6\1\12\1\13"+
    "\1\2\1\14\52\0\1\4\11\0\2\15\2\0\5\15"+
    "\1\16\2\15\1\17\1\20\10\15\1\21\17\0\1\22"+
    "\35\0\1\23\11\0\2\6\2\0\23\6\6\0\1\23"+
    "\11\0\2\6\2\0\14\6\1\24\3\6\1\25\2\6"+
    "\6\0\1\23\11\0\2\6\2\0\5\6\1\26\15\6"+
    "\6\0\1\23\11\0\2\6\2\0\4\6\1\27\16\6"+
    "\6\0\1\23\11\0\2\6\2\0\7\6\1\30\13\6"+
    "\6\0\1\23\11\0\2\15\2\0\23\15\6\0\1\23"+
    "\11\0\2\15\2\0\14\15\1\31\3\15\1\32\2\15"+
    "\6\0\1\23\11\0\2\15\2\0\5\15\1\33\15\15"+
    "\6\0\1\23\11\0\2\15\2\0\4\15\1\34\16\15"+
    "\6\0\1\23\11\0\2\15\2\0\7\15\1\35\13\15"+
    "\3\0\1\22\1\36\1\0\44\22\3\0\1\23\13\0"+
    "\1\37\32\0\1\23\11\0\2\6\2\0\15\6\1\40"+
    "\5\6\6\0\1\23\11\0\2\6\2\0\13\6\1\41"+
    "\7\6\6\0\1\42\11\0\2\6\2\0\23\6\6\0"+
    "\1\23\11\0\2\6\2\0\17\6\1\43\3\6\6\0"+
    "\1\23\11\0\2\6\2\0\10\6\1\44\12\6\6\0"+
    "\1\23\11\0\2\15\2\0\15\15\1\45\5\15\6\0"+
    "\1\23\11\0\2\15\2\0\13\15\1\46\7\15\6\0"+
    "\1\42\11\0\2\15\2\0\23\15\6\0\1\23\11\0"+
    "\2\15\2\0\17\15\1\47\3\15\6\0\1\23\11\0"+
    "\2\15\2\0\10\15\1\50\12\15\6\0\1\51\46\0"+
    "\1\52\11\0\2\6\2\0\23\6\6\0\1\23\11\0"+
    "\2\6\2\0\2\6\1\53\20\6\6\0\1\54\1\55"+
    "\1\56\1\57\6\0\2\60\1\61\1\55\23\62\1\0"+
    "\1\63\4\0\1\64\11\0\2\6\2\0\23\6\6\0"+
    "\1\23\11\0\2\6\2\0\11\6\1\65\11\6\6\0"+
    "\1\52\11\0\2\15\2\0\23\15\6\0\1\23\11\0"+
    "\2\15\2\0\2\15\1\66\20\15\6\0\1\64\11\0"+
    "\2\15\2\0\23\15\6\0\1\23\11\0\2\15\2\0"+
    "\11\15\1\67\11\15\6\0\1\70\1\0\1\71\7\0"+
    "\2\72\2\0\23\73\6\0\1\52\11\0\2\74\1\37"+
    "\1\0\23\74\6\0\1\75\11\0\2\6\2\0\23\6"+
    "\6\0\1\54\1\55\1\56\1\57\6\0\2\60\1\61"+
    "\1\55\17\62\1\76\3\62\1\0\1\63\4\0\1\77"+
    "\1\0\1\100\7\0\2\101\1\102\1\0\23\103\3\0"+
    "\1\56\2\0\2\56\1\104\41\56\6\0\1\102\43\0"+
    "\1\105\1\55\1\0\1\57\4\0\1\106\1\0\2\60"+
    "\1\107\1\55\23\62\1\0\1\63\4\0\1\51\13\0"+
    "\1\102\32\0\1\105\1\55\1\0\1\57\6\0\2\62"+
    "\1\107\1\55\23\62\1\0\1\63\46\0\1\102\4\0"+
    "\1\64\11\0\2\110\1\37\1\0\23\110\6\0\1\23"+
    "\11\0\2\6\2\0\4\6\1\111\16\6\6\0\1\75"+
    "\11\0\2\15\2\0\23\15\6\0\1\23\11\0\2\15"+
    "\2\0\4\15\1\112\16\15\6\0\1\70\1\0\1\71"+
    "\4\0\1\113\2\0\2\72\2\0\23\73\3\0\1\71"+
    "\2\0\2\71\1\114\41\71\3\0\1\115\7\0\1\116"+
    "\1\0\2\72\2\0\23\73\6\0\1\115\11\0\2\73"+
    "\2\0\23\73\6\0\1\117\11\0\2\74\2\0\23\74"+
    "\6\0\1\75\11\0\2\120\1\37\1\0\23\120\6\0"+
    "\1\105\1\55\1\0\1\57\6\0\2\62\1\107\1\55"+
    "\7\62\1\121\13\62\1\0\1\63\4\0\1\77\1\0"+
    "\1\100\7\0\2\101\2\0\17\103\1\122\3\103\3\0"+
    "\1\100\2\0\2\100\1\123\41\100\3\0\1\124\7\0"+
    "\1\125\1\0\2\101\2\0\23\103\6\0\1\77\1\0"+
    "\1\100\7\0\2\101\2\0\23\103\6\0\1\124\11\0"+
    "\2\103\2\0\23\103\3\0\1\56\2\0\1\126\1\127"+
    "\1\104\1\130\10\56\1\131\1\127\24\56\1\132\1\56"+
    "\3\0\1\105\1\55\1\0\1\57\10\0\1\107\1\55"+
    "\17\0\1\133\4\0\1\63\16\0\2\134\47\0\1\102"+
    "\32\0\1\135\11\0\2\110\2\0\23\110\6\0\1\136"+
    "\11\0\2\6\2\0\23\6\6\0\1\136\11\0\2\15"+
    "\2\0\23\15\23\0\1\137\26\0\1\71\2\0\1\140"+
    "\1\71\1\114\41\71\3\0\1\115\6\0\1\113\51\0"+
    "\2\141\33\0\1\117\22\0\1\142\23\0\1\143\3\0"+
    "\1\144\5\0\2\120\2\0\23\120\6\0\1\105\1\55"+
    "\1\0\1\57\6\0\2\62\1\107\1\55\4\62\1\145"+
    "\16\62\1\0\1\63\4\0\1\124\11\0\2\103\2\0"+
    "\7\103\1\146\13\103\3\0\1\100\2\0\1\147\1\100"+
    "\1\123\41\100\3\0\1\124\34\0\1\133\23\0\2\150"+
    "\30\0\1\56\2\0\1\126\1\127\1\104\1\130\10\56"+
    "\1\131\1\127\17\56\1\151\4\56\1\132\2\56\2\0"+
    "\1\152\1\56\1\104\7\56\2\153\1\154\1\56\23\155"+
    "\4\56\2\0\2\56\1\104\1\154\41\56\2\0\2\56"+
    "\1\104\11\56\1\154\30\56\2\0\2\56\1\104\37\56"+
    "\1\154\1\56\30\0\1\156\21\0\1\105\1\55\1\0"+
    "\1\57\6\0\2\134\1\107\1\55\24\0\1\63\4\0"+
    "\1\135\13\0\1\157\32\0\1\160\1\161\1\162\1\163"+
    "\6\0\2\164\1\165\1\161\23\166\1\0\1\167\4\0"+
    "\1\170\43\0\1\71\2\0\1\140\1\71\1\114\4\71"+
    "\1\171\34\71\3\0\1\115\11\0\2\141\66\0\1\172"+
    "\13\0\1\143\3\0\1\144\42\0\1\144\4\0\1\173"+
    "\11\0\1\174\11\0\1\175\2\0\1\176\12\0\1\105"+
    "\1\55\1\0\1\57\6\0\2\62\1\107\1\55\13\62"+
    "\1\177\7\62\1\0\1\63\4\0\1\124\11\0\2\103"+
    "\2\0\4\103\1\200\16\103\3\0\1\100\2\0\1\147"+
    "\1\100\1\123\32\100\1\201\6\100\3\0\1\124\11\0"+
    "\2\150\30\0\1\56\2\0\2\56\1\104\22\56\1\202"+
    "\17\56\2\0\1\152\1\56\1\104\7\56\2\153\2\56"+
    "\17\155\1\203\3\155\4\56\2\0\1\204\1\56\1\104"+
    "\5\56\1\205\1\56\2\153\2\56\23\155\4\56\2\0"+
    "\1\152\1\56\1\104\7\56\2\153\2\56\23\155\4\56"+
    "\2\0\1\204\1\56\1\104\7\56\2\155\2\56\23\155"+
    "\3\56\25\0\1\206\24\0\1\207\46\0\1\160\1\161"+
    "\1\162\1\163\6\0\2\164\1\165\1\161\3\166\1\210"+
    "\17\166\1\0\1\167\4\0\1\211\1\0\1\212\7\0"+
    "\2\213\1\214\1\0\23\215\3\0\1\162\2\0\2\162"+
    "\1\216\41\162\6\0\1\214\43\0\1\217\1\161\1\0"+
    "\1\163\4\0\1\220\1\0\2\164\1\221\1\161\23\166"+
    "\1\0\1\167\4\0\1\51\13\0\1\214\32\0\1\217"+
    "\1\161\1\0\1\163\6\0\2\166\1\221\1\161\23\166"+
    "\1\0\1\167\46\0\1\214\4\0\1\170\16\0\1\222"+
    "\11\0\1\223\2\0\1\224\7\0\1\71\2\0\2\71"+
    "\1\114\12\71\1\225\26\71\35\0\1\226\14\0\1\227"+
    "\100\0\1\230\52\0\1\231\45\0\1\232\11\0\1\124"+
    "\11\0\2\103\2\0\13\103\1\233\7\103\3\0\1\100"+
    "\2\0\2\100\1\123\22\100\1\234\16\100\1\56\2\0"+
    "\2\56\1\104\17\56\1\235\22\56\2\0\1\204\1\56"+
    "\1\104\7\56\2\155\2\56\7\155\1\236\13\155\4\56"+
    "\2\0\1\204\1\56\1\104\32\56\1\151\7\56\2\0"+
    "\2\56\1\104\7\56\2\237\30\56\34\0\1\240\15\0"+
    "\1\241\1\0\1\242\7\0\2\243\2\0\23\244\6\0"+
    "\1\217\1\161\1\0\1\163\6\0\2\166\1\221\1\161"+
    "\14\166\1\245\6\166\1\0\1\167\4\0\1\211\1\0"+
    "\1\212\7\0\2\213\2\0\3\215\1\246\17\215\3\0"+
    "\1\212\2\0\2\212\1\247\41\212\3\0\1\250\7\0"+
    "\1\251\1\0\2\213\2\0\23\215\6\0\1\211\1\0"+
    "\1\212\7\0\2\213\2\0\23\215\6\0\1\250\11\0"+
    "\2\215\2\0\23\215\3\0\1\162\2\0\1\252\1\253"+
    "\1\216\1\254\10\162\1\255\1\253\24\162\1\256\1\162"+
    "\3\0\1\217\1\161\1\0\1\163\10\0\1\221\1\161"+
    "\3\0\1\257\20\0\1\167\16\0\2\260\47\0\1\214"+
    "\64\0\1\261\52\0\1\262\45\0\1\263\6\0\1\71"+
    "\2\0\1\264\1\71\1\114\41\71\33\0\1\265\16\0"+
    "\1\227\6\0\1\266\71\0\1\267\44\0\1\270\51\0"+
    "\1\271\10\0\1\100\2\0\2\100\1\123\17\100\1\272"+
    "\21\100\1\56\2\0\2\56\1\104\26\56\1\273\13\56"+
    "\2\0\1\204\1\56\1\104\7\56\2\155\2\56\4\155"+
    "\1\274\16\155\4\56\2\0\1\204\1\56\1\104\7\56"+
    "\2\237\30\56\3\0\1\241\1\0\1\242\4\0\1\275"+
    "\2\0\2\243\2\0\23\244\3\0\1\242\2\0\2\242"+
    "\1\276\41\242\3\0\1\277\7\0\1\300\1\0\2\243"+
    "\2\0\23\244\6\0\1\277\11\0\2\244\2\0\23\244"+
    "\6\0\1\250\11\0\2\215\2\0\14\215\1\301\6\215"+
    "\3\0\1\212\2\0\1\302\1\212\1\247\41\212\3\0"+
    "\1\250\20\0\1\257\37\0\2\303\30\0\1\162\2\0"+
    "\1\252\1\253\1\216\1\254\10\162\1\255\1\253\3\162"+
    "\1\304\20\162\1\256\2\162\2\0\1\305\1\162\1\216"+
    "\7\162\2\306\1\307\1\162\23\310\4\162\2\0\2\162"+
    "\1\216\1\307\41\162\2\0\2\162\1\216\11\162\1\307"+
    "\30\162\2\0\2\162\1\216\37\162\1\307\1\162\35\0"+
    "\1\311\14\0\1\217\1\161\1\0\1\163\6\0\2\260"+
    "\1\221\1\161\24\0\1\167\36\0\1\312\44\0\1\36"+
    "\51\0\1\313\10\0\1\71\2\0\1\264\1\71\1\114"+
    "\14\71\1\314\11\71\1\315\2\71\1\316\7\71\3\0"+
    "\1\317\63\0\1\320\60\0\1\270\17\0\1\321\74\0"+
    "\1\322\15\0\1\100\2\0\2\100\1\123\26\100\1\323"+
    "\12\100\1\56\2\0\1\204\1\56\1\104\7\56\2\155"+
    "\2\56\13\155\1\324\7\155\3\56\20\0\1\325\26\0"+
    "\1\242\2\0\1\326\1\242\1\276\41\242\3\0\1\277"+
    "\6\0\1\275\51\0\2\327\30\0\1\212\2\0\1\302"+
    "\1\212\1\247\16\212\1\330\22\212\3\0\1\250\11\0"+
    "\2\303\30\0\1\162\2\0\2\162\1\216\27\162\1\331"+
    "\12\162\2\0\1\305\1\162\1\216\7\162\2\306\2\162"+
    "\3\310\1\332\17\310\4\162\2\0\1\333\1\162\1\216"+
    "\5\162\1\334\1\162\2\306\2\162\23\310\4\162\2\0"+
    "\1\305\1\162\1\216\7\162\2\306\2\162\23\310\4\162"+
    "\2\0\1\333\1\162\1\216\7\162\2\310\2\162\23\310"+
    "\3\162\32\0\1\36\45\0\1\335\15\0\1\71\2\0"+
    "\2\71\1\114\27\71\1\336\12\71\2\0\2\71\1\114"+
    "\33\71\1\337\6\71\2\0\2\71\1\114\32\71\1\340"+
    "\6\71\3\0\1\317\12\0\1\341\33\0\1\342\46\0"+
    "\1\321\1\0\1\343\3\0\1\344\3\0\2\345\2\0"+
    "\23\346\37\0\1\347\15\0\1\350\43\0\1\242\2\0"+
    "\1\326\1\242\1\276\4\242\1\351\34\242\3\0\1\277"+
    "\11\0\2\327\30\0\1\212\2\0\2\212\1\247\27\212"+
    "\1\352\11\212\1\162\2\0\1\333\1\162\1\216\7\162"+
    "\2\310\2\162\14\310\1\353\6\310\4\162\2\0\1\333"+
    "\1\162\1\216\16\162\1\304\23\162\2\0\2\162\1\216"+
    "\7\162\2\354\30\162\34\0\1\355\12\0\1\71\2\0"+
    "\2\71\1\114\27\71\1\356\12\71\2\0\2\71\1\114"+
    "\25\71\1\357\14\71\2\0\2\71\1\114\30\71\1\360"+
    "\10\71\3\0\1\361\11\0\2\341\33\0\1\342\16\0"+
    "\1\362\11\0\1\363\2\0\1\364\2\0\1\365\4\0"+
    "\1\343\2\0\2\343\1\366\41\343\3\0\1\344\16\0"+
    "\1\367\11\0\1\370\2\0\1\371\20\0\1\344\1\0"+
    "\1\372\1\0\2\345\2\0\23\346\14\0\1\344\3\0"+
    "\2\346\2\0\23\346\32\0\1\270\22\0\1\350\16\0"+
    "\1\373\11\0\1\374\2\0\1\375\7\0\1\242\2\0"+
    "\2\242\1\276\12\242\1\376\26\242\1\162\2\0\1\333"+
    "\1\162\1\216\7\162\2\354\30\162\27\0\1\36\17\0"+
    "\1\71\2\0\2\71\1\114\24\71\1\357\15\71\2\0"+
    "\2\71\1\114\23\71\1\377\15\71\3\0\1\361\34\0"+
    "\1\u0100\43\0\1\u0101\52\0\1\u0102\45\0\1\u0103\43\0"+
    "\1\u0104\11\0\1\343\2\0\2\343\1\366\3\343\1\u0105"+
    "\35\343\35\0\1\u0106\52\0\1\u0107\45\0\1\u0108\23\0"+
    "\2\u0109\65\0\1\u010a\52\0\1\u010b\45\0\1\u010c\6\0"+
    "\1\242\2\0\1\u010d\1\242\1\276\41\242\1\71\2\0"+
    "\2\71\1\114\26\71\1\u010e\12\71\35\0\1\u010f\46\0"+
    "\1\u0110\44\0\1\u0111\51\0\1\u0112\41\0\1\u0113\15\0"+
    "\1\343\2\0\1\u0105\1\343\1\366\14\343\1\u0114\11\343"+
    "\1\u0115\2\343\1\u0116\7\343\35\0\1\u0117\44\0\1\u0118"+
    "\51\0\1\u0119\21\0\1\344\3\0\2\u0109\65\0\1\u011a"+
    "\44\0\1\u011b\51\0\1\u011c\10\0\1\242\2\0\1\u010d"+
    "\1\242\1\276\14\242\1\u011d\11\242\1\u011e\2\242\1\u011f"+
    "\7\242\1\71\2\0\2\71\1\114\21\71\1\357\17\71"+
    "\3\0\1\u0120\75\0\1\u0111\45\0\1\u0121\41\0\1\u0111"+
    "\22\0\1\343\2\0\2\343\1\366\27\343\1\u0122\12\343"+
    "\2\0\2\343\1\366\33\343\1\u0123\6\343\2\0\2\343"+
    "\1\366\32\343\1\u0124\6\343\32\0\1\u0118\17\0\1\u0125"+
    "\74\0\1\u0126\47\0\1\u011b\45\0\1\u0127\15\0\1\242"+
    "\2\0\2\242\1\276\27\242\1\u0128\12\242\2\0\2\242"+
    "\1\276\33\242\1\u0129\6\242\2\0\2\242\1\276\32\242"+
    "\1\u012a\6\242\3\0\1\u0120\12\0\1\u012b\64\0\1\u012c"+
    "\12\0\1\343\2\0\2\343\1\366\27\343\1\u012d\12\343"+
    "\2\0\2\343\1\366\25\343\1\u012e\14\343\2\0\2\343"+
    "\1\366\30\343\1\u012f\10\343\3\0\1\u0125\1\0\1\u0130"+
    "\2\0\1\173\4\0\2\u0131\2\0\23\u0132\37\0\1\u0133"+
    "\46\0\1\u0134\12\0\1\242\2\0\2\242\1\276\27\242"+
    "\1\u0135\12\242\2\0\2\242\1\276\25\242\1\u0136\14\242"+
    "\2\0\2\242\1\276\30\242\1\u0137\10\242\3\0\1\u0138"+
    "\11\0\2\u012b\57\0\1\u0111\17\0\1\343\2\0\2\343"+
    "\1\366\24\343\1\u012e\15\343\2\0\1\u0139\1\343\1\366"+
    "\42\343\2\0\2\343\1\366\23\343\1\u013a\15\343\1\u0130"+
    "\2\0\2\u0130\1\u013b\41\u0130\3\0\1\u013c\4\0\1\173"+
    "\2\0\1\u013d\1\0\2\u0131\2\0\23\u0132\6\0\1\u013c"+
    "\4\0\1\173\4\0\2\u0132\2\0\23\u0132\32\0\1\u0118"+
    "\46\0\1\u011b\17\0\1\242\2\0\2\242\1\276\24\242"+
    "\1\u0136\15\242\2\0\2\242\1\276\23\242\1\u013e\15\242"+
    "\3\0\1\u0138\20\0\1\u013f\22\0\1\343\2\0\1\u0139"+
    "\1\343\1\u0140\2\343\1\u0141\4\343\2\u0142\2\343\23\u0143"+
    "\4\343\2\0\2\343\1\366\26\343\1\u0144\12\343\1\u0130"+
    "\2\0\1\u013b\1\u0130\1\u013b\2\u0130\1\u0145\36\u0130\3\0"+
    "\1\u013c\4\0\1\173\53\0\2\u0146\30\0\1\242\2\0"+
    "\2\242\1\276\26\242\1\u0147\12\242\35\0\1\u0148\11\0"+
    "\1\u0149\2\0\2\u0149\1\u014a\3\u0149\1\u014b\35\u0149\1\343"+
    "\2\0\1\u014c\1\343\1\366\42\343\2\0\1\u014d\1\343"+
    "\1\366\2\343\1\u0141\2\343\1\u014e\1\343\2\u0142\2\343"+
    "\23\u0143\4\343\2\0\1\u014d\1\343\1\366\2\343\1\u0141"+
    "\4\343\2\u0143\2\343\23\u0143\4\343\2\0\2\343\1\366"+
    "\21\343\1\u012e\17\343\1\u0130\2\0\1\u014f\1\u0130\1\u013b"+
    "\41\u0130\3\0\1\u013c\4\0\1\173\4\0\2\u0146\30\0"+
    "\1\242\2\0\2\242\1\276\21\242\1\u0136\17\242\1\u0149"+
    "\2\0\2\u0149\1\u014a\42\u0149\2\0\1\u0150\1\u0149\1\u014a"+
    "\2\u0149\1\u0151\1\u014b\36\u0149\2\0\1\u014b\1\u0149\1\u014a"+
    "\14\u0149\1\u0152\11\u0149\1\u0153\2\u0149\1\u0154\7\u0149\1\343"+
    "\2\0\1\u014c\1\343\1\366\4\343\1\u0155\35\343\2\0"+
    "\1\u014d\1\343\1\366\2\343\1\u0141\37\343\2\0\2\343"+
    "\1\366\7\343\2\u0156\30\343\1\u0130\2\0\1\u014f\1\u0130"+
    "\1\u013b\4\u0130\1\u0157\34\u0130\1\u0149\2\0\1\u0150\1\u0149"+
    "\1\u014a\2\u0149\1\u0151\37\u0149\2\0\1\u0158\1\u0149\1\u014a"+
    "\42\u0149\2\0\2\u0149\1\u014a\27\u0149\1\u0159\12\u0149\2\0"+
    "\2\u0149\1\u014a\33\u0149\1\u015a\6\u0149\2\0\2\u0149\1\u014a"+
    "\32\u0149\1\u015b\6\u0149\1\343\2\0\2\343\1\366\12\343"+
    "\1\u015c\27\343\2\0\1\u014d\1\343\1\366\2\343\1\u0141"+
    "\4\343\2\u0156\30\343\1\u0130\2\0\2\u0130\1\u013b\12\u0130"+
    "\1\u015d\26\u0130\1\u0149\2\0\1\u0158\1\u0149\1\u014a\4\u0149"+
    "\1\u015e\35\u0149\2\0\2\u0149\1\u014a\27\u0149\1\u015f\12\u0149"+
    "\2\0\2\u0149\1\u014a\25\u0149\1\u0160\14\u0149\2\0\2\u0149"+
    "\1\u014a\30\u0149\1\u0161\10\u0149\1\343\2\0\1\u0162\1\343"+
    "\1\366\41\343\1\u0130\2\0\1\u0163\1\u0130\1\u013b\41\u0130"+
    "\1\u0149\2\0\2\u0149\1\u014a\12\u0149\1\u0164\27\u0149\2\0"+
    "\2\u0149\1\u014a\24\u0149\1\u0160\15\u0149\2\0\1\u0165\1\u0149"+
    "\1\u014a\42\u0149\2\0\2\u0149\1\u014a\23\u0149\1\u0166\15\u0149"+
    "\1\343\2\0\1\u0162\1\343\1\366\14\343\1\u0167\11\343"+
    "\1\u0168\2\343\1\u0169\2\343\1\u016a\4\343\1\u0130\2\0"+
    "\1\u0163\1\u0130\1\u013b\14\u0130\1\u016b\11\u0130\1\u016c\2\u0130"+
    "\1\u016d\2\u0130\1\u016e\4\u0130\1\u0149\2\0\1\u016f\1\u0149"+
    "\1\u014a\42\u0149\2\0\1\u0165\1\u0149\1\u014a\2\u0149\1\u0151"+
    "\4\u0149\2\u0170\2\u0149\23\u0171\4\u0149\2\0\2\u0149\1\u014a"+
    "\26\u0149\1\u0172\12\u0149\1\343\2\0\2\343\1\366\27\343"+
    "\1\u0173\12\343\2\0\2\343\1\366\33\343\1\u0174\6\343"+
    "\2\0\2\343\1\366\32\343\1\u0175\7\343\2\0\2\343"+
    "\1\366\27\343\1\u0176\11\343\1\u0130\2\0\2\u0130\1\u013b"+
    "\27\u0130\1\u0177\12\u0130\2\0\2\u0130\1\u013b\33\u0130\1\u0178"+
    "\6\u0130\2\0\2\u0130\1\u013b\32\u0130\1\u0179\7\u0130\2\0"+
    "\2\u0130\1\u013b\27\u0130\1\u017a\11\u0130\1\u0149\2\0\1\u016f"+
    "\1\u0149\1\u014a\14\u0149\1\u017b\11\u0149\1\u017c\2\u0149\1\u017d"+
    "\2\u0149\1\u017e\5\u0149\2\0\1\u0150\1\u0149\1\u014a\2\u0149"+
    "\1\u0151\2\u0149\1\u017f\1\u0149\2\u0170\2\u0149\23\u0171\4\u0149"+
    "\2\0\1\u0150\1\u0149\1\u014a\2\u0149\1\u0151\4\u0149\2\u0171"+
    "\2\u0149\23\u0171\4\u0149\2\0\2\u0149\1\u014a\21\u0149\1\u0160"+
    "\17\u0149\1\343\2\0\2\343\1\366\27\343\1\u0180\12\343"+
    "\2\0\2\343\1\366\25\343\1\u0181\14\343\2\0\2\343"+
    "\1\366\30\343\1\u0182\11\343\2\0\2\343\1\366\23\343"+
    "\1\u0183\15\343\1\u0130\2\0\2\u0130\1\u013b\27\u0130\1\u0184"+
    "\12\u0130\2\0\2\u0130\1\u013b\25\u0130\1\u0185\14\u0130\2\0"+
    "\2\u0130\1\u013b\30\u0130\1\u0186\11\u0130\2\0\2\u0130\1\u013b"+
    "\23\u0130\1\u0187\15\u0130\1\u0149\2\0\2\u0149\1\u014a\27\u0149"+
    "\1\u0188\12\u0149\2\0\2\u0149\1\u014a\33\u0149\1\u0189\6\u0149"+
    "\2\0\2\u0149\1\u014a\32\u0149\1\u018a\7\u0149\2\0\2\u0149"+
    "\1\u014a\27\u0149\1\u018b\12\u0149\2\0\2\u0149\1\u014a\7\u0149"+
    "\2\u018c\30\u0149\1\343\2\0\2\343\1\366\24\343\1\u0181"+
    "\15\343\2\0\2\343\1\366\23\343\1\u018d\16\343\2\0"+
    "\2\343\1\366\16\343\1\u0181\22\343\1\u0130\2\0\2\u0130"+
    "\1\u013b\24\u0130\1\u0185\15\u0130\2\0\2\u0130\1\u013b\23\u0130"+
    "\1\u018e\16\u0130\2\0\2\u0130\1\u013b\16\u0130\1\u0185\22\u0130"+
    "\1\u0149\2\0\2\u0149\1\u014a\27\u0149\1\u018f\12\u0149\2\0"+
    "\2\u0149\1\u014a\25\u0149\1\u0190\14\u0149\2\0\2\u0149\1\u014a"+
    "\30\u0149\1\u0191\11\u0149\2\0\2\u0149\1\u014a\23\u0149\1\u0192"+
    "\16\u0149\2\0\1\u0150\1\u0149\1\u014a\2\u0149\1\u0151\4\u0149"+
    "\2\u018c\30\u0149\1\343\2\0\2\343\1\366\26\343\1\u0193"+
    "\12\343\1\u0130\2\0\2\u0130\1\u013b\26\u0130\1\u0194\12\u0130"+
    "\1\u0149\2\0\2\u0149\1\u014a\24\u0149\1\u0190\15\u0149\2\0"+
    "\2\u0149\1\u014a\23\u0149\1\u0195\16\u0149\2\0\2\u0149\1\u014a"+
    "\16\u0149\1\u0190\22\u0149\1\343\2\0\2\343\1\366\21\343"+
    "\1\u0181\17\343\1\u0130\2\0\2\u0130\1\u013b\21\u0130\1\u0185"+
    "\17\u0130\1\u0149\2\0\2\u0149\1\u014a\26\u0149\1\u0196\13\u0149"+
    "\2\0\2\u0149\1\u014a\21\u0149\1\u0190\17\u0149";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14898];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\5\0\1\1\1\0\5\1"+
    "\5\0\1\11\1\0\2\1\1\0\2\1\6\0\1\1"+
    "\11\0\1\1\23\0\1\1\65\0\1\1\33\0\1\1"+
    "\4\0\1\11\4\0\1\1\25\0\1\1\5\0\1\1"+
    "\7\0\1\11\11\0\2\1\4\0\1\1\20\0\2\1"+
    "\3\0\1\1\41\0\1\11\11\0\1\11\32\0\1\1"+
    "\21\0\1\11\70\0\1\1\3\0\1\1\12\0\1\1"+
    "\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 11: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 12: break;
          case 3:
            { 
            }
            // fall through
          case 13: break;
          case 4:
            { parser.lb();
            }
            // fall through
          case 14: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 15: break;
          case 6:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 16: break;
          case 7:
            { parser.while_loop(parser.split(yytext()));
            }
            // fall through
          case 17: break;
          case 8:
            { parser.func_def(parser.split(yytext()));
            }
            // fall through
          case 18: break;
          case 9:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 19: break;
          case 10:
            { parser.for_loop(parser.split(yytext()));
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
