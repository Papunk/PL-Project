// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LOOP = 2;
  public static final int FUNC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\1\0\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\15\11\16\1\17\1\0\1\4\1\20\1\21"+
    "\2\0\32\22\4\0\1\23\1\0\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\22\1\35"+
    "\1\36\1\37\1\40\1\41\2\22\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\3\22\1\50\1\51\1\52\7\0"+
    "\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\11\1\1\4\1\5\1\3"+
    "\1\6\1\7\6\0\1\3\12\0\1\3\3\0\1\10"+
    "\13\0\1\11\23\0\2\11\1\10\2\0\1\12\21\0"+
    "\1\11\32\0\1\13\1\0\1\11\2\0\1\11\34\0"+
    "\1\13\16\0\1\14\20\0\2\13\13\0\1\11\10\0"+
    "\1\14\15\0\1\14\12\0\1\13\2\0\1\15\33\0"+
    "\1\14\27\0\1\13\2\0\1\13\3\0\1\15\15\0"+
    "\1\15\12\0\1\14\3\0\1\14\42\0\1\15\51\0"+
    "\1\13\2\0\1\15\3\0\1\15\41\0\1\14\57\0"+
    "\2\14\2\0\1\14\31\0\1\15\13\0\1\16\13\0"+
    "\1\14\13\0\1\17\10\0\1\15\1\0\1\15\5\0"+
    "\1\15\25\0\1\14\13\0\1\15\26\0\1\14\3\0"+
    "\1\17\4\0\1\15\22\0\1\15\31\0\1\20\14\0"+
    "\1\17\3\0\1\16\53\0\1\16\67\0\1\16\16\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[819];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\201\0\254\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u022f\0\201"+
    "\0\201\0\u025a\0\201\0\201\0\u0102\0\u0183\0\u01ae\0\u01d9"+
    "\0\u0204\0\u022f\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c"+
    "\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\201\0\u045e\0\u0489"+
    "\0\u04b4\0\201\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e"+
    "\0\u0739\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866"+
    "\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be"+
    "\0\u09e9\0\u0a14\0\u0a3f\0\u04b4\0\u0a6a\0\u0a95\0\u0102\0\u0ac0"+
    "\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70"+
    "\0\u09e9\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d"+
    "\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u0d9b\0\u124f\0\u127a"+
    "\0\201\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af"+
    "\0\u17da\0\u1805\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u0912\0\u19de\0\u1a09\0\u1a34"+
    "\0\u1a5f\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c"+
    "\0\u1bb7\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4"+
    "\0\u1d0f\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c"+
    "\0\u1e67\0\u1e92\0\u127a\0\u1ebd\0\u1ee8\0\u1f13\0\u1f3e\0\u1f69"+
    "\0\u1f94\0\u1fbf\0\u1fea\0\u0c18\0\u2015\0\u2040\0\u206b\0\u2096"+
    "\0\u20c1\0\u20ec\0\u2117\0\u2142\0\u216d\0\u2198\0\u21c3\0\u21ee"+
    "\0\u2219\0\201\0\u2244\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u231b"+
    "\0\u2346\0\u2371\0\u239c\0\u23c7\0\u1c63\0\u23f2\0\u241d\0\u1886"+
    "\0\u2448\0\u2473\0\u249e\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575"+
    "\0\u25a0\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd"+
    "\0\u26f8\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825"+
    "\0\u2850\0\u287b\0\u28a6\0\u0866\0\u28d1\0\u28fc\0\u2927\0\u2952"+
    "\0\u297d\0\u29a8\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa"+
    "\0\u2ad5\0\u2b00\0\u2b2b\0\u2b56\0\u2b81\0\u2bac\0\u2bd7\0\u2c02"+
    "\0\u2c2d\0\u2c58\0\u2c83\0\u23f2\0\u2cae\0\u2cd9\0\201\0\u2d04"+
    "\0\u2d2f\0\u2d5a\0\u1dbb\0\u2d85\0\u2db0\0\u2ddb\0\u2e06\0\u2e31"+
    "\0\u2e5c\0\u2e87\0\u2eb2\0\u2edd\0\u2f08\0\u2f33\0\u2f5e\0\u2f89"+
    "\0\201\0\u2fb4\0\u2fdf\0\u300a\0\u3035\0\u3060\0\u308b\0\u30b6"+
    "\0\u30e1\0\u310c\0\u3137\0\u0b97\0\u3162\0\u318d\0\u31b8\0\u1657"+
    "\0\u31e3\0\u320e\0\u3239\0\u3264\0\u328f\0\u32ba\0\u32e5\0\u3310"+
    "\0\u333b\0\u3366\0\u3391\0\u33bc\0\u33e7\0\u3412\0\u343d\0\u3468"+
    "\0\u3493\0\u34be\0\u34e9\0\u3514\0\u353f\0\u356a\0\u3595\0\u35c0"+
    "\0\u35eb\0\u3616\0\u3641\0\u366c\0\u3697\0\u36c2\0\u36ed\0\u3718"+
    "\0\u3743\0\u376e\0\u17da\0\u3799\0\u37c4\0\u37ef\0\u381a\0\u3845"+
    "\0\u3870\0\u389b\0\u38c6\0\u38f1\0\u391c\0\u3947\0\u3972\0\u399d"+
    "\0\u39c8\0\u39f3\0\u3a1e\0\u3a49\0\u3a74\0\u3a9f\0\u3aca\0\u3af5"+
    "\0\u3b20\0\u3b4b\0\u3b76\0\u3ba1\0\u3bcc\0\u3bf7\0\u3c22\0\u3c4d"+
    "\0\u3c78\0\u3ca3\0\u3cce\0\u3cf9\0\u3d24\0\u3d4f\0\u3d7a\0\u3da5"+
    "\0\u3dd0\0\u3dfb\0\u3e26\0\u3e51\0\u2cd9\0\u3e7c\0\u3ea7\0\u1d3a"+
    "\0\u3ed2\0\u3efd\0\u3f28\0\u2f89\0\u3f53\0\u3f7e\0\u3fa9\0\u3fd4"+
    "\0\u3fff\0\u402a\0\u4055\0\u4080\0\u40ab\0\u40d6\0\u4101\0\u412c"+
    "\0\u4157\0\u4182\0\u41ad\0\u41d8\0\u4203\0\u422e\0\u4259\0\u4284"+
    "\0\u42af\0\u42da\0\u4305\0\u4330\0\u435b\0\u4386\0\u43b1\0\u43dc"+
    "\0\u4407\0\u4432\0\u445d\0\u4488\0\u44b3\0\u10f7\0\u44de\0\u4509"+
    "\0\u4534\0\u455f\0\u458a\0\u45b5\0\u45e0\0\u460b\0\u4636\0\u4661"+
    "\0\u468c\0\u46b7\0\u46e2\0\u470d\0\u4738\0\u4763\0\u478e\0\u47b9"+
    "\0\u47e4\0\u480f\0\u483a\0\u4865\0\u4890\0\u48bb\0\u48e6\0\u4911"+
    "\0\u493c\0\u4967\0\u4992\0\u49bd\0\u49e8\0\u4a13\0\u4a3e\0\u4a69"+
    "\0\u4a94\0\u4abf\0\u4aea\0\u4b15\0\u4b40\0\u4b6b\0\u4b96\0\u4bc1"+
    "\0\u4bec\0\u4c17\0\u4c42\0\u4c6d\0\u4c98\0\u14d4\0\u28fc\0\u4cc3"+
    "\0\u4cee\0\u2b56\0\u4d19\0\u4d44\0\u4d6f\0\u4d9a\0\u4dc5\0\u4df0"+
    "\0\u4e1b\0\u4e46\0\u4e71\0\u4e9c\0\u4ec7\0\u4ef2\0\u4f1d\0\u4f48"+
    "\0\u4f73\0\u4f9e\0\u4fc9\0\u4ff4\0\u501f\0\u504a\0\u5075\0\u50a0"+
    "\0\u50cb\0\u50f6\0\u5121\0\u2677\0\u514c\0\u5177\0\u51a2\0\u51cd"+
    "\0\u51f8\0\u5223\0\u524e\0\u5279\0\u52a4\0\u52cf\0\u52fa\0\201"+
    "\0\u5325\0\u5350\0\u537b\0\u53a6\0\u53d1\0\u53fc\0\u5427\0\u5452"+
    "\0\u547d\0\u54a8\0\u54d3\0\u328f\0\u54fe\0\u5529\0\u5554\0\u557f"+
    "\0\u55aa\0\u55d5\0\u5600\0\u562b\0\u5656\0\u5681\0\u56ac\0\201"+
    "\0\u56d7\0\u5702\0\u572d\0\u5758\0\u5783\0\u57ae\0\u57d9\0\u5804"+
    "\0\u2e06\0\u582f\0\u483a\0\u585a\0\u5885\0\u58b0\0\u58db\0\u5906"+
    "\0\u4a94\0\u5931\0\u595c\0\u5987\0\u59b2\0\u59dd\0\u5a08\0\u5a33"+
    "\0\u5a5e\0\u5a89\0\u5ab4\0\u5adf\0\u5b0a\0\u5b35\0\u5b60\0\u5b8b"+
    "\0\u5bb6\0\u5be1\0\u5c0c\0\u5c37\0\u5c62\0\u5c8d\0\u3391\0\u5cb8"+
    "\0\u5ce3\0\u5d0e\0\u5d39\0\u5d64\0\u5d8f\0\u5dba\0\u5de5\0\u5e10"+
    "\0\u5e3b\0\u5e66\0\u50a0\0\u5e91\0\u5ebc\0\u5ee7\0\u5f12\0\u5f3d"+
    "\0\u5f68\0\u5f93\0\u5fbe\0\u5fe9\0\u6014\0\u603f\0\u606a\0\u6095"+
    "\0\u60c0\0\u60eb\0\u6116\0\u6141\0\u616c\0\u6197\0\u61c2\0\u61ed"+
    "\0\u6218\0\u45b5\0\u6243\0\u626e\0\u6299\0\u2371\0\u62c4\0\u62ef"+
    "\0\u631a\0\u6345\0\u5177\0\u6370\0\u639b\0\u63c6\0\u63f1\0\u641c"+
    "\0\u6447\0\u6472\0\u649d\0\u64c8\0\u64f3\0\u651e\0\u6549\0\u6574"+
    "\0\u659f\0\u65ca\0\u65f5\0\u6620\0\u664b\0\u5fe9\0\u6676\0\u66a1"+
    "\0\u66cc\0\u66f7\0\u6722\0\u674d\0\u6778\0\u67a3\0\u67ce\0\u67f9"+
    "\0\u6824\0\u684f\0\u687a\0\u68a5\0\u68d0\0\u68fb\0\u6926\0\u6951"+
    "\0\u697c\0\u69a7\0\u69d2\0\u69fd\0\u6a28\0\u6a53\0\u6a7e\0\201"+
    "\0\u6aa9\0\u6ad4\0\u6aff\0\u6b2a\0\u6b55\0\u6b80\0\u6bab\0\u6bd6"+
    "\0\u6c01\0\u6c2c\0\u6c57\0\u6c82\0\u3595\0\u6cad\0\u6cd8\0\u6d03"+
    "\0\u42af\0\u6d2e\0\u6d59\0\u6d84\0\u6daf\0\u6dda\0\u6e05\0\u6e30"+
    "\0\u6e5b\0\u6e86\0\u6eb1\0\u6edc\0\u6f07\0\u6f32\0\u6f5d\0\u6f88"+
    "\0\u6fb3\0\u6fde\0\u7009\0\u7034\0\u705f\0\u708a\0\u70b5\0\u70e0"+
    "\0\u710b\0\u7136\0\u7161\0\u718c\0\u71b7\0\u71e2\0\u720d\0\u7238"+
    "\0\u7263\0\u728e\0\u72b9\0\u72e4\0\u730f\0\u733a\0\u7365\0\u7390"+
    "\0\u73bb\0\u73e6\0\u7411\0\u743c\0\u5427\0\u7467\0\u7492\0\u74bd"+
    "\0\u74e8\0\u7513\0\u753e\0\u7569\0\u7594\0\u75bf\0\u75ea\0\u7615"+
    "\0\u7640\0\u766b\0\u7696\0\u76c1\0\u76ec\0\u7717\0\u7742\0\u776d"+
    "\0\u7798\0\u77c3\0\u77ee\0\u7819\0\u7844\0\u786f\0\u789a\0\u78c5"+
    "\0\u78f0\0\u791b\0\u7946\0\u7971\0\u799c\0\u79c7\0\u79f2\0\u7a1d"+
    "\0\u7a48\0\u7a73\0\u7a9e\0\u7ac9\0\u7af4\0\u7b1f\0\u7b4a\0\u7b75"+
    "\0\u7ba0\0\u7bcb\0\u7bf6\0\u7c21\0\u7c4c\0\u7c77\0\u7ca2\0\u7ccd"+
    "\0\u7cf8\0\u7d23\0\u7d4e\0\u7d79\0\u733a\0\u7da4\0\u7dcf\0\u7dfa"+
    "\0\u7e25\0\u7e50\0\u7e7b\0\u7ea6\0\u7ed1\0\u7efc\0\u7f27\0\u7f52"+
    "\0\u7f7d\0\u7fa8\0\u7fd3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[819];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\10\4\1\7\5\4\1\10"+
    "\1\4\1\10\1\11\1\12\2\10\1\13\2\10\1\14"+
    "\1\10\1\15\3\10\1\16\4\10\1\17\1\20\1\4"+
    "\1\21\3\4\1\22\10\4\1\7\33\4\1\23\5\4"+
    "\1\22\10\4\1\7\33\4\1\24\2\4\56\0\1\6"+
    "\16\0\1\25\1\0\5\25\1\26\2\25\1\27\1\25"+
    "\1\30\3\25\1\31\4\25\1\32\17\0\1\33\41\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\26\25\6\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\20\25\1\36"+
    "\5\25\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\17\25\1\37\6\25\6\0\1\34\3\0\1\35\5\0"+
    "\2\25\3\0\17\25\1\40\3\25\1\41\2\25\6\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\7\25\1\42"+
    "\16\25\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\6\25\1\43\17\25\6\0\1\34\3\0\1\35\5\0"+
    "\2\25\3\0\6\25\1\44\17\25\6\0\1\34\3\0"+
    "\1\35\5\0\2\25\3\0\11\25\1\45\14\25\6\0"+
    "\1\22\47\0\1\33\1\46\1\0\50\33\3\0\1\34"+
    "\14\0\1\47\35\0\1\50\1\0\1\51\2\0\1\52"+
    "\1\53\3\0\2\54\3\0\1\55\1\0\24\55\6\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\6\25\1\56"+
    "\17\25\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\16\25\1\57\7\25\6\0\1\34\3\0\1\35\5\0"+
    "\2\25\3\0\20\25\1\60\5\25\6\0\1\34\3\0"+
    "\1\35\5\0\2\25\3\0\16\25\1\61\7\25\6\0"+
    "\1\62\3\0\1\35\5\0\2\25\3\0\26\25\6\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\22\25\1\63"+
    "\3\25\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\22\25\1\64\3\25\6\0\1\34\3\0\1\35\5\0"+
    "\2\25\3\0\12\25\1\65\13\25\6\0\1\66\52\0"+
    "\1\50\4\0\1\52\42\0\1\51\2\0\2\51\1\67"+
    "\45\51\3\0\1\70\57\0\1\52\1\53\1\0\1\71"+
    "\1\0\2\54\44\0\1\52\1\53\3\0\2\55\3\0"+
    "\26\55\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\2\25\1\72\23\25\6\0\1\34\3\0\1\35\5\0"+
    "\2\25\3\0\22\25\1\73\3\25\6\0\1\74\3\0"+
    "\1\35\5\0\2\25\3\0\26\25\6\0\1\34\3\0"+
    "\1\35\5\0\2\25\3\0\4\25\1\75\21\25\6\0"+
    "\1\76\1\77\1\100\1\101\6\0\2\102\1\0\1\103"+
    "\1\77\1\104\1\0\24\104\1\0\1\105\4\0\1\106"+
    "\3\0\1\35\5\0\2\25\3\0\26\25\6\0\1\34"+
    "\3\0\1\35\5\0\2\25\3\0\23\25\1\107\2\25"+
    "\6\0\1\34\3\0\1\35\5\0\2\25\3\0\14\25"+
    "\1\110\11\25\6\0\1\66\1\0\1\111\7\0\2\112"+
    "\3\0\1\113\1\0\24\113\3\0\1\51\2\0\2\51"+
    "\1\67\2\51\1\114\1\115\41\51\3\0\1\70\1\0"+
    "\1\51\2\0\1\52\1\53\3\0\2\54\3\0\1\55"+
    "\1\0\24\55\20\0\2\116\37\0\1\34\3\0\1\35"+
    "\5\0\2\25\3\0\13\25\1\117\12\25\6\0\1\34"+
    "\3\0\1\35\5\0\2\25\3\0\12\25\1\120\13\25"+
    "\6\0\1\74\14\0\1\47\1\0\1\121\1\0\24\121"+
    "\6\0\1\122\3\0\1\35\5\0\2\25\3\0\26\25"+
    "\6\0\1\76\1\77\1\100\1\101\6\0\2\102\1\0"+
    "\1\103\1\77\1\104\1\0\20\104\1\123\3\104\1\0"+
    "\1\105\4\0\1\124\1\0\1\125\7\0\2\126\1\0"+
    "\1\127\1\0\1\130\1\0\24\130\3\0\1\100\2\0"+
    "\2\100\1\131\45\100\6\0\1\127\47\0\1\132\1\77"+
    "\1\0\1\101\4\0\1\133\1\0\2\102\1\0\1\134"+
    "\1\77\27\0\1\105\4\0\1\66\14\0\1\127\35\0"+
    "\1\132\1\77\1\0\1\101\1\135\5\0\2\104\1\0"+
    "\1\134\1\77\26\104\1\0\1\105\52\0\1\127\4\0"+
    "\1\106\14\0\1\47\1\0\1\136\1\0\24\136\6\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\20\25\1\137"+
    "\5\25\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\6\25\1\140\17\25\3\0\1\111\2\0\2\111\1\141"+
    "\45\111\13\0\1\142\1\0\2\112\43\0\1\143\5\0"+
    "\2\113\3\0\26\113\3\0\1\51\2\0\1\144\1\51"+
    "\1\67\45\51\10\0\1\52\1\53\3\0\2\116\37\0"+
    "\1\34\3\0\1\35\5\0\2\25\3\0\16\25\1\145"+
    "\7\25\6\0\1\146\11\0\2\121\3\0\26\121\6\0"+
    "\1\122\14\0\1\47\1\0\1\147\1\0\24\147\6\0"+
    "\1\132\1\77\1\0\1\101\1\135\5\0\2\104\1\0"+
    "\1\134\1\77\11\104\1\150\14\104\1\0\1\105\4\0"+
    "\1\124\1\0\1\125\7\0\2\126\3\0\1\130\1\0"+
    "\20\130\1\151\3\130\3\0\1\125\2\0\2\125\1\152"+
    "\45\125\3\0\1\153\7\0\1\154\1\0\2\126\37\0"+
    "\1\124\1\0\1\125\7\0\2\126\3\0\1\130\1\0"+
    "\24\130\6\0\1\153\3\0\1\155\5\0\2\130\3\0"+
    "\26\130\3\0\1\100\2\0\1\156\1\157\1\131\1\160"+
    "\11\100\1\161\1\157\27\100\1\162\1\100\3\0\1\132"+
    "\1\77\1\0\1\101\11\0\1\134\1\77\22\0\1\163"+
    "\4\0\1\105\16\0\2\164\54\0\1\127\35\0\1\165"+
    "\1\0\1\166\2\0\1\167\1\170\3\0\2\171\3\0"+
    "\1\172\1\0\24\172\6\0\1\173\11\0\2\136\3\0"+
    "\26\136\6\0\1\34\3\0\1\35\5\0\2\25\3\0"+
    "\16\25\1\174\7\25\6\0\1\175\3\0\1\35\5\0"+
    "\2\25\3\0\26\25\20\0\2\176\37\0\1\177\1\0"+
    "\1\200\2\0\1\201\1\202\3\0\2\203\3\0\1\204"+
    "\1\0\24\204\3\0\1\51\2\0\1\144\1\51\1\67"+
    "\2\51\1\114\1\115\3\51\2\205\3\51\1\206\1\51"+
    "\24\206\3\51\3\0\1\34\3\0\1\35\5\0\2\25"+
    "\3\0\23\25\1\207\2\25\6\0\1\146\25\0\1\210"+
    "\36\0\2\147\1\211\2\0\26\147\6\0\1\132\1\77"+
    "\1\0\1\101\1\135\5\0\2\104\1\0\1\134\1\77"+
    "\6\104\1\212\17\104\1\0\1\105\4\0\1\153\3\0"+
    "\1\155\5\0\2\130\3\0\11\130\1\213\14\130\3\0"+
    "\1\125\2\0\1\214\1\125\1\152\45\125\3\0\1\153"+
    "\40\0\1\163\23\0\2\215\37\0\1\216\1\0\1\217"+
    "\2\0\1\220\1\221\3\0\2\222\3\0\1\223\1\0"+
    "\24\223\3\0\1\100\2\0\1\156\1\157\1\131\1\160"+
    "\11\100\1\161\1\157\22\100\1\224\4\100\1\162\2\100"+
    "\2\0\1\225\1\100\1\131\7\100\2\226\1\100\1\227"+
    "\1\100\1\230\1\100\24\230\4\100\2\0\2\100\1\131"+
    "\1\227\45\100\2\0\2\100\1\131\12\100\1\227\33\100"+
    "\2\0\2\100\1\131\43\100\1\227\1\100\33\0\1\231"+
    "\22\0\1\132\1\77\1\0\1\101\6\0\2\164\1\0"+
    "\1\134\1\77\27\0\1\105\4\0\1\165\4\0\1\167"+
    "\42\0\1\166\2\0\2\166\1\232\45\166\3\0\1\132"+
    "\1\77\1\0\1\101\11\0\1\134\1\77\27\0\1\105"+
    "\4\0\1\233\57\0\1\167\1\170\1\0\1\234\1\0"+
    "\2\171\44\0\1\167\1\170\3\0\2\172\3\0\26\172"+
    "\6\0\1\173\14\0\1\235\35\0\1\236\3\0\1\35"+
    "\5\0\2\25\3\0\26\25\6\0\1\237\1\240\1\241"+
    "\1\242\6\0\2\243\1\0\1\244\1\240\1\245\1\0"+
    "\24\245\1\0\1\246\4\0\1\177\4\0\1\201\42\0"+
    "\1\200\2\0\2\200\1\247\45\200\3\0\1\250\57\0"+
    "\1\201\1\202\1\0\1\251\1\0\2\203\44\0\1\201"+
    "\1\202\3\0\2\204\3\0\26\204\3\0\1\51\2\0"+
    "\2\51\1\67\2\51\1\114\1\115\1\51\1\252\1\51"+
    "\2\205\35\51\2\0\2\51\1\67\2\51\1\114\1\115"+
    "\3\51\2\206\3\51\26\206\3\51\3\0\1\34\3\0"+
    "\1\35\5\0\2\25\3\0\6\25\1\117\17\25\45\0"+
    "\1\253\13\0\1\254\52\0\1\132\1\77\1\0\1\101"+
    "\1\135\5\0\2\104\1\0\1\134\1\77\16\104\1\255"+
    "\7\104\1\0\1\105\4\0\1\153\3\0\1\155\5\0"+
    "\2\130\3\0\6\130\1\256\17\130\3\0\1\125\2\0"+
    "\1\214\1\125\1\152\36\125\1\257\6\125\3\0\1\153"+
    "\11\0\2\215\37\0\1\216\4\0\1\220\42\0\1\217"+
    "\2\0\2\217\1\260\45\217\3\0\1\153\52\0\1\261"+
    "\57\0\1\220\1\221\1\0\1\262\1\0\2\222\44\0"+
    "\1\220\1\221\3\0\2\223\3\0\26\223\3\0\1\100"+
    "\2\0\2\100\1\131\25\100\1\263\20\100\2\0\1\225"+
    "\1\100\1\131\7\100\2\226\3\100\1\230\1\100\20\230"+
    "\1\264\3\230\4\100\2\0\1\265\1\100\1\131\5\100"+
    "\1\266\1\100\2\226\35\100\2\0\1\225\1\100\1\131"+
    "\7\100\2\226\3\100\1\230\1\100\24\230\4\100\2\0"+
    "\1\265\1\100\1\131\1\100\1\267\5\100\2\230\3\100"+
    "\26\230\3\100\30\0\1\270\22\0\1\166\2\0\2\166"+
    "\1\232\2\166\1\271\1\272\41\166\3\0\1\233\1\0"+
    "\1\166\2\0\1\167\1\170\3\0\2\171\3\0\1\172"+
    "\1\0\24\172\20\0\2\273\37\0\1\274\52\0\1\236"+
    "\1\0\1\275\7\0\2\276\1\0\1\47\1\0\1\277"+
    "\1\0\24\277\6\0\1\237\1\240\1\241\1\242\6\0"+
    "\2\243\1\0\1\244\1\240\1\245\1\0\3\245\1\300"+
    "\20\245\1\0\1\246\4\0\1\301\1\0\1\302\7\0"+
    "\2\303\1\0\1\304\1\0\1\305\1\0\24\305\3\0"+
    "\1\241\2\0\2\241\1\306\45\241\6\0\1\304\47\0"+
    "\1\307\1\240\1\0\1\242\4\0\1\310\1\0\2\243"+
    "\1\0\1\311\1\240\27\0\1\246\4\0\1\66\14\0"+
    "\1\304\35\0\1\307\1\240\1\0\1\242\1\312\5\0"+
    "\2\245\1\0\1\311\1\240\26\245\1\0\1\246\52\0"+
    "\1\304\1\0\1\200\2\0\2\200\1\247\2\200\1\313"+
    "\1\314\41\200\3\0\1\250\1\0\1\200\2\0\1\201"+
    "\1\202\3\0\2\203\3\0\1\204\1\0\24\204\20\0"+
    "\2\315\34\0\1\51\2\0\2\51\1\67\7\51\2\316"+
    "\34\51\41\0\1\317\14\0\1\320\21\0\1\321\12\0"+
    "\1\322\2\0\1\323\12\0\1\153\3\0\1\155\5\0"+
    "\2\130\3\0\16\130\1\324\7\130\3\0\1\125\2\0"+
    "\2\125\1\152\25\125\1\325\17\125\1\217\2\0\2\217"+
    "\1\260\2\217\1\326\1\327\41\217\3\0\1\261\1\0"+
    "\1\217\2\0\1\220\1\221\3\0\2\222\3\0\1\223"+
    "\1\0\24\223\20\0\2\330\34\0\1\100\2\0\2\100"+
    "\1\131\22\100\1\331\23\100\2\0\1\265\1\100\1\131"+
    "\1\100\1\267\5\100\2\230\3\100\11\230\1\332\14\230"+
    "\4\100\2\0\1\265\1\100\1\131\36\100\1\224\7\100"+
    "\2\0\2\100\1\131\7\100\2\333\35\100\2\0\1\334"+
    "\1\100\1\335\2\100\1\336\1\337\3\100\2\340\3\100"+
    "\1\341\1\100\24\341\3\100\40\0\1\342\12\0\1\166"+
    "\2\0\1\343\1\344\1\232\1\345\11\166\1\346\1\344"+
    "\27\166\1\347\2\166\2\0\1\350\1\166\1\232\45\166"+
    "\10\0\1\167\1\170\3\0\2\273\37\0\1\351\1\0"+
    "\1\352\7\0\2\353\3\0\1\354\1\0\24\354\3\0"+
    "\1\275\2\0\2\275\1\355\45\275\13\0\1\356\1\0"+
    "\2\276\43\0\1\357\5\0\2\277\3\0\26\277\6\0"+
    "\1\307\1\240\1\0\1\242\1\312\5\0\2\245\1\0"+
    "\1\311\1\240\17\245\1\360\6\245\1\0\1\246\4\0"+
    "\1\301\1\0\1\302\7\0\2\303\3\0\1\305\1\0"+
    "\3\305\1\361\20\305\3\0\1\302\2\0\2\302\1\362"+
    "\45\302\3\0\1\363\7\0\1\364\1\0\2\303\37\0"+
    "\1\301\1\0\1\302\7\0\2\303\3\0\1\305\1\0"+
    "\24\305\6\0\1\363\3\0\1\365\5\0\2\305\3\0"+
    "\26\305\3\0\1\241\2\0\1\366\1\367\1\306\1\370"+
    "\11\241\1\371\1\367\27\241\1\372\1\241\3\0\1\307"+
    "\1\240\1\0\1\242\11\0\1\311\1\240\5\0\1\373"+
    "\21\0\1\246\16\0\2\374\54\0\1\304\35\0\1\375"+
    "\1\0\1\376\2\0\1\377\1\u0100\3\0\2\u0101\3\0"+
    "\1\u0102\1\0\24\u0102\3\0\1\200\2\0\1\u0103\1\200"+
    "\1\247\45\200\10\0\1\201\1\202\3\0\2\315\34\0"+
    "\1\51\2\0\2\51\1\67\2\51\1\114\1\115\3\51"+
    "\2\316\34\51\37\0\1\u0104\16\0\1\320\6\0\1\u0105"+
    "\12\0\1\321\12\0\1\322\2\0\1\323\50\0\1\u0106"+
    "\56\0\1\u0107\51\0\1\u0108\6\0\1\125\2\0\2\125"+
    "\1\152\22\125\1\u0109\22\125\1\217\2\0\1\u010a\1\217"+
    "\1\260\46\217\2\0\1\u010b\1\217\1\260\45\217\10\0"+
    "\1\220\1\221\3\0\2\330\34\0\1\100\2\0\2\100"+
    "\1\131\32\100\1\u010c\13\100\2\0\1\265\1\100\1\131"+
    "\1\100\1\267\5\100\2\230\3\100\6\230\1\u010d\17\230"+
    "\4\100\2\0\1\265\1\100\1\131\7\100\2\333\35\100"+
    "\2\0\1\334\1\100\1\131\2\100\1\336\42\100\1\u010e"+
    "\2\0\1\u010f\1\u0110\1\u0111\1\u0112\11\u010e\1\u0113\1\u0110"+
    "\27\u010e\1\u0114\1\u010e\1\100\2\0\1\265\1\100\1\131"+
    "\46\100\2\0\1\u0115\1\100\1\131\46\100\2\0\2\100"+
    "\1\131\2\100\1\336\1\337\1\100\1\u0116\1\100\2\340"+
    "\35\100\2\0\2\100\1\131\2\100\1\336\1\337\3\100"+
    "\2\341\3\100\26\341\3\100\1\166\2\0\1\343\1\344"+
    "\1\232\1\345\11\166\1\346\1\344\22\166\1\u0117\4\166"+
    "\1\347\2\166\2\0\1\u0118\1\166\1\u0119\7\166\2\u011a"+
    "\1\166\1\u011b\1\166\1\u011c\1\166\24\u011c\4\166\2\0"+
    "\2\166\1\232\1\u011b\45\166\2\0\2\166\1\232\12\166"+
    "\1\u011b\33\166\2\0\2\166\1\232\43\166\1\u011b\2\166"+
    "\2\0\1\350\1\166\1\232\2\166\1\271\1\272\3\166"+
    "\2\u011d\3\166\1\u011e\1\166\24\u011e\3\166\3\0\1\351"+
    "\1\0\1\352\4\0\1\u011f\2\0\2\353\3\0\1\354"+
    "\1\0\24\354\3\0\1\352\2\0\2\352\1\u0120\45\352"+
    "\3\0\1\u0121\7\0\1\u0122\1\0\2\353\37\0\1\u0121"+
    "\3\0\1\u0123\5\0\2\354\3\0\26\354\20\0\2\u0124"+
    "\37\0\1\u0125\1\0\1\u0126\2\0\1\u0127\1\u0128\3\0"+
    "\2\u0129\3\0\1\u012a\1\0\24\u012a\6\0\1\363\3\0"+
    "\1\365\5\0\2\305\3\0\17\305\1\u012b\6\305\3\0"+
    "\1\302\2\0\1\u012c\1\302\1\362\45\302\3\0\1\363"+
    "\23\0\1\373\40\0\2\u012d\37\0\1\u012e\1\0\1\u012f"+
    "\2\0\1\u0130\1\u0131\3\0\2\u0132\3\0\1\u0133\1\0"+
    "\24\u0133\3\0\1\241\2\0\1\366\1\367\1\306\1\370"+
    "\11\241\1\371\1\367\5\241\1\u0134\21\241\1\372\2\241"+
    "\2\0\1\u0135\1\241\1\306\7\241\2\u0136\1\241\1\u0137"+
    "\1\241\1\u0138\1\241\24\u0138\4\241\2\0\2\241\1\306"+
    "\1\u0137\45\241\2\0\2\241\1\306\12\241\1\u0137\33\241"+
    "\2\0\2\241\1\306\43\241\1\u0137\1\241\41\0\1\u0139"+
    "\14\0\1\307\1\240\1\0\1\242\6\0\2\374\1\0"+
    "\1\311\1\240\27\0\1\246\4\0\1\375\4\0\1\377"+
    "\42\0\1\376\2\0\2\376\1\u013a\45\376\3\0\1\307"+
    "\1\240\1\0\1\242\11\0\1\311\1\240\27\0\1\246"+
    "\4\0\1\u013b\57\0\1\377\1\u0100\1\0\1\u013c\1\0"+
    "\2\u0101\44\0\1\377\1\u0100\3\0\2\u0102\3\0\26\u0102"+
    "\3\0\1\200\2\0\1\u0103\1\200\1\247\2\200\1\313"+
    "\1\314\3\200\2\u013d\3\200\1\u013e\1\200\24\u013e\3\200"+
    "\3\0\1\u013f\70\0\1\u0140\72\0\1\u0141\50\0\1\u0142"+
    "\55\0\1\u0143\10\0\1\125\2\0\2\125\1\152\32\125"+
    "\1\u0144\12\125\1\217\2\0\1\u010a\1\217\1\260\36\217"+
    "\1\u0145\7\217\2\0\1\u010b\1\217\1\260\2\217\1\326"+
    "\1\327\3\217\2\u0146\3\217\1\u0147\1\217\24\u0147\3\217"+
    "\1\100\2\0\1\265\1\100\1\131\1\100\1\267\5\100"+
    "\2\230\3\100\16\230\1\u0148\7\230\3\100\1\u010e\2\0"+
    "\2\u010e\1\u0111\46\u010e\2\0\1\u010f\1\u0110\1\u0111\1\u0112"+
    "\11\u010e\1\u0113\1\u0110\22\u010e\1\u0149\4\u010e\1\u0114\2\u010e"+
    "\2\0\1\u014a\1\u010e\1\u0111\7\u010e\2\u014b\1\u010e\1\u014c"+
    "\1\u010e\1\u014d\1\u010e\24\u014d\4\u010e\2\0\1\u010f\1\u0110"+
    "\1\u0111\1\u0112\1\u010e\1\u014e\1\u014f\6\u010e\1\u0113\1\u0110"+
    "\27\u010e\1\u0114\2\u010e\2\0\2\u010e\1\u0111\1\u014c\45\u010e"+
    "\2\0\2\u010e\1\u0111\12\u010e\1\u014c\33\u010e\2\0\2\u010e"+
    "\1\u0111\43\u010e\1\u014c\1\u010e\1\100\2\0\1\u0115\1\100"+
    "\1\335\2\100\1\336\1\337\3\100\2\340\3\100\1\341"+
    "\1\100\24\341\4\100\2\0\2\100\1\131\7\100\2\u0150"+
    "\34\100\1\166\2\0\2\166\1\232\25\166\1\u0151\20\166"+
    "\2\0\1\u0118\1\166\1\u0119\7\166\2\u011a\3\166\1\u011c"+
    "\1\166\20\u011c\1\u0152\3\u011c\3\166\1\u0153\2\0\2\u0153"+
    "\1\u0154\2\u0153\1\u0155\1\u0156\41\u0153\1\166\2\0\1\u0157"+
    "\1\166\1\232\5\166\1\u0158\1\166\2\u011a\35\166\2\0"+
    "\1\u0118\1\166\1\u0119\7\166\2\u011a\3\166\1\u011c\1\166"+
    "\24\u011c\4\166\2\0\1\u0157\1\166\1\232\1\166\1\u0159"+
    "\5\166\2\u011c\3\166\26\u011c\4\166\2\0\2\166\1\232"+
    "\2\166\1\271\1\272\1\166\1\u015a\1\166\2\u011d\35\166"+
    "\2\0\2\166\1\232\2\166\1\271\1\272\3\166\2\u011e"+
    "\3\166\26\u011e\3\166\21\0\1\u015b\31\0\1\352\2\0"+
    "\1\u015c\1\352\1\u0120\45\352\3\0\1\u0121\6\0\1\u011f"+
    "\55\0\2\u015d\37\0\1\u015e\1\0\1\u015f\2\0\1\u0160"+
    "\1\u0161\3\0\2\u0162\3\0\1\u0163\1\0\24\u0163\6\0"+
    "\1\u0125\4\0\1\u0127\42\0\1\u0126\2\0\2\u0126\1\u0164"+
    "\45\u0126\3\0\1\u0165\57\0\1\u0127\1\u0128\1\0\1\u0166"+
    "\1\0\2\u0129\44\0\1\u0127\1\u0128\3\0\2\u012a\3\0"+
    "\26\u012a\3\0\1\302\2\0\1\u012c\1\302\1\362\21\302"+
    "\1\u0167\23\302\3\0\1\363\11\0\2\u012d\37\0\1\u012e"+
    "\4\0\1\u0130\42\0\1\u012f\2\0\2\u012f\1\u0168\45\u012f"+
    "\3\0\1\363\52\0\1\u0169\57\0\1\u0130\1\u0131\1\0"+
    "\1\u016a\1\0\2\u0132\44\0\1\u0130\1\u0131\3\0\2\u0133"+
    "\3\0\26\u0133\3\0\1\241\2\0\2\241\1\306\33\241"+
    "\1\u016b\12\241\2\0\1\u0135\1\241\1\306\7\241\2\u0136"+
    "\3\241\1\u0138\1\241\3\u0138\1\u016c\20\u0138\4\241\2\0"+
    "\1\u016d\1\241\1\306\5\241\1\u016e\1\241\2\u0136\35\241"+
    "\2\0\1\u0135\1\241\1\306\7\241\2\u0136\3\241\1\u0138"+
    "\1\241\24\u0138\4\241\2\0\1\u016d\1\241\1\306\1\241"+
    "\1\u016f\5\241\2\u0138\3\241\26\u0138\3\241\1\376\2\0"+
    "\2\376\1\u013a\2\376\1\u0170\1\u0171\41\376\3\0\1\u013b"+
    "\1\0\1\376\2\0\1\377\1\u0100\3\0\2\u0101\3\0"+
    "\1\u0102\1\0\24\u0102\20\0\2\u0172\34\0\1\200\2\0"+
    "\2\200\1\247\2\200\1\313\1\314\1\200\1\u0173\1\200"+
    "\2\u013d\35\200\2\0\2\200\1\247\2\200\1\313\1\314"+
    "\3\200\2\u013e\3\200\26\u013e\3\200\3\0\1\u013f\12\0"+
    "\1\u0174\37\0\1\u0175\105\0\1\u0142\17\0\1\u0176\103\0"+
    "\1\u0177\16\0\1\217\2\0\2\217\1\260\25\217\1\u0178"+
    "\20\217\2\0\2\217\1\260\2\217\1\326\1\327\1\217"+
    "\1\u0179\1\217\2\u0146\35\217\2\0\2\217\1\260\2\217"+
    "\1\326\1\327\3\217\2\u0147\3\217\26\u0147\3\217\1\u010e"+
    "\2\0\2\u010e\1\u0111\25\u010e\1\u017a\20\u010e\2\0\1\u014a"+
    "\1\u010e\1\u0111\7\u010e\2\u014b\3\u010e\1\u014d\1\u010e\20\u014d"+
    "\1\u017b\3\u014d\4\u010e\2\0\1\u017c\1\u010e\1\u0111\5\u010e"+
    "\1\u017d\1\u010e\2\u014b\35\u010e\2\0\1\u014a\1\u010e\1\u0111"+
    "\7\u010e\2\u014b\3\u010e\1\u014d\1\u010e\24\u014d\4\u010e\2\0"+
    "\1\u017c\1\u010e\1\u0111\1\u010e\1\u017e\5\u010e\2\u014d\3\u010e"+
    "\26\u014d\4\u010e\2\0\1\u017c\1\u010e\1\u0111\46\u010e\2\0"+
    "\1\u017f\1\u010e\1\u0111\45\u010e\1\100\2\0\2\100\1\131"+
    "\2\100\1\336\1\337\3\100\2\u0150\34\100\1\166\2\0"+
    "\2\166\1\232\22\166\1\u0180\23\166\2\0\1\u0157\1\166"+
    "\1\232\1\166\1\u0159\5\166\2\u011c\3\166\11\u011c\1\u0181"+
    "\14\u011c\3\166\1\u0153\2\0\2\u0153\1\u0154\46\u0153\2\0"+
    "\1\u0182\1\u0153\1\u0154\2\u0153\1\u0155\1\u0156\42\u0153\2\0"+
    "\1\u0183\1\u0184\1\u0154\1\u0185\11\u0153\1\u0186\1\u0184\27\u0153"+
    "\1\u0187\2\u0153\2\0\1\u0188\1\u0153\1\u0154\45\u0153\1\166"+
    "\2\0\1\u0157\1\166\1\232\36\166\1\u0117\7\166\2\0"+
    "\2\166\1\232\7\166\2\u0189\35\166\2\0\1\u018a\1\166"+
    "\1\232\2\166\1\u018b\1\u018c\3\166\2\u018d\3\166\1\u018e"+
    "\1\166\24\u018e\4\166\2\0\2\166\1\232\7\166\2\u018f"+
    "\34\166\3\0\1\u0190\47\0\1\352\2\0\1\u015c\1\352"+
    "\1\u0120\4\352\1\u0191\40\352\3\0\1\u0121\11\0\2\u015d"+
    "\37\0\1\u015e\4\0\1\u0160\42\0\1\u015f\2\0\2\u015f"+
    "\1\u0192\45\u015f\3\0\1\u0121\52\0\1\u0193\57\0\1\u0160"+
    "\1\u0161\1\0\1\u0194\1\0\2\u0162\44\0\1\u0160\1\u0161"+
    "\3\0\2\u0163\3\0\26\u0163\3\0\1\u0126\2\0\2\u0126"+
    "\1\u0164\2\u0126\1\u0195\1\u0196\41\u0126\3\0\1\u0165\1\0"+
    "\1\u0126\2\0\1\u0127\1\u0128\3\0\2\u0129\3\0\1\u012a"+
    "\1\0\24\u012a\20\0\2\u0197\34\0\1\302\2\0\2\302"+
    "\1\362\33\302\1\u0198\11\302\1\u012f\2\0\2\u012f\1\u0168"+
    "\2\u012f\1\u0199\1\u019a\41\u012f\3\0\1\u0169\1\0\1\u012f"+
    "\2\0\1\u0130\1\u0131\3\0\2\u0132\3\0\1\u0133\1\0"+
    "\24\u0133\20\0\2\u019b\34\0\1\241\2\0\1\u016d\1\241"+
    "\1\306\1\241\1\u016f\5\241\2\u0138\3\241\17\u0138\1\u019c"+
    "\6\u0138\4\241\2\0\1\u016d\1\241\1\306\21\241\1\u0134"+
    "\24\241\2\0\2\241\1\306\7\241\2\u019d\35\241\2\0"+
    "\1\u019e\1\241\1\u019f\2\241\1\u01a0\1\u01a1\3\241\2\u01a2"+
    "\3\241\1\u01a3\1\241\24\u01a3\3\241\1\376\2\0\1\u01a4"+
    "\1\u01a5\1\u013a\1\u01a6\11\376\1\u01a7\1\u01a5\27\376\1\u01a8"+
    "\2\376\2\0\1\u01a9\1\376\1\u013a\45\376\10\0\1\377"+
    "\1\u0100\3\0\2\u0172\34\0\1\200\2\0\2\200\1\247"+
    "\7\200\2\u01aa\34\200\3\0\1\u01ab\11\0\2\u0174\37\0"+
    "\1\u0175\21\0\1\u01ac\12\0\1\u01ad\2\0\1\u01ae\2\0"+
    "\1\u01af\7\0\1\u01b0\1\0\1\u01b1\3\0\1\u01b2\3\0"+
    "\2\u01b3\3\0\1\u01b4\1\0\24\u01b4\43\0\1\u01b5\12\0"+
    "\1\217\2\0\2\217\1\260\22\217\1\u01b6\23\217\2\0"+
    "\2\217\1\260\7\217\2\u01b7\34\217\1\u010e\2\0\2\u010e"+
    "\1\u0111\22\u010e\1\u01b8\23\u010e\2\0\1\u017c\1\u010e\1\u0111"+
    "\1\u010e\1\u017e\5\u010e\2\u014d\3\u010e\11\u014d\1\u01b9\14\u014d"+
    "\4\u010e\2\0\1\u017c\1\u010e\1\u0111\36\u010e\1\u0149\7\u010e"+
    "\2\0\2\u010e\1\u0111\7\u010e\2\u01ba\35\u010e\2\0\1\u01bb"+
    "\1\u010e\1\u0111\2\u010e\1\u014e\1\u014f\3\u010e\2\u01bc\3\u010e"+
    "\1\u01bd\1\u010e\24\u01bd\4\u010e\2\0\1\u017f\1\u010e\1\u0111"+
    "\2\u010e\1\u014e\1\u014f\3\u010e\2\u01bc\3\u010e\1\u01bd\1\u010e"+
    "\24\u01bd\3\u010e\1\166\2\0\2\166\1\232\32\166\1\u01be"+
    "\13\166\2\0\1\u0157\1\166\1\232\1\166\1\u0159\5\166"+
    "\2\u011c\3\166\6\u011c\1\u01bf\17\u011c\3\166\1\u0153\2\0"+
    "\1\u0182\1\u0153\1\u0154\36\u0153\1\u01c0\7\u0153\2\0\1\u0183"+
    "\1\u0184\1\u0154\1\u0185\11\u0153\1\u0186\1\u0184\22\u0153\1\u01c0"+
    "\4\u0153\1\u0187\2\u0153\2\0\1\u01c1\1\u0153\1\u0154\7\u0153"+
    "\2\u01c2\1\u0153\1\u01c3\1\u0153\1\u01c4\1\u0153\24\u01c4\4\u0153"+
    "\2\0\2\u0153\1\u0154\1\u01c3\45\u0153\2\0\2\u0153\1\u0154"+
    "\12\u0153\1\u01c3\33\u0153\2\0\2\u0153\1\u0154\43\u0153\1\u01c3"+
    "\2\u0153\2\0\1\u0188\1\u0153\1\u0154\2\u0153\1\u0155\1\u0156"+
    "\3\u0153\2\u01c5\3\u0153\1\u01c6\1\u0153\24\u01c6\3\u0153\1\166"+
    "\2\0\1\u0157\1\166\1\232\7\166\2\u0189\35\166\2\0"+
    "\1\u018a\1\166\1\232\2\166\1\u018b\43\166\2\0\1\u0157"+
    "\1\166\1\232\46\166\2\0\1\u01c7\1\166\1\232\46\166"+
    "\2\0\2\166\1\232\2\166\1\u018b\1\u018c\1\166\1\u01c8"+
    "\1\166\2\u018d\35\166\2\0\2\166\1\232\2\166\1\u018b"+
    "\1\u018c\3\166\2\u018e\3\166\26\u018e\4\166\2\0\2\166"+
    "\1\232\2\166\1\271\1\272\3\166\2\u018f\34\166\3\0"+
    "\1\u0190\21\0\1\u01c9\12\0\1\u01ca\2\0\1\u01cb\7\0"+
    "\1\352\2\0\2\352\1\u0120\13\352\1\u01cc\31\352\1\u015f"+
    "\2\0\2\u015f\1\u0192\2\u015f\1\u01cd\1\u01ce\41\u015f\3\0"+
    "\1\u0193\1\0\1\u015f\2\0\1\u0160\1\u0161\3\0\2\u0162"+
    "\3\0\1\u0163\1\0\24\u0163\20\0\2\u01cf\34\0\1\u0126"+
    "\2\0\1\u01d0\1\u0126\1\u0164\45\u0126\10\0\1\u0127\1\u0128"+
    "\3\0\2\u0197\34\0\1\u012f\2\0\1\u01d1\1\u012f\1\u0168"+
    "\46\u012f\2\0\1\u01d2\1\u012f\1\u0168\45\u012f\10\0\1\u0130"+
    "\1\u0131\3\0\2\u019b\34\0\1\241\2\0\1\u016d\1\241"+
    "\1\306\7\241\2\u019d\35\241\2\0\1\u019e\1\241\1\306"+
    "\2\241\1\u01a0\42\241\1\u01d3\2\0\1\u01d4\1\u01d5\1\u01d6"+
    "\1\u01d7\11\u01d3\1\u01d8\1\u01d5\27\u01d3\1\u01d9\1\u01d3\1\241"+
    "\2\0\1\u016d\1\241\1\306\46\241\2\0\1\u01da\1\241"+
    "\1\306\46\241\2\0\2\241\1\306\2\241\1\u01a0\1\u01a1"+
    "\1\241\1\u01db\1\241\2\u01a2\35\241\2\0\2\241\1\306"+
    "\2\241\1\u01a0\1\u01a1\3\241\2\u01a3\3\241\26\u01a3\3\241"+
    "\1\376\2\0\1\u01a4\1\u01a5\1\u013a\1\u01a6\11\376\1\u01a7"+
    "\1\u01a5\5\376\1\u01dc\21\376\1\u01a8\2\376\2\0\1\u01dd"+
    "\1\376\1\u01de\7\376\2\u01df\1\376\1\u01e0\1\376\1\u01e1"+
    "\1\376\24\u01e1\4\376\2\0\2\376\1\u013a\1\u01e0\45\376"+
    "\2\0\2\376\1\u013a\12\376\1\u01e0\33\376\2\0\2\376"+
    "\1\u013a\43\376\1\u01e0\2\376\2\0\1\u01a9\1\376\1\u013a"+
    "\2\376\1\u0170\1\u0171\3\376\2\u01e2\3\376\1\u01e3\1\376"+
    "\24\u01e3\3\376\1\200\2\0\2\200\1\247\2\200\1\313"+
    "\1\314\3\200\2\u01aa\34\200\3\0\1\u01ab\40\0\1\u01e4"+
    "\47\0\1\u01e5\56\0\1\u01e6\51\0\1\u01e7\47\0\1\u01e8"+
    "\14\0\1\u01b0\1\0\1\u01b1\3\0\1\u01b2\1\u0105\2\0"+
    "\2\u01b3\3\0\1\u01b4\1\0\24\u01b4\3\0\1\u01b1\2\0"+
    "\2\u01b1\1\u01e9\45\u01b1\3\0\1\u01ea\52\0\1\u01eb\5\0"+
    "\1\u01b2\1\0\1\u01ec\1\0\2\u01b3\37\0\1\u01eb\3\0"+
    "\1\u01ed\1\0\1\u01b2\3\0\2\u01b4\3\0\26\u01b4\35\0"+
    "\1\u0142\20\0\1\217\2\0\2\217\1\260\32\217\1\u01ee"+
    "\13\217\2\0\2\217\1\260\2\217\1\326\1\327\3\217"+
    "\2\u01b7\34\217\1\u010e\2\0\2\u010e\1\u0111\32\u010e\1\u01ef"+
    "\13\u010e\2\0\1\u017c\1\u010e\1\u0111\1\u010e\1\u017e\5\u010e"+
    "\2\u014d\3\u010e\6\u014d\1\u01f0\17\u014d\4\u010e\2\0\1\u017c"+
    "\1\u010e\1\u0111\7\u010e\2\u01ba\35\u010e\2\0\1\u01bb\1\u010e"+
    "\1\u0111\2\u010e\1\u014e\43\u010e\2\0\2\u010e\1\u0111\2\u010e"+
    "\1\u014e\1\u014f\1\u010e\1\u01f1\1\u010e\2\u01bc\35\u010e\2\0"+
    "\2\u010e\1\u0111\2\u010e\1\u014e\1\u014f\3\u010e\2\u01bd\3\u010e"+
    "\26\u01bd\3\u010e\1\166\2\0\1\u0157\1\166\1\232\1\166"+
    "\1\u0159\5\166\2\u011c\3\166\16\u011c\1\u01f2\7\u011c\3\166"+
    "\1\u0153\2\0\2\u0153\1\u0154\25\u0153\1\u01f3\20\u0153\2\0"+
    "\1\u01c1\1\u0153\1\u0154\7\u0153\2\u01c2\3\u0153\1\u01c4\1\u0153"+
    "\20\u01c4\1\u01f4\3\u01c4\4\u0153\2\0\1\u0182\1\u0153\1\u0154"+
    "\5\u0153\1\u01f5\1\u0153\2\u01c2\35\u0153\2\0\1\u01c1\1\u0153"+
    "\1\u0154\7\u0153\2\u01c2\3\u0153\1\u01c4\1\u0153\24\u01c4\4\u0153"+
    "\2\0\1\u0182\1\u0153\1\u0154\1\u0153\1\u01f6\5\u0153\2\u01c4"+
    "\3\u0153\26\u01c4\4\u0153\2\0\2\u0153\1\u0154\2\u0153\1\u0155"+
    "\1\u0156\1\u0153\1\u01f7\1\u0153\2\u01c5\35\u0153\2\0\2\u0153"+
    "\1\u0154\2\u0153\1\u0155\1\u0156\3\u0153\2\u01c6\3\u0153\26\u01c6"+
    "\3\u0153\1\166\2\0\1\u01c7\1\166\1\232\2\166\1\u018b"+
    "\1\u018c\3\166\2\u018d\3\166\1\u018e\1\166\24\u018e\4\166"+
    "\2\0\2\166\1\232\7\166\2\u01f8\34\166\41\0\1\u01f9"+
    "\56\0\1\u01fa\51\0\1\u01fb\6\0\1\352\2\0\1\u01fc"+
    "\1\352\1\u0120\45\352\1\u015f\2\0\1\u01fd\1\u015f\1\u0192"+
    "\46\u015f\2\0\1\u01fe\1\u015f\1\u0192\45\u015f\10\0\1\u0160"+
    "\1\u0161\3\0\2\u01cf\34\0\1\u0126\2\0\1\u01d0\1\u0126"+
    "\1\u0164\2\u0126\1\u0195\1\u0196\3\u0126\2\u01ff\3\u0126\1\u0200"+
    "\1\u0126\24\u0200\3\u0126\1\u012f\2\0\1\u01d1\1\u012f\1\u0168"+
    "\21\u012f\1\u0201\24\u012f\2\0\1\u01d2\1\u012f\1\u0168\2\u012f"+
    "\1\u0199\1\u019a\3\u012f\2\u0202\3\u012f\1\u0203\1\u012f\24\u0203"+
    "\3\u012f\1\u01d3\2\0\2\u01d3\1\u01d6\46\u01d3\2\0\1\u01d4"+
    "\1\u01d5\1\u01d6\1\u01d7\11\u01d3\1\u01d8\1\u01d5\5\u01d3\1\u0204"+
    "\21\u01d3\1\u01d9\2\u01d3\2\0\1\u0205\1\u01d3\1\u01d6\7\u01d3"+
    "\2\u0206\1\u01d3\1\u0207\1\u01d3\1\u0208\1\u01d3\24\u0208\4\u01d3"+
    "\2\0\1\u01d4\1\u01d5\1\u01d6\1\u01d7\1\u01d3\1\u0209\1\u020a"+
    "\6\u01d3\1\u01d8\1\u01d5\27\u01d3\1\u01d9\2\u01d3\2\0\2\u01d3"+
    "\1\u01d6\1\u0207\45\u01d3\2\0\2\u01d3\1\u01d6\12\u01d3\1\u0207"+
    "\33\u01d3\2\0\2\u01d3\1\u01d6\43\u01d3\1\u0207\1\u01d3\1\241"+
    "\2\0\1\u01da\1\241\1\u019f\2\241\1\u01a0\1\u01a1\3\241"+
    "\2\u01a2\3\241\1\u01a3\1\241\24\u01a3\4\241\2\0\2\241"+
    "\1\306\7\241\2\u020b\34\241\1\376\2\0\2\376\1\u013a"+
    "\33\376\1\u020c\12\376\2\0\1\u01dd\1\376\1\u01de\7\376"+
    "\2\u01df\3\376\1\u01e1\1\376\3\u01e1\1\u020d\20\u01e1\3\376"+
    "\1\u020e\2\0\2\u020e\1\u020f\2\u020e\1\u0210\1\u0211\41\u020e"+
    "\1\376\2\0\1\u0212\1\376\1\u013a\5\376\1\u0213\1\376"+
    "\2\u01df\35\376\2\0\1\u01dd\1\376\1\u01de\7\376\2\u01df"+
    "\3\376\1\u01e1\1\376\24\u01e1\4\376\2\0\1\u0212\1\376"+
    "\1\u013a\1\376\1\u0214\5\376\2\u01e1\3\376\26\u01e1\4\376"+
    "\2\0\2\376\1\u013a\2\376\1\u0170\1\u0171\1\376\1\u0215"+
    "\1\376\2\u01e2\35\376\2\0\2\376\1\u013a\2\376\1\u0170"+
    "\1\u0171\3\376\2\u01e3\3\376\26\u01e3\3\376\41\0\1\u0216"+
    "\52\0\1\u0217\50\0\1\u0218\55\0\1\u0219\44\0\1\u021a"+
    "\16\0\1\u01b1\2\0\1\u021b\1\u01b1\1\u01e9\3\u01b1\1\u021c"+
    "\41\u01b1\3\0\1\u01ea\21\0\1\321\12\0\1\322\2\0"+
    "\1\323\12\0\1\u01eb\6\0\1\u0105\55\0\2\u021d\37\0"+
    "\1\u021e\1\0\1\u021f\2\0\1\u0220\1\u0221\3\0\2\u0222"+
    "\3\0\1\u0223\1\0\24\u0223\3\0\1\u010e\2\0\1\u017c"+
    "\1\u010e\1\u0111\1\u010e\1\u017e\5\u010e\2\u014d\3\u010e\16\u014d"+
    "\1\u0224\7\u014d\4\u010e\2\0\2\u010e\1\u0111\7\u010e\2\u0225"+
    "\34\u010e\1\u0153\2\0\2\u0153\1\u0154\22\u0153\1\u0226\23\u0153"+
    "\2\0\1\u0182\1\u0153\1\u0154\1\u0153\1\u01f6\5\u0153\2\u01c4"+
    "\3\u0153\11\u01c4\1\u0227\14\u01c4\4\u0153\2\0\2\u0153\1\u0154"+
    "\7\u0153\2\u0228\35\u0153\2\0\1\u0229\1\u0153\1\u0154\2\u0153"+
    "\1\u022a\1\u022b\3\u0153\2\u022c\3\u0153\1\u022d\1\u0153\24\u022d"+
    "\4\u0153\2\0\2\u0153\1\u0154\7\u0153\2\u022e\34\u0153\1\166"+
    "\2\0\2\166\1\232\2\166\1\u018b\1\u018c\3\166\2\u01f8"+
    "\34\166\41\0\1\u022f\50\0\1\u0230\55\0\1\u0231\10\0"+
    "\1\352\2\0\1\u01fc\1\352\1\u0120\17\352\1\u0232\12\352"+
    "\1\u0233\2\352\1\u0234\7\352\1\u015f\2\0\1\u01fd\1\u015f"+
    "\1\u0192\4\u015f\1\u0235\41\u015f\2\0\1\u01fe\1\u015f\1\u0192"+
    "\2\u015f\1\u01cd\1\u01ce\3\u015f\2\u0236\3\u015f\1\u0237\1\u015f"+
    "\24\u0237\3\u015f\1\u0126\2\0\2\u0126\1\u0164\2\u0126\1\u0195"+
    "\1\u0196\1\u0126\1\u0238\1\u0126\2\u01ff\35\u0126\2\0\2\u0126"+
    "\1\u0164\2\u0126\1\u0195\1\u0196\3\u0126\2\u0200\3\u0126\26\u0200"+
    "\3\u0126\1\u012f\2\0\2\u012f\1\u0168\33\u012f\1\u0239\12\u012f"+
    "\2\0\2\u012f\1\u0168\2\u012f\1\u0199\1\u019a\1\u012f\1\u023a"+
    "\1\u012f\2\u0202\35\u012f\2\0\2\u012f\1\u0168\2\u012f\1\u0199"+
    "\1\u019a\3\u012f\2\u0203\3\u012f\26\u0203\3\u012f\1\u01d3\2\0"+
    "\2\u01d3\1\u01d6\33\u01d3\1\u023b\12\u01d3\2\0\1\u0205\1\u01d3"+
    "\1\u01d6\7\u01d3\2\u0206\3\u01d3\1\u0208\1\u01d3\3\u0208\1\u023c"+
    "\20\u0208\4\u01d3\2\0\1\u023d\1\u01d3\1\u01d6\5\u01d3\1\u023e"+
    "\1\u01d3\2\u0206\35\u01d3\2\0\1\u0205\1\u01d3\1\u01d6\7\u01d3"+
    "\2\u0206\3\u01d3\1\u0208\1\u01d3\24\u0208\4\u01d3\2\0\1\u023d"+
    "\1\u01d3\1\u01d6\1\u01d3\1\u023f\5\u01d3\2\u0208\3\u01d3\26\u0208"+
    "\4\u01d3\2\0\1\u023d\1\u01d3\1\u01d6\46\u01d3\2\0\1\u0240"+
    "\1\u01d3\1\u01d6\45\u01d3\1\241\2\0\2\241\1\306\2\241"+
    "\1\u01a0\1\u01a1\3\241\2\u020b\34\241\1\376\2\0\1\u0212"+
    "\1\376\1\u013a\1\376\1\u0214\5\376\2\u01e1\3\376\17\u01e1"+
    "\1\u0241\6\u01e1\3\376\1\u020e\2\0\2\u020e\1\u020f\46\u020e"+
    "\2\0\1\u0242\1\u020e\1\u020f\2\u020e\1\u0210\1\u0211\42\u020e"+
    "\2\0\1\u0243\1\u0244\1\u020f\1\u0245\11\u020e\1\u0246\1\u0244"+
    "\27\u020e\1\u0247\2\u020e\2\0\1\u0248\1\u020e\1\u020f\45\u020e"+
    "\1\376\2\0\1\u0212\1\376\1\u013a\21\376\1\u01dc\24\376"+
    "\2\0\2\376\1\u013a\7\376\2\u0249\35\376\2\0\1\u024a"+
    "\1\376\1\u013a\2\376\1\u024b\1\u024c\3\376\2\u024d\3\376"+
    "\1\u024e\1\376\24\u024e\4\376\2\0\2\376\1\u013a\7\376"+
    "\2\u024f\34\376\3\0\1\u0250\105\0\1\u0218\50\0\1\u0251"+
    "\45\0\1\u0218\23\0\1\u01b1\2\0\1\u021b\1\u01b1\1\u01e9"+
    "\4\u01b1\1\u0252\41\u01b1\2\0\1\u0253\1\u01b1\1\u01e9\45\u01b1"+
    "\3\0\1\u01eb\5\0\1\u01b2\3\0\2\u021d\37\0\1\u021e"+
    "\4\0\1\u0220\42\0\1\u021f\2\0\2\u021f\1\u0254\45\u021f"+
    "\3\0\1\u01eb\5\0\1\u01b2\44\0\1\u0255\57\0\1\u0220"+
    "\1\u0221\1\0\1\u0256\1\0\2\u0222\44\0\1\u0220\1\u0221"+
    "\3\0\2\u0223\3\0\26\u0223\3\0\1\u010e\2\0\2\u010e"+
    "\1\u0111\2\u010e\1\u014e\1\u014f\3\u010e\2\u0225\34\u010e\1\u0153"+
    "\2\0\2\u0153\1\u0154\32\u0153\1\u0257\13\u0153\2\0\1\u0182"+
    "\1\u0153\1\u0154\1\u0153\1\u01f6\5\u0153\2\u01c4\3\u0153\6\u01c4"+
    "\1\u0258\17\u01c4\4\u0153\2\0\1\u0182\1\u0153\1\u0154\7\u0153"+
    "\2\u0228\35\u0153\2\0\1\u0229\1\u0153\1\u0154\2\u0153\1\u022a"+
    "\43\u0153\2\0\1\u0182\1\u0153\1\u0154\46\u0153\2\0\1\u0259"+
    "\1\u0153\1\u0154\46\u0153\2\0\2\u0153\1\u0154\2\u0153\1\u022a"+
    "\1\u022b\1\u0153\1\u025a\1\u0153\2\u022c\35\u0153\2\0\2\u0153"+
    "\1\u0154\2\u0153\1\u022a\1\u022b\3\u0153\2\u022d\3\u0153\26\u022d"+
    "\4\u0153\2\0\2\u0153\1\u0154\2\u0153\1\u0155\1\u0156\3\u0153"+
    "\2\u022e\34\u0153\36\0\1\u0230\50\0\1\u025b\16\0\1\352"+
    "\2\0\2\352\1\u0120\33\352\1\u025c\12\352\2\0\2\352"+
    "\1\u0120\37\352\1\u025d\6\352\2\0\2\352\1\u0120\36\352"+
    "\1\u025e\6\352\1\u015f\2\0\2\u015f\1\u0192\13\u015f\1\u025f"+
    "\32\u015f\2\0\2\u015f\1\u0192\2\u015f\1\u01cd\1\u01ce\1\u015f"+
    "\1\u0260\1\u015f\2\u0236\35\u015f\2\0\2\u015f\1\u0192\2\u015f"+
    "\1\u01cd\1\u01ce\3\u015f\2\u0237\3\u015f\26\u0237\3\u015f\1\u0126"+
    "\2\0\2\u0126\1\u0164\7\u0126\2\u0261\34\u0126\1\u012f\2\0"+
    "\2\u012f\1\u0168\7\u012f\2\u0262\34\u012f\1\u01d3\2\0\1\u023d"+
    "\1\u01d3\1\u01d6\1\u01d3\1\u023f\5\u01d3\2\u0208\3\u01d3\17\u0208"+
    "\1\u0263\6\u0208\4\u01d3\2\0\1\u023d\1\u01d3\1\u01d6\21\u01d3"+
    "\1\u0204\24\u01d3\2\0\2\u01d3\1\u01d6\7\u01d3\2\u0264\35\u01d3"+
    "\2\0\1\u0265\1\u01d3\1\u01d6\2\u01d3\1\u0209\1\u020a\3\u01d3"+
    "\2\u0266\3\u01d3\1\u0267\1\u01d3\24\u0267\4\u01d3\2\0\1\u0240"+
    "\1\u01d3\1\u01d6\2\u01d3\1\u0209\1\u020a\3\u01d3\2\u0266\3\u01d3"+
    "\1\u0267\1\u01d3\24\u0267\3\u01d3\1\u020e\2\0\1\u0242\1\u020e"+
    "\1\u020f\21\u020e\1\u0268\24\u020e\2\0\1\u0243\1\u0244\1\u020f"+
    "\1\u0245\11\u020e\1\u0246\1\u0244\5\u020e\1\u0268\21\u020e\1\u0247"+
    "\2\u020e\2\0\1\u0269\1\u020e\1\u020f\7\u020e\2\u026a\1\u020e"+
    "\1\u026b\1\u020e\1\u026c\1\u020e\24\u026c\4\u020e\2\0\2\u020e"+
    "\1\u020f\1\u026b\45\u020e\2\0\2\u020e\1\u020f\12\u020e\1\u026b"+
    "\33\u020e\2\0\2\u020e\1\u020f\43\u020e\1\u026b\2\u020e\2\0"+
    "\1\u0248\1\u020e\1\u020f\2\u020e\1\u0210\1\u0211\3\u020e\2\u026d"+
    "\3\u020e\1\u026e\1\u020e\24\u026e\3\u020e\1\376\2\0\1\u0212"+
    "\1\376\1\u013a\7\376\2\u0249\35\376\2\0\1\u024a\1\376"+
    "\1\u013a\2\376\1\u024b\43\376\2\0\1\u0212\1\376\1\u013a"+
    "\46\376\2\0\1\u026f\1\376\1\u013a\46\376\2\0\2\376"+
    "\1\u013a\2\376\1\u024b\1\u024c\1\376\1\u0270\1\376\2\u024d"+
    "\35\376\2\0\2\376\1\u013a\2\376\1\u024b\1\u024c\3\376"+
    "\2\u024e\3\376\26\u024e\4\376\2\0\2\376\1\u013a\2\376"+
    "\1\u0170\1\u0171\3\376\2\u024f\34\376\3\0\1\u0250\12\0"+
    "\1\u0271\74\0\1\u0272\12\0\1\u01b1\2\0\2\u01b1\1\u01e9"+
    "\13\u01b1\1\u0273\32\u01b1\2\0\1\u0253\1\u01b1\1\u01e9\17\u01b1"+
    "\1\u0274\12\u01b1\1\u0275\2\u01b1\1\u0276\7\u01b1\1\u021f\2\0"+
    "\2\u021f\1\u0254\2\u021f\1\u0277\1\u0278\41\u021f\3\0\1\u0255"+
    "\1\0\1\u021f\2\0\1\u0220\1\u0221\3\0\2\u0222\3\0"+
    "\1\u0223\1\0\24\u0223\20\0\2\u0279\34\0\1\u0153\2\0"+
    "\1\u0182\1\u0153\1\u0154\1\u0153\1\u01f6\5\u0153\2\u01c4\3\u0153"+
    "\16\u01c4\1\u027a\7\u01c4\4\u0153\2\0\1\u0259\1\u0153\1\u0154"+
    "\2\u0153\1\u022a\1\u022b\3\u0153\2\u022c\3\u0153\1\u022d\1\u0153"+
    "\24\u022d\4\u0153\2\0\2\u0153\1\u0154\7\u0153\2\u027b\34\u0153"+
    "\40\0\1\u027c\12\0\1\352\2\0\2\352\1\u0120\33\352"+
    "\1\u027d\12\352\2\0\2\352\1\u0120\31\352\1\u027e\14\352"+
    "\2\0\2\352\1\u0120\34\352\1\u027f\10\352\1\u015f\2\0"+
    "\1\u0280\1\u015f\1\u0192\46\u015f\2\0\2\u015f\1\u0192\7\u015f"+
    "\2\u0281\34\u015f\1\u0126\2\0\2\u0126\1\u0164\2\u0126\1\u0195"+
    "\1\u0196\3\u0126\2\u0261\34\u0126\1\u012f\2\0\2\u012f\1\u0168"+
    "\2\u012f\1\u0199\1\u019a\3\u012f\2\u0262\34\u012f\1\u01d3\2\0"+
    "\1\u023d\1\u01d3\1\u01d6\7\u01d3\2\u0264\35\u01d3\2\0\1\u0265"+
    "\1\u01d3\1\u01d6\2\u01d3\1\u0209\43\u01d3\2\0\2\u01d3\1\u01d6"+
    "\2\u01d3\1\u0209\1\u020a\1\u01d3\1\u0282\1\u01d3\2\u0266\35\u01d3"+
    "\2\0\2\u01d3\1\u01d6\2\u01d3\1\u0209\1\u020a\3\u01d3\2\u0267"+
    "\3\u01d3\26\u0267\3\u01d3\1\u020e\2\0\2\u020e\1\u020f\33\u020e"+
    "\1\u0283\12\u020e\2\0\1\u0269\1\u020e\1\u020f\7\u020e\2\u026a"+
    "\3\u020e\1\u026c\1\u020e\3\u026c\1\u0284\20\u026c\4\u020e\2\0"+
    "\1\u0242\1\u020e\1\u020f\5\u020e\1\u0285\1\u020e\2\u026a\35\u020e"+
    "\2\0\1\u0269\1\u020e\1\u020f\7\u020e\2\u026a\3\u020e\1\u026c"+
    "\1\u020e\24\u026c\4\u020e\2\0\1\u0242\1\u020e\1\u020f\1\u020e"+
    "\1\u0286\5\u020e\2\u026c\3\u020e\26\u026c\4\u020e\2\0\2\u020e"+
    "\1\u020f\2\u020e\1\u0210\1\u0211\1\u020e\1\u0287\1\u020e\2\u026d"+
    "\35\u020e\2\0\2\u020e\1\u020f\2\u020e\1\u0210\1\u0211\3\u020e"+
    "\2\u026e\3\u020e\26\u026e\3\u020e\1\376\2\0\1\u026f\1\376"+
    "\1\u013a\2\376\1\u024b\1\u024c\3\376\2\u024d\3\376\1\u024e"+
    "\1\376\24\u024e\4\376\2\0\2\376\1\u013a\7\376\2\u0288"+
    "\34\376\3\0\1\u0289\11\0\2\u0271\66\0\1\u0218\20\0"+
    "\1\u01b1\2\0\1\u028a\1\u01b1\1\u01e9\46\u01b1\2\0\2\u01b1"+
    "\1\u01e9\33\u01b1\1\u028b\12\u01b1\2\0\2\u01b1\1\u01e9\37\u01b1"+
    "\1\u028c\6\u01b1\2\0\2\u01b1\1\u01e9\36\u01b1\1\u028d\6\u01b1"+
    "\1\u021f\2\0\1\u028e\1\u021f\1\u0254\3\u021f\1\u028f\42\u021f"+
    "\2\0\1\u0290\1\u021f\1\u0254\45\u021f\10\0\1\u0220\1\u0221"+
    "\3\0\2\u0279\34\0\1\u0153\2\0\2\u0153\1\u0154\2\u0153"+
    "\1\u022a\1\u022b\3\u0153\2\u027b\34\u0153\32\0\1\u0230\20\0"+
    "\1\352\2\0\2\352\1\u0120\30\352\1\u027e\15\352\2\0"+
    "\2\352\1\u0120\26\352\1\u0291\16\352\1\u015f\2\0\1\u0280"+
    "\1\u015f\1\u0192\17\u015f\1\u0292\12\u015f\1\u0293\2\u015f\1\u0294"+
    "\10\u015f\2\0\2\u015f\1\u0192\2\u015f\1\u01cd\1\u01ce\3\u015f"+
    "\2\u0281\34\u015f\1\u01d3\2\0\2\u01d3\1\u01d6\7\u01d3\2\u0295"+
    "\34\u01d3\1\u020e\2\0\1\u0242\1\u020e\1\u020f\1\u020e\1\u0286"+
    "\5\u020e\2\u026c\3\u020e\17\u026c\1\u0296\6\u026c\4\u020e\2\0"+
    "\2\u020e\1\u020f\7\u020e\2\u0297\35\u020e\2\0\1\u0298\1\u020e"+
    "\1\u020f\2\u020e\1\u0299\1\u029a\3\u020e\2\u029b\3\u020e\1\u029c"+
    "\1\u020e\24\u029c\4\u020e\2\0\2\u020e\1\u020f\7\u020e\2\u029d"+
    "\34\u020e\1\376\2\0\2\376\1\u013a\2\376\1\u024b\1\u024c"+
    "\3\376\2\u0288\34\376\3\0\1\u0289\23\0\1\u029e\23\0"+
    "\1\u01b1\2\0\1\u028a\1\u01b1\1\u01e9\17\u01b1\1\u029f\12\u01b1"+
    "\1\u02a0\2\u01b1\1\u02a1\2\u01b1\1\u02a2\5\u01b1\2\0\2\u01b1"+
    "\1\u01e9\33\u01b1\1\u02a3\12\u01b1\2\0\2\u01b1\1\u01e9\31\u01b1"+
    "\1\u02a4\14\u01b1\2\0\2\u01b1\1\u01e9\34\u01b1\1\u02a5\10\u01b1"+
    "\1\u021f\2\0\1\u028e\1\u021f\1\u0254\4\u021f\1\u02a6\41\u021f"+
    "\2\0\1\u02a7\1\u021f\1\u0254\46\u021f\2\0\1\u0290\1\u021f"+
    "\1\u0254\2\u021f\1\u0277\1\u0278\3\u021f\2\u02a8\3\u021f\1\u02a9"+
    "\1\u021f\24\u02a9\3\u021f\1\352\2\0\2\352\1\u0120\32\352"+
    "\1\u02aa\12\352\1\u015f\2\0\2\u015f\1\u0192\33\u015f\1\u02ab"+
    "\12\u015f\2\0\2\u015f\1\u0192\37\u015f\1\u02ac\6\u015f\2\0"+
    "\2\u015f\1\u0192\36\u015f\1\u02ad\6\u015f\1\u01d3\2\0\2\u01d3"+
    "\1\u01d6\2\u01d3\1\u0209\1\u020a\3\u01d3\2\u0295\34\u01d3\1\u020e"+
    "\2\0\1\u0242\1\u020e\1\u020f\7\u020e\2\u0297\35\u020e\2\0"+
    "\1\u0298\1\u020e\1\u020f\2\u020e\1\u0299\43\u020e\2\0\1\u0242"+
    "\1\u020e\1\u020f\46\u020e\2\0\1\u02ae\1\u020e\1\u020f\46\u020e"+
    "\2\0\2\u020e\1\u020f\2\u020e\1\u0299\1\u029a\1\u020e\1\u02af"+
    "\1\u020e\2\u029b\35\u020e\2\0\2\u020e\1\u020f\2\u020e\1\u0299"+
    "\1\u029a\3\u020e\2\u029c\3\u020e\26\u029c\4\u020e\2\0\2\u020e"+
    "\1\u020f\2\u020e\1\u0210\1\u0211\3\u020e\2\u029d\34\u020e\41\0"+
    "\1\u02b0\11\0\1\u01b1\2\0\2\u01b1\1\u01e9\33\u01b1\1\u02b1"+
    "\12\u01b1\2\0\2\u01b1\1\u01e9\37\u01b1\1\u02b2\6\u01b1\2\0"+
    "\2\u01b1\1\u01e9\36\u01b1\1\u02b3\7\u01b1\2\0\2\u01b1\1\u01e9"+
    "\33\u01b1\1\u02b4\12\u01b1\2\0\2\u01b1\1\u01e9\30\u01b1\1\u02a4"+
    "\15\u01b1\2\0\1\u02b5\1\u01b1\1\u01e9\46\u01b1\2\0\2\u01b1"+
    "\1\u01e9\26\u01b1\1\u02b6\16\u01b1\1\u021f\2\0\2\u021f\1\u0254"+
    "\13\u021f\1\u02b7\32\u021f\2\0\1\u02a7\1\u021f\1\u0254\17\u021f"+
    "\1\u02b8\12\u021f\1\u02b9\2\u021f\1\u02ba\10\u021f\2\0\2\u021f"+
    "\1\u0254\2\u021f\1\u0277\1\u0278\1\u021f\1\u02bb\1\u021f\2\u02a8"+
    "\35\u021f\2\0\2\u021f\1\u0254\2\u021f\1\u0277\1\u0278\3\u021f"+
    "\2\u02a9\3\u021f\26\u02a9\3\u021f\1\352\2\0\2\352\1\u0120"+
    "\24\352\1\u027e\20\352\1\u015f\2\0\2\u015f\1\u0192\33\u015f"+
    "\1\u02bc\12\u015f\2\0\2\u015f\1\u0192\31\u015f\1\u02bd\14\u015f"+
    "\2\0\2\u015f\1\u0192\34\u015f\1\u02be\10\u015f\1\u020e\2\0"+
    "\1\u02ae\1\u020e\1\u020f\2\u020e\1\u0299\1\u029a\3\u020e\2\u029b"+
    "\3\u020e\1\u029c\1\u020e\24\u029c\4\u020e\2\0\2\u020e\1\u020f"+
    "\7\u020e\2\u02bf\34\u020e\1\u01b1\2\0\2\u01b1\1\u01e9\33\u01b1"+
    "\1\u02c0\12\u01b1\2\0\2\u01b1\1\u01e9\31\u01b1\1\u02c1\14\u01b1"+
    "\2\0\2\u01b1\1\u01e9\34\u01b1\1\u02c2\11\u01b1\2\0\2\u01b1"+
    "\1\u01e9\26\u01b1\1\u02c3\17\u01b1\2\0\1\u02c4\1\u01b1\1\u01e9"+
    "\3\u01b1\1\u021c\3\u01b1\2\u02c5\3\u01b1\1\u02c6\1\u01b1\24\u02c6"+
    "\4\u01b1\2\0\2\u01b1\1\u01e9\32\u01b1\1\u02c7\12\u01b1\1\u021f"+
    "\2\0\1\u02c8\1\u021f\1\u0254\46\u021f\2\0\2\u021f\1\u0254"+
    "\33\u021f\1\u02c9\12\u021f\2\0\2\u021f\1\u0254\37\u021f\1\u02ca"+
    "\6\u021f\2\0\2\u021f\1\u0254\36\u021f\1\u02cb\7\u021f\2\0"+
    "\2\u021f\1\u0254\7\u021f\2\u02cc\34\u021f\1\u015f\2\0\2\u015f"+
    "\1\u0192\30\u015f\1\u02bd\15\u015f\2\0\2\u015f\1\u0192\26\u015f"+
    "\1\u02cd\16\u015f\1\u020e\2\0\2\u020e\1\u020f\2\u020e\1\u0299"+
    "\1\u029a\3\u020e\2\u02bf\34\u020e\1\u01b1\2\0\2\u01b1\1\u01e9"+
    "\30\u01b1\1\u02c1\15\u01b1\2\0\2\u01b1\1\u01e9\26\u01b1\1\u02ce"+
    "\17\u01b1\2\0\2\u01b1\1\u01e9\21\u01b1\1\u02c1\24\u01b1\2\0"+
    "\1\u02c4\1\u01b1\1\u01e9\3\u01b1\1\u021c\1\u0252\2\u01b1\2\u02c5"+
    "\3\u01b1\1\u02c6\1\u01b1\24\u02c6\4\u01b1\2\0\1\u021b\1\u01b1"+
    "\1\u01e9\3\u01b1\1\u021c\1\u01b1\1\u02cf\1\u01b1\2\u02c5\35\u01b1"+
    "\2\0\1\u021b\1\u01b1\1\u01e9\1\u01b1\1\u02d0\1\u01b1\1\u021c"+
    "\3\u01b1\2\u02c6\3\u01b1\26\u02c6\4\u01b1\2\0\2\u01b1\1\u01e9"+
    "\24\u01b1\1\u02a4\20\u01b1\1\u021f\2\0\1\u02c8\1\u021f\1\u0254"+
    "\17\u021f\1\u02d1\12\u021f\1\u02d2\2\u021f\1\u02d3\2\u021f\1\u02d4"+
    "\5\u021f\2\0\2\u021f\1\u0254\33\u021f\1\u02d5\12\u021f\2\0"+
    "\2\u021f\1\u0254\31\u021f\1\u02d6\14\u021f\2\0\2\u021f\1\u0254"+
    "\34\u021f\1\u02d7\11\u021f\2\0\2\u021f\1\u0254\2\u021f\1\u0277"+
    "\1\u0278\3\u021f\2\u02cc\34\u021f\1\u015f\2\0\2\u015f\1\u0192"+
    "\32\u015f\1\u02d8\12\u015f\1\u01b1\2\0\2\u01b1\1\u01e9\32\u01b1"+
    "\1\u02d9\13\u01b1\2\0\2\u01b1\1\u01e9\7\u01b1\2\u02da\35\u01b1"+
    "\2\0\1\u02db\1\u01b1\1\u02dc\2\u01b1\1\u01e9\1\u02dd\3\u01b1"+
    "\2\u02de\3\u01b1\1\u02df\1\u01b1\24\u02df\3\u01b1\1\u021f\2\0"+
    "\2\u021f\1\u0254\33\u021f\1\u02e0\12\u021f\2\0\2\u021f\1\u0254"+
    "\37\u021f\1\u02e1\6\u021f\2\0\2\u021f\1\u0254\36\u021f\1\u02e2"+
    "\7\u021f\2\0\2\u021f\1\u0254\33\u021f\1\u02e3\12\u021f\2\0"+
    "\2\u021f\1\u0254\30\u021f\1\u02d6\15\u021f\2\0\1\u02e4\1\u021f"+
    "\1\u0254\46\u021f\2\0\2\u021f\1\u0254\26\u021f\1\u02e5\16\u021f"+
    "\1\u015f\2\0\2\u015f\1\u0192\24\u015f\1\u02bd\20\u015f\1\u01b1"+
    "\2\0\2\u01b1\1\u01e9\24\u01b1\1\u02c1\21\u01b1\2\0\1\u021b"+
    "\1\u01b1\1\u01e9\3\u01b1\1\u021c\3\u01b1\2\u02da\35\u01b1\2\0"+
    "\1\u02db\1\u01b1\1\u01e9\2\u01b1\1\u01e9\42\u01b1\1\u02e6\2\0"+
    "\1\u02e7\1\u02e6\1\u02e8\3\u02e6\1\u02e9\41\u02e6\1\u01b1\2\0"+
    "\1\u02ea\1\u01b1\1\u01e9\46\u01b1\2\0\2\u01b1\1\u01e9\2\u01b1"+
    "\1\u01e9\1\u02dd\1\u01b1\1\u02eb\1\u01b1\2\u02de\35\u01b1\2\0"+
    "\2\u01b1\1\u01e9\2\u01b1\1\u01e9\1\u02dd\3\u01b1\2\u02df\3\u01b1"+
    "\26\u02df\3\u01b1\1\u021f\2\0\2\u021f\1\u0254\33\u021f\1\u02ec"+
    "\12\u021f\2\0\2\u021f\1\u0254\31\u021f\1\u02ed\14\u021f\2\0"+
    "\2\u021f\1\u0254\34\u021f\1\u02ee\11\u021f\2\0\2\u021f\1\u0254"+
    "\26\u021f\1\u02ef\17\u021f\2\0\1\u02f0\1\u021f\1\u02f1\3\u021f"+
    "\1\u028f\3\u021f\2\u02f2\3\u021f\1\u02f3\1\u021f\24\u02f3\4\u021f"+
    "\2\0\2\u021f\1\u0254\32\u021f\1\u02f4\12\u021f\1\u02e6\2\0"+
    "\2\u02e6\1\u02e8\46\u02e6\2\0\1\u02e7\1\u02e6\1\u02e8\4\u02e6"+
    "\1\u02f5\41\u02e6\2\0\1\u02e7\1\u02e6\1\u02e8\2\u02e6\1\u02dc"+
    "\1\u02f6\42\u02e6\2\0\1\u02f7\1\u02e6\1\u02e8\45\u02e6\1\u01b1"+
    "\2\0\1\u02ea\1\u01b1\1\u02dc\2\u01b1\1\u01e9\1\u02dd\3\u01b1"+
    "\2\u02de\3\u01b1\1\u02df\1\u01b1\24\u02df\4\u01b1\2\0\2\u01b1"+
    "\1\u01e9\7\u01b1\2\u02f8\34\u01b1\1\u021f\2\0\2\u021f\1\u0254"+
    "\30\u021f\1\u02ed\15\u021f\2\0\2\u021f\1\u0254\26\u021f\1\u02f9"+
    "\17\u021f\2\0\2\u021f\1\u0254\21\u021f\1\u02ed\24\u021f\2\0"+
    "\1\u02f0\1\u021f\1\u02f1\3\u021f\1\u028f\1\u02a6\2\u021f\2\u02f2"+
    "\3\u021f\1\u02f3\1\u021f\24\u02f3\3\u021f\1\u02e6\2\0\2\u02e6"+
    "\1\u02e8\2\u02e6\1\u02dc\1\u02fa\41\u02e6\1\u021f\2\0\1\u028e"+
    "\1\u021f\1\u0254\3\u021f\1\u028f\1\u021f\1\u02fb\1\u021f\2\u02f2"+
    "\35\u021f\2\0\1\u028e\1\u021f\1\u0254\1\u021f\1\u02fc\1\u021f"+
    "\1\u028f\3\u021f\2\u02f3\3\u021f\26\u02f3\4\u021f\2\0\2\u021f"+
    "\1\u0254\24\u021f\1\u02d6\20\u021f\1\u02e6\2\0\2\u02e6\1\u02e8"+
    "\13\u02e6\1\u02fd\32\u02e6\2\0\1\u02fe\1\u02e6\1\u02e8\46\u02e6"+
    "\2\0\1\u02f7\1\u02e6\1\u02e8\17\u02e6\1\u02ff\12\u02e6\1\u0300"+
    "\2\u02e6\1\u0301\7\u02e6\1\u01b1\2\0\2\u01b1\1\u01e9\2\u01b1"+
    "\1\u01e9\1\u02dd\3\u01b1\2\u02f8\34\u01b1\1\u021f\2\0\2\u021f"+
    "\1\u0254\32\u021f\1\u0302\12\u021f\1\u02e6\2\0\1\u0303\1\u02e6"+
    "\1\u02e8\45\u02e6\1\u021f\2\0\2\u021f\1\u0254\7\u021f\2\u0304"+
    "\35\u021f\2\0\1\u0305\1\u021f\1\u0254\2\u021f\1\u0277\1\u0278"+
    "\3\u021f\2\u02a8\3\u021f\1\u02a9\1\u021f\24\u02a9\3\u021f\1\u02e6"+
    "\2\0\1\u0306\1\u02e6\1\u02e8\46\u02e6\2\0\1\u02fe\1\u02e6"+
    "\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0307\3\u02e6\1\u0308"+
    "\1\u02e6\1\u0308\1\u0309\12\u0308\1\u030a\2\u0308\1\u030b\4\u0308"+
    "\4\u02e6\2\0\2\u02e6\1\u02e8\33\u02e6\1\u030c\12\u02e6\2\0"+
    "\2\u02e6\1\u02e8\37\u02e6\1\u030d\6\u02e6\2\0\2\u02e6\1\u02e8"+
    "\36\u02e6\1\u030e\6\u02e6\1\u021f\2\0\2\u021f\1\u0254\24\u021f"+
    "\1\u02ed\20\u021f\1\u02e6\2\0\1\u0303\1\u02e6\1\u02e8\2\u02e6"+
    "\1\u02dc\1\u02fa\3\u02e6\2\u0307\3\u02e6\1\u0308\1\u02e6\24\u0308"+
    "\3\u02e6\1\u021f\2\0\1\u028e\1\u021f\1\u0254\3\u021f\1\u028f"+
    "\3\u021f\2\u0304\35\u021f\2\0\1\u0305\1\u021f\1\u0254\2\u021f"+
    "\1\u0277\42\u021f\1\u02e6\2\0\1\u0306\1\u02e6\1\u02e8\17\u02e6"+
    "\1\u030f\12\u02e6\1\u0310\2\u02e6\1\u0311\2\u02e6\1\u0312\5\u02e6"+
    "\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\1\u02e6\1\u0313"+
    "\1\u02e6\2\u0307\35\u02e6\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc"+
    "\1\u02fa\3\u02e6\2\u0308\3\u02e6\26\u0308\4\u02e6\2\0\2\u02e6"+
    "\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6\17\u0308"+
    "\1\u0314\6\u0308\4\u02e6\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc"+
    "\1\u02fa\3\u02e6\2\u0308\3\u02e6\23\u0308\1\u0315\2\u0308\4\u02e6"+
    "\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308"+
    "\3\u02e6\22\u0308\1\u0316\3\u0308\4\u02e6\2\0\2\u02e6\1\u02e8"+
    "\33\u02e6\1\u0317\12\u02e6\2\0\2\u02e6\1\u02e8\31\u02e6\1\u0318"+
    "\14\u02e6\2\0\2\u02e6\1\u02e8\34\u02e6\1\u0319\11\u02e6\2\0"+
    "\2\u02e6\1\u02e8\33\u02e6\1\u031a\12\u02e6\2\0\2\u02e6\1\u02e8"+
    "\37\u02e6\1\u031b\6\u02e6\2\0\2\u02e6\1\u02e8\36\u02e6\1\u031c"+
    "\7\u02e6\2\0\2\u02e6\1\u02e8\33\u02e6\1\u031d\12\u02e6\2\0"+
    "\2\u02e6\1\u02e8\7\u02e6\2\u031e\35\u02e6\2\0\2\u02e6\1\u02e8"+
    "\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6\17\u0308\1\u031f"+
    "\6\u0308\4\u02e6\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa"+
    "\3\u02e6\2\u0308\3\u02e6\15\u0308\1\u0320\10\u0308\4\u02e6\2\0"+
    "\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6"+
    "\20\u0308\1\u0321\5\u0308\4\u02e6\2\0\2\u02e6\1\u02e8\30\u02e6"+
    "\1\u0318\15\u02e6\2\0\1\u0322\1\u02e6\1\u02e8\46\u02e6\2\0"+
    "\2\u02e6\1\u02e8\26\u02e6\1\u0323\17\u02e6\2\0\2\u02e6\1\u02e8"+
    "\33\u02e6\1\u0324\12\u02e6\2\0\2\u02e6\1\u02e8\31\u02e6\1\u0325"+
    "\14\u02e6\2\0\2\u02e6\1\u02e8\34\u02e6\1\u0326\11\u02e6\2\0"+
    "\2\u02e6\1\u02e8\26\u02e6\1\u0327\17\u02e6\2\0\2\u02e6\1\u02e8"+
    "\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u031e\35\u02e6\2\0\2\u02e6"+
    "\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6\14\u0308"+
    "\1\u0320\11\u0308\4\u02e6\2\0\1\u0322\1\u02e6\1\u02e8\2\u02e6"+
    "\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6\26\u0308\4\u02e6\2\0"+
    "\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308\3\u02e6"+
    "\12\u0308\1\u0328\13\u0308\4\u02e6\2\0\1\u0329\1\u02e6\1\u02e8"+
    "\3\u02e6\1\u02e9\3\u02e6\2\u032a\3\u02e6\1\u032b\1\u02e6\24\u032b"+
    "\4\u02e6\2\0\2\u02e6\1\u02e8\32\u02e6\1\u032c\13\u02e6\2\0"+
    "\2\u02e6\1\u02e8\30\u02e6\1\u0325\15\u02e6\2\0\2\u02e6\1\u02e8"+
    "\26\u02e6\1\u032d\17\u02e6\2\0\2\u02e6\1\u02e8\21\u02e6\1\u0325"+
    "\24\u02e6\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6"+
    "\2\u0308\3\u02e6\16\u0308\1\u032e\7\u0308\4\u02e6\2\0\1\u0329"+
    "\1\u02e6\1\u02e8\3\u02e6\1\u02e9\1\u02f5\2\u02e6\2\u032a\3\u02e6"+
    "\1\u032b\1\u02e6\24\u032b\4\u02e6\2\0\1\u02e7\1\u02e6\1\u02e8"+
    "\3\u02e6\1\u02e9\1\u02e6\1\u032f\1\u02e6\2\u032a\35\u02e6\2\0"+
    "\1\u02e7\1\u02e6\1\u02e8\1\u02e6\1\u0330\1\u02e6\1\u02e9\3\u02e6"+
    "\2\u032b\3\u02e6\26\u032b\4\u02e6\2\0\2\u02e6\1\u02e8\24\u02e6"+
    "\1\u0318\21\u02e6\2\0\2\u02e6\1\u02e8\32\u02e6\1\u0331\13\u02e6"+
    "\2\0\2\u02e6\1\u02e8\2\u02e6\1\u02dc\1\u02fa\3\u02e6\2\u0308"+
    "\3\u02e6\10\u0308\1\u0320\15\u0308\4\u02e6\2\0\2\u02e6\1\u02e8"+
    "\7\u02e6\2\u0332\35\u02e6\2\0\1\u0333\1\u02e6\1\u02e8\2\u02e6"+
    "\1\u02dc\1\u02fa\3\u02e6\2\u0307\3\u02e6\1\u0308\1\u02e6\24\u0308"+
    "\4\u02e6\2\0\2\u02e6\1\u02e8\24\u02e6\1\u0325\21\u02e6\2\0"+
    "\1\u02e7\1\u02e6\1\u02e8\3\u02e6\1\u02e9\3\u02e6\2\u0332\35\u02e6"+
    "\2\0\1\u0333\1\u02e6\1\u02e8\2\u02e6\1\u02dc\42\u02e6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32766];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\2\11\1\1\2\11\6\0\1\1"+
    "\12\0\1\11\3\0\1\11\13\0\1\1\23\0\3\1"+
    "\2\0\1\1\21\0\1\1\32\0\1\1\1\0\1\1"+
    "\2\0\1\11\34\0\1\1\16\0\1\1\20\0\2\1"+
    "\13\0\1\1\10\0\1\1\15\0\1\11\12\0\1\1"+
    "\2\0\1\1\33\0\1\1\27\0\1\1\2\0\1\11"+
    "\3\0\1\1\15\0\1\11\12\0\1\1\3\0\1\1"+
    "\42\0\1\1\51\0\1\1\2\0\1\1\3\0\1\1"+
    "\41\0\1\1\57\0\2\1\2\0\1\1\31\0\1\1"+
    "\13\0\1\11\13\0\1\1\13\0\1\11\10\0\1\1"+
    "\1\0\1\1\5\0\1\1\25\0\1\1\13\0\1\1"+
    "\26\0\1\1\3\0\1\1\4\0\1\1\22\0\1\1"+
    "\31\0\1\11\14\0\1\1\3\0\1\1\53\0\1\1"+
    "\67\0\1\1\16\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[819];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 17: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 18: break;
          case 3:
            { 
            }
            // fall through
          case 19: break;
          case 4:
            { parser.lb(ScopeType.main);
            }
            // fall through
          case 20: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 21: break;
          case 6:
            { parser.lb(ScopeType.loop);
        yybegin(YYINITIAL);
            }
            // fall through
          case 22: break;
          case 7:
            { parser.lb(ScopeType.func);
        yybegin(YYINITIAL);
            }
            // fall through
          case 23: break;
          case 8:
            { parser.func_call(yytext());
            }
            // fall through
          case 24: break;
          case 9:
            { parser.var_assign(parser.split(yytext()));
            }
            // fall through
          case 25: break;
          case 10:
            { parser.scope_ctrl(parser.split(yytext()));
            }
            // fall through
          case 26: break;
          case 11:
            { parser.return_stmt(parser.split(yytext()));
            }
            // fall through
          case 27: break;
          case 12:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 28: break;
          case 13:
            { parser.while_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 29: break;
          case 14:
            { parser.func_def(parser.split(yytext()));
        yybegin(FUNC);
            }
            // fall through
          case 30: break;
          case 15:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 31: break;
          case 16:
            { parser.for_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
