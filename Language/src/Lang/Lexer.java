// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LOOP = 2;
  public static final int FUNC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\5\0\1\7\1\10\1\11\1\12\1\13\11\14"+
    "\1\15\1\0\1\4\1\16\1\17\2\0\32\20\4\0"+
    "\1\21\1\0\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\20\1\33\1\34\1\35\1\36"+
    "\1\37\2\20\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\3\20\1\46\1\47\1\50\7\0\1\2\u01a2\0\2\2"+
    "\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\10\1\1\4\1\5\1\3"+
    "\1\6\1\7\5\0\1\3\10\0\1\3\27\0\1\10"+
    "\37\0\1\11\17\0\1\11\12\0\1\12\11\0\2\11"+
    "\16\0\1\12\4\0\1\12\4\0\1\11\1\0\1\13"+
    "\21\0\1\12\5\0\1\11\1\13\7\0\1\13\5\0"+
    "\2\12\4\0\1\13\11\0\2\13\36\0\1\14\6\0"+
    "\1\15\26\0\1\15\17\0\1\16\11\0\1\14\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\173\0\173"+
    "\0\u0215\0\173\0\173\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\173\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c"+
    "\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b\0\u05c4"+
    "\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0735\0\173\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b"+
    "\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a\0\u0973"+
    "\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92\0\u0abb"+
    "\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03"+
    "\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b"+
    "\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93"+
    "\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb"+
    "\0\u1004\0\u102d\0\u1056\0\u107f\0\u0691\0\u10a8\0\u10d1\0\u10fa"+
    "\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242"+
    "\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u08a6\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\173\0\u154d\0\u1576\0\u159f\0\u15c8"+
    "\0\u11f0\0\u15f1\0\u1004\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be"+
    "\0\u16e7\0\u1710\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806"+
    "\0\u182f\0\u1858\0\u1881\0\u18aa\0\u05ed\0\u18d3\0\u18fc\0\u1925"+
    "\0\u194e\0\u1977\0\u15f1\0\u1338\0\u19a0\0\u19c9\0\u19f2\0\u1a1b"+
    "\0\u1a44\0\u1a6d\0\u1a96\0\173\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a"+
    "\0\u1b63\0\u082b\0\u0e6a\0\u1b8c\0\u1bb5\0\u1bde\0\u1c07\0\u0f60"+
    "\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd\0\u1d26\0\u1d4f"+
    "\0\u1d78\0\u12bd\0\u1a96\0\u1da1\0\u1dca\0\u1df3\0\u1e1c\0\u1e45"+
    "\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12\0\u1f3b\0\u1f64\0\u1f8d"+
    "\0\u1fb6\0\u1fdf\0\u2008\0\u2031\0\u205a\0\u2083\0\u20ac\0\u20d5"+
    "\0\u20fe\0\u2127\0\u2150\0\u2179\0\u21a2\0\u21cb\0\u21f4\0\u221d"+
    "\0\u2246\0\173\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c"+
    "\0\173\0\u2365\0\u238e\0\u23b7\0\u23e0\0\u2409\0\u2432\0\u245b"+
    "\0\u2484\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551\0\u257a\0\u25a3"+
    "\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\u26c2\0\u1576"+
    "\0\u26eb\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8\0\u27e1\0\u280a"+
    "\0\u2833\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\173"+
    "\0\u2952\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48\0\u2a71"+
    "\0\u2a9a\0\u1ec0\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\6\4\1\7\10\4\1\10"+
    "\1\11\2\4\1\12\2\4\1\13\1\4\1\14\3\4"+
    "\1\15\4\4\1\16\1\17\1\4\1\20\3\4\1\21"+
    "\6\4\1\7\33\4\1\22\5\4\1\21\6\4\1\7"+
    "\33\4\1\23\2\4\54\0\1\6\23\0\1\24\2\0"+
    "\1\25\1\0\1\26\3\0\1\27\4\0\1\30\15\0"+
    "\1\31\76\0\1\32\47\0\1\33\50\0\1\34\3\0"+
    "\1\35\34\0\1\36\47\0\1\37\50\0\1\40\53\0"+
    "\1\41\22\0\1\21\45\0\1\31\1\42\1\0\46\31"+
    "\26\0\1\43\60\0\1\44\52\0\1\45\46\0\1\46"+
    "\15\0\1\47\107\0\1\50\50\0\1\51\40\0\1\52"+
    "\40\0\1\53\70\0\1\54\11\0\1\55\71\0\1\56"+
    "\27\0\1\57\1\60\1\61\1\62\4\0\2\63\1\0"+
    "\1\64\1\60\1\65\1\0\24\65\1\0\1\66\4\0"+
    "\1\67\110\0\1\70\41\0\1\71\47\0\1\72\47\0"+
    "\1\73\21\0\1\55\14\0\1\74\1\0\24\74\6\0"+
    "\1\75\50\0\1\57\1\60\1\61\1\62\4\0\2\63"+
    "\1\0\1\64\1\60\1\65\1\0\20\65\1\76\3\65"+
    "\1\0\1\66\4\0\1\77\1\0\1\100\5\0\2\101"+
    "\1\0\1\102\1\0\1\103\1\0\24\103\3\0\1\61"+
    "\2\0\2\61\1\104\43\61\6\0\1\102\45\0\1\105"+
    "\1\60\1\0\1\62\2\0\1\106\1\0\2\63\1\0"+
    "\1\64\1\60\27\0\1\66\17\0\1\102\35\0\1\105"+
    "\1\60\1\0\1\62\4\0\2\65\1\0\1\64\1\60"+
    "\26\65\1\0\1\66\50\0\1\102\4\0\1\67\14\0"+
    "\1\107\1\0\24\107\43\0\1\110\36\0\1\111\60\0"+
    "\1\112\15\0\1\113\7\0\2\74\3\0\26\74\6\0"+
    "\1\75\14\0\1\114\1\0\24\114\6\0\1\105\1\60"+
    "\1\0\1\62\4\0\2\65\1\0\1\64\1\60\11\65"+
    "\1\115\14\65\1\0\1\66\4\0\1\77\1\0\1\100"+
    "\5\0\2\101\3\0\1\103\1\0\20\103\1\116\3\103"+
    "\3\0\1\100\2\0\2\100\1\117\43\100\3\0\1\120"+
    "\5\0\1\121\1\0\2\101\37\0\1\77\1\0\1\100"+
    "\5\0\2\101\3\0\1\103\1\0\24\103\6\0\1\120"+
    "\7\0\2\103\3\0\26\103\3\0\1\61\2\0\1\122"+
    "\1\123\1\104\1\124\7\61\1\125\1\123\27\61\1\126"+
    "\1\61\3\0\1\105\1\60\1\0\1\62\7\0\1\64"+
    "\1\60\22\0\1\127\4\0\1\66\14\0\2\130\37\0"+
    "\1\131\7\0\2\107\3\0\26\107\41\0\1\132\15\0"+
    "\1\133\110\0\1\134\10\0\1\113\23\0\1\135\34\0"+
    "\2\114\1\136\2\0\26\114\6\0\1\105\1\60\1\0"+
    "\1\62\4\0\2\65\1\0\1\64\1\60\6\65\1\137"+
    "\17\65\1\0\1\66\4\0\1\120\7\0\2\103\3\0"+
    "\11\103\1\140\14\103\3\0\1\100\2\0\1\141\1\100"+
    "\1\117\43\100\3\0\1\120\36\0\1\127\21\0\2\142"+
    "\34\0\1\61\2\0\1\122\1\123\1\104\1\124\7\61"+
    "\1\125\1\123\22\61\1\143\4\61\1\126\2\61\2\0"+
    "\1\144\1\61\1\104\5\61\2\145\1\61\1\146\1\61"+
    "\1\147\1\61\24\147\4\61\2\0\2\61\1\104\1\146"+
    "\43\61\2\0\2\61\1\104\10\61\1\146\33\61\2\0"+
    "\2\61\1\104\41\61\1\146\1\61\31\0\1\150\22\0"+
    "\1\105\1\60\1\0\1\62\4\0\2\130\1\0\1\64"+
    "\1\60\27\0\1\66\4\0\1\131\12\0\1\151\35\0"+
    "\1\152\50\0\1\153\1\154\1\155\1\156\4\0\2\157"+
    "\1\0\1\160\1\154\1\161\1\0\24\161\1\0\1\162"+
    "\27\0\1\72\62\0\1\163\13\0\1\164\50\0\1\105"+
    "\1\60\1\0\1\62\4\0\2\65\1\0\1\64\1\60"+
    "\16\65\1\165\7\65\1\0\1\66\4\0\1\120\7\0"+
    "\2\103\3\0\6\103\1\166\17\103\3\0\1\100\2\0"+
    "\1\141\1\100\1\117\34\100\1\167\6\100\3\0\1\120"+
    "\7\0\2\142\34\0\1\61\2\0\2\61\1\104\23\61"+
    "\1\170\20\61\2\0\1\144\1\61\1\104\5\61\2\145"+
    "\3\61\1\147\1\61\20\147\1\171\3\147\4\61\2\0"+
    "\1\172\1\61\1\104\3\61\1\173\1\61\2\145\35\61"+
    "\2\0\1\144\1\61\1\104\5\61\2\145\3\61\1\147"+
    "\1\61\24\147\4\61\2\0\1\172\1\61\1\104\5\61"+
    "\2\147\3\61\26\147\3\61\26\0\1\174\25\0\1\175"+
    "\50\0\1\152\1\0\1\176\5\0\2\177\3\0\1\200"+
    "\1\0\24\200\6\0\1\153\1\154\1\155\1\156\4\0"+
    "\2\157\1\0\1\160\1\154\1\161\1\0\3\161\1\201"+
    "\20\161\1\0\1\162\4\0\1\202\1\0\1\203\5\0"+
    "\2\204\1\0\1\205\1\0\1\206\1\0\24\206\3\0"+
    "\1\155\2\0\2\155\1\207\43\155\6\0\1\205\45\0"+
    "\1\210\1\154\1\0\1\156\2\0\1\211\1\0\2\157"+
    "\1\0\1\160\1\154\27\0\1\162\17\0\1\205\35\0"+
    "\1\210\1\154\1\0\1\156\4\0\2\161\1\0\1\160"+
    "\1\154\26\161\1\0\1\162\50\0\1\205\40\0\1\212"+
    "\14\0\1\213\17\0\1\214\12\0\1\215\2\0\1\216"+
    "\12\0\1\120\7\0\2\103\3\0\16\103\1\217\7\103"+
    "\3\0\1\100\2\0\2\100\1\117\23\100\1\220\17\100"+
    "\1\61\2\0\2\61\1\104\20\61\1\221\23\61\2\0"+
    "\1\172\1\61\1\104\5\61\2\147\3\61\11\147\1\222"+
    "\14\147\4\61\2\0\1\172\1\61\1\104\34\61\1\143"+
    "\7\61\2\0\2\61\1\104\5\61\2\223\34\61\36\0"+
    "\1\224\15\0\1\225\1\0\1\226\5\0\2\227\3\0"+
    "\1\230\1\0\24\230\3\0\1\176\2\0\2\176\1\231"+
    "\43\176\11\0\1\232\1\0\2\177\47\0\2\200\3\0"+
    "\26\200\6\0\1\210\1\154\1\0\1\156\4\0\2\161"+
    "\1\0\1\160\1\154\17\161\1\233\6\161\1\0\1\162"+
    "\4\0\1\202\1\0\1\203\5\0\2\204\3\0\1\206"+
    "\1\0\3\206\1\234\20\206\3\0\1\203\2\0\2\203"+
    "\1\235\43\203\3\0\1\236\5\0\1\237\1\0\2\204"+
    "\37\0\1\202\1\0\1\203\5\0\2\204\3\0\1\206"+
    "\1\0\24\206\6\0\1\236\7\0\2\206\3\0\26\206"+
    "\3\0\1\155\2\0\1\240\1\241\1\207\1\242\7\155"+
    "\1\243\1\241\27\155\1\244\1\155\3\0\1\210\1\154"+
    "\1\0\1\156\7\0\1\160\1\154\5\0\1\245\21\0"+
    "\1\162\14\0\2\246\71\0\1\247\16\0\1\213\4\0"+
    "\1\250\12\0\1\214\12\0\1\215\2\0\1\216\46\0"+
    "\1\251\54\0\1\252\47\0\1\253\6\0\1\100\2\0"+
    "\2\100\1\117\20\100\1\254\22\100\1\61\2\0\2\61"+
    "\1\104\30\61\1\255\13\61\2\0\1\172\1\61\1\104"+
    "\5\61\2\147\3\61\6\147\1\256\17\147\4\61\2\0"+
    "\1\172\1\61\1\104\5\61\2\223\34\61\3\0\1\225"+
    "\1\0\1\226\2\0\1\257\2\0\2\227\3\0\1\230"+
    "\1\0\24\230\3\0\1\226\2\0\2\226\1\260\43\226"+
    "\3\0\1\261\5\0\1\262\1\0\2\227\37\0\1\261"+
    "\7\0\2\230\3\0\26\230\16\0\2\263\37\0\1\236"+
    "\7\0\2\206\3\0\17\206\1\264\6\206\3\0\1\203"+
    "\2\0\1\265\1\203\1\235\43\203\3\0\1\236\21\0"+
    "\1\245\36\0\2\266\34\0\1\155\2\0\1\240\1\241"+
    "\1\207\1\242\7\155\1\243\1\241\5\155\1\267\21\155"+
    "\1\244\2\155\2\0\1\270\1\155\1\207\5\155\2\271"+
    "\1\155\1\272\1\155\1\273\1\155\24\273\4\155\2\0"+
    "\2\155\1\207\1\272\43\155\2\0\2\155\1\207\10\155"+
    "\1\272\33\155\2\0\2\155\1\207\41\155\1\272\1\155"+
    "\37\0\1\274\14\0\1\210\1\154\1\0\1\156\4\0"+
    "\2\246\1\0\1\160\1\154\27\0\1\162\4\0\1\275"+
    "\64\0\1\276\70\0\1\277\46\0\1\300\53\0\1\301"+
    "\10\0\1\100\2\0\2\100\1\117\30\100\1\302\12\100"+
    "\1\61\2\0\1\172\1\61\1\104\5\61\2\147\3\61"+
    "\16\147\1\303\7\147\3\61\17\0\1\304\31\0\1\226"+
    "\2\0\1\305\1\226\1\260\43\226\3\0\1\261\4\0"+
    "\1\257\53\0\2\306\34\0\1\203\2\0\1\265\1\203"+
    "\1\235\17\203\1\307\23\203\3\0\1\236\7\0\2\266"+
    "\34\0\1\155\2\0\2\155\1\207\31\155\1\310\12\155"+
    "\2\0\1\270\1\155\1\207\5\155\2\271\3\155\1\273"+
    "\1\155\3\273\1\311\20\273\4\155\2\0\1\312\1\155"+
    "\1\207\3\155\1\313\1\155\2\271\35\155\2\0\1\270"+
    "\1\155\1\207\5\155\2\271\3\155\1\273\1\155\24\273"+
    "\4\155\2\0\1\312\1\155\1\207\5\155\2\273\3\155"+
    "\26\273\3\155\3\0\1\275\10\0\1\314\37\0\1\315"+
    "\101\0\1\300\17\0\1\316\77\0\1\317\21\0\1\320"+
    "\45\0\1\226\2\0\1\305\1\226\1\260\2\226\1\321"+
    "\40\226\3\0\1\261\7\0\2\306\34\0\1\203\2\0"+
    "\2\203\1\235\31\203\1\322\11\203\1\155\2\0\1\312"+
    "\1\155\1\207\5\155\2\273\3\155\17\273\1\323\6\273"+
    "\4\155\2\0\1\312\1\155\1\207\17\155\1\267\24\155"+
    "\2\0\2\155\1\207\5\155\2\324\34\155\3\0\1\325"+
    "\7\0\2\314\37\0\1\315\17\0\1\326\12\0\1\327"+
    "\2\0\1\330\2\0\1\331\7\0\1\332\1\0\1\333"+
    "\1\0\1\334\3\0\2\335\3\0\1\336\1\0\24\336"+
    "\41\0\1\337\15\0\1\320\17\0\1\340\12\0\1\341"+
    "\2\0\1\342\7\0\1\226\2\0\2\226\1\260\11\226"+
    "\1\343\31\226\1\155\2\0\1\312\1\155\1\207\5\155"+
    "\2\324\34\155\3\0\1\325\36\0\1\344\45\0\1\345"+
    "\54\0\1\346\47\0\1\347\45\0\1\350\14\0\1\332"+
    "\1\0\1\333\1\0\1\334\1\250\2\0\2\335\3\0"+
    "\1\336\1\0\24\336\3\0\1\333\2\0\2\333\1\351"+
    "\43\333\3\0\1\334\17\0\1\214\12\0\1\215\2\0"+
    "\1\216\12\0\1\352\3\0\1\334\1\0\1\353\1\0"+
    "\2\335\37\0\1\352\3\0\1\334\3\0\2\336\3\0"+
    "\26\336\33\0\1\300\57\0\1\354\54\0\1\355\47\0"+
    "\1\356\6\0\1\226\2\0\1\357\1\226\1\260\43\226"+
    "\37\0\1\360\50\0\1\361\46\0\1\362\53\0\1\363"+
    "\42\0\1\364\16\0\1\333\2\0\1\365\1\333\1\351"+
    "\1\333\1\366\41\333\3\0\1\352\4\0\1\250\53\0"+
    "\2\367\73\0\1\370\46\0\1\371\53\0\1\372\10\0"+
    "\1\226\2\0\1\357\1\226\1\260\15\226\1\373\12\226"+
    "\1\374\2\226\1\375\7\226\3\0\1\376\101\0\1\362"+
    "\46\0\1\377\43\0\1\362\23\0\1\333\2\0\1\365"+
    "\1\333\1\351\2\333\1\u0100\41\333\2\0\1\366\1\333"+
    "\1\351\15\333\1\u0101\12\333\1\u0102\2\333\1\u0103\7\333"+
    "\3\0\1\352\3\0\1\334\3\0\2\367\70\0\1\371"+
    "\46\0\1\u0104\16\0\1\226\2\0\2\226\1\260\31\226"+
    "\1\u0105\12\226\2\0\2\226\1\260\35\226\1\u0106\6\226"+
    "\2\0\2\226\1\260\34\226\1\u0107\6\226\3\0\1\376"+
    "\10\0\1\u0108\72\0\1\u0109\12\0\1\333\2\0\2\333"+
    "\1\351\11\333\1\u010a\32\333\2\0\2\333\1\351\31\333"+
    "\1\u010b\12\333\2\0\2\333\1\351\35\333\1\u010c\6\333"+
    "\2\0\2\333\1\351\34\333\1\u010d\6\333\36\0\1\u010e"+
    "\12\0\1\226\2\0\2\226\1\260\31\226\1\u010f\12\226"+
    "\2\0\2\226\1\260\27\226\1\u0110\14\226\2\0\2\226"+
    "\1\260\32\226\1\u0111\10\226\3\0\1\u0112\7\0\2\u0108"+
    "\64\0\1\362\20\0\1\333\2\0\1\u0113\1\333\1\351"+
    "\44\333\2\0\2\333\1\351\31\333\1\u0114\12\333\2\0"+
    "\2\333\1\351\27\333\1\u0115\14\333\2\0\2\333\1\351"+
    "\32\333\1\u0116\10\333\30\0\1\371\20\0\1\226\2\0"+
    "\2\226\1\260\26\226\1\u0110\15\226\2\0\2\226\1\260"+
    "\24\226\1\u0117\16\226\3\0\1\u0112\21\0\1\u0118\23\0"+
    "\1\333\2\0\1\u0113\1\333\1\351\15\333\1\u0119\12\333"+
    "\1\u011a\2\333\1\u011b\2\333\1\u011c\5\333\2\0\2\333"+
    "\1\351\26\333\1\u0115\15\333\2\0\1\u011d\1\333\1\351"+
    "\44\333\2\0\2\333\1\351\24\333\1\u011e\16\333\1\226"+
    "\2\0\2\226\1\260\30\226\1\u011f\12\226\37\0\1\u0120"+
    "\11\0\1\333\2\0\2\333\1\351\31\333\1\u0121\12\333"+
    "\2\0\2\333\1\351\35\333\1\u0122\6\333\2\0\2\333"+
    "\1\351\34\333\1\u0123\7\333\2\0\2\333\1\351\31\333"+
    "\1\u0124\12\333\2\0\1\u0125\1\333\1\351\1\333\1\366"+
    "\3\333\2\u0126\3\333\1\u0127\1\333\24\u0127\4\333\2\0"+
    "\2\333\1\351\30\333\1\u0128\12\333\1\226\2\0\2\226"+
    "\1\260\22\226\1\u0110\20\226\1\333\2\0\2\333\1\351"+
    "\31\333\1\u0129\12\333\2\0\2\333\1\351\27\333\1\u012a"+
    "\14\333\2\0\2\333\1\351\32\333\1\u012b\11\333\2\0"+
    "\2\333\1\351\24\333\1\u012c\17\333\2\0\1\u0125\1\333"+
    "\1\351\1\333\1\366\1\u0100\2\333\2\u0126\3\333\1\u0127"+
    "\1\333\24\u0127\4\333\2\0\1\365\1\333\1\351\1\333"+
    "\1\366\1\333\1\u012d\1\333\2\u0126\35\333\2\0\1\365"+
    "\1\333\1\351\1\333\1\366\3\333\2\u0127\3\333\26\u0127"+
    "\4\333\2\0\2\333\1\351\22\333\1\u0115\21\333\2\0"+
    "\2\333\1\351\26\333\1\u012a\15\333\2\0\2\333\1\351"+
    "\24\333\1\u012e\17\333\2\0\2\333\1\351\17\333\1\u012a"+
    "\24\333\2\0\2\333\1\351\5\333\2\u012f\35\333\2\0"+
    "\2\333\1\351\30\333\1\u0130\13\333\2\0\1\365\1\333"+
    "\1\351\1\333\1\366\3\333\2\u012f\35\333\2\0\2\333"+
    "\1\351\22\333\1\u012a\20\333";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11193];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\11\1\2\11\1\1\2\11\5\0\1\1"+
    "\10\0\1\11\27\0\1\11\37\0\1\1\17\0\1\1"+
    "\12\0\1\1\11\0\2\1\16\0\1\1\4\0\1\11"+
    "\4\0\1\1\1\0\1\1\21\0\1\1\5\0\2\1"+
    "\7\0\1\11\5\0\2\1\4\0\1\1\11\0\2\1"+
    "\36\0\1\11\6\0\1\11\26\0\1\1\17\0\1\11"+
    "\11\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 15: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 16: break;
          case 3:
            { 
            }
            // fall through
          case 17: break;
          case 4:
            { parser.lb(ScopeType.main);
            }
            // fall through
          case 18: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 19: break;
          case 6:
            { parser.lb(ScopeType.loop);
        yybegin(YYINITIAL);
            }
            // fall through
          case 20: break;
          case 7:
            { parser.lb(ScopeType.func);
        yybegin(YYINITIAL);
            }
            // fall through
          case 21: break;
          case 8:
            { parser.scope_ctrl(parser.split(yytext()));
            }
            // fall through
          case 22: break;
          case 9:
            { parser.return_stmt(parser.split(yytext()));
            }
            // fall through
          case 23: break;
          case 10:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 24: break;
          case 11:
            { parser.while_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 25: break;
          case 12:
            { parser.func_def(parser.split(yytext()));
        yybegin(FUNC);
            }
            // fall through
          case 26: break;
          case 13:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 27: break;
          case 14:
            { parser.for_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
