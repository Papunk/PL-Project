// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\6\0\1\7\1\10\1\11\1\12\11\13\2\0"+
    "\1\4\1\14\1\15\2\0\32\16\4\0\1\16\1\0"+
    "\1\16\1\17\1\16\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\2\16\1\26\1\27\1\30\1\31\2\16\1\32"+
    "\1\33\1\34\1\35\1\16\1\36\3\16\1\37\1\40"+
    "\1\41\7\0\1\2\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\4\3\1\4\1\5"+
    "\5\0\5\3\4\0\2\3\1\0\2\3\15\0\1\3"+
    "\20\0\1\3\56\0\1\6\27\0\1\6\4\0\1\6"+
    "\4\0\1\7\21\0\1\6\5\0\1\7\7\0\1\7"+
    "\1\0\1\10\5\0\2\6\5\0\1\7\12\0\2\7"+
    "\3\0\1\10\17\0\1\11\14\0\1\11\5\0\1\12";

  private static int [] zzUnpackAction() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\42\0\104\0\146\0\210\0\252\0\314"+
    "\0\356\0\u0110\0\42\0\42\0\u0132\0\u0154\0\u0176\0\u0198"+
    "\0\u01ba\0\u01dc\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8"+
    "\0\u02ca\0\u02ec\0\42\0\u030e\0\u0330\0\u0352\0\u0374\0\u0396"+
    "\0\u03b8\0\u03da\0\u03fc\0\u041e\0\u0440\0\u0462\0\u0484\0\u04a6"+
    "\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u06c6"+
    "\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4\0\u07d6"+
    "\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u08c4\0\u08e6"+
    "\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2\0\u09d4\0\u09f6"+
    "\0\u0a18\0\u0a3a\0\u0a5c\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06"+
    "\0\u0b28\0\u0b4a\0\u0b6c\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16"+
    "\0\u0c38\0\u0c5a\0\u0c7c\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26"+
    "\0\u0d48\0\u0d6a\0\u0d8c\0\u0dae\0\u04a6\0\u0dd0\0\u0df2\0\u0e14"+
    "\0\u0e36\0\u0e58\0\u0e7a\0\u0e9c\0\u0ebe\0\u0ee0\0\u0f02\0\u0f24"+
    "\0\u0f46\0\u0f68\0\u0f8a\0\u0fac\0\u0fce\0\u0ff0\0\u1012\0\u1034"+
    "\0\u1056\0\u1078\0\u109a\0\u10bc\0\u0682\0\u10de\0\u1100\0\u1122"+
    "\0\u1144\0\42\0\u1166\0\u1188\0\u11aa\0\u11cc\0\u0ce2\0\u11ee"+
    "\0\u1210\0\u1232\0\u1254\0\u1276\0\u1298\0\u12ba\0\u12dc\0\u12fe"+
    "\0\u1320\0\u1342\0\u1364\0\u1386\0\u13a8\0\u13ca\0\u13ec\0\u140e"+
    "\0\u0462\0\u1430\0\u1452\0\u1474\0\u1496\0\u14b8\0\u0f46\0\u14da"+
    "\0\u14fc\0\u151e\0\u1540\0\u1562\0\u1584\0\u15a6\0\42\0\u15c8"+
    "\0\42\0\u15ea\0\u160c\0\u162e\0\u1650\0\u1672\0\u0660\0\u0bb0"+
    "\0\u1694\0\u16b6\0\u16d8\0\u16fa\0\u171c\0\u0c9e\0\u173e\0\u1760"+
    "\0\u1782\0\u17a4\0\u17c6\0\u17e8\0\u180a\0\u182c\0\u184e\0\u1870"+
    "\0\u0f24\0\u1562\0\u1892\0\u18b4\0\u18d6\0\u0594\0\u18f8\0\u191a"+
    "\0\u193c\0\u195e\0\u1980\0\u19a2\0\u19c4\0\u19e6\0\u1a08\0\u1a2a"+
    "\0\u1a4c\0\u1a6e\0\u1a90\0\u1ab2\0\u1ad4\0\42\0\u1af6\0\u1b18"+
    "\0\u1b3a\0\u1b5c\0\u1b7e\0\u1ba0\0\u1bc2\0\u1be4\0\u1c06\0\u1c28"+
    "\0\u1c4a\0\u1c6c\0\u1188\0\u1c8e\0\u1cb0\0\u1cd2\0\u1cf4\0\u1d16"+
    "\0\42";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\3\2\1\5\1\2\1\6"+
    "\2\5\2\2\4\5\1\7\2\5\1\10\1\11\7\5"+
    "\1\12\1\13\1\2\1\14\45\0\1\4\3\0\1\15"+
    "\2\0\2\15\2\0\4\15\1\16\2\15\1\17\1\20"+
    "\10\15\6\0\1\21\3\0\1\5\2\0\2\5\2\0"+
    "\21\5\14\0\1\22\33\0\1\21\3\0\1\5\2\0"+
    "\2\5\2\0\13\5\1\23\5\5\6\0\1\21\3\0"+
    "\1\5\2\0\2\5\2\0\4\5\1\24\14\5\6\0"+
    "\1\21\3\0\1\5\2\0\2\5\2\0\3\5\1\25"+
    "\15\5\6\0\1\21\3\0\1\5\2\0\2\5\2\0"+
    "\6\5\1\26\12\5\6\0\1\21\3\0\1\15\2\0"+
    "\2\15\2\0\21\15\6\0\1\21\3\0\1\15\2\0"+
    "\2\15\2\0\13\15\1\27\5\15\6\0\1\21\3\0"+
    "\1\15\2\0\2\15\2\0\4\15\1\30\14\15\6\0"+
    "\1\21\3\0\1\15\2\0\2\15\2\0\3\15\1\31"+
    "\15\15\6\0\1\21\10\0\1\32\25\0\1\22\1\33"+
    "\1\0\37\22\3\0\1\21\3\0\1\5\2\0\2\5"+
    "\2\0\14\5\1\34\4\5\6\0\1\35\3\0\1\5"+
    "\2\0\2\5\2\0\21\5\6\0\1\21\3\0\1\5"+
    "\2\0\2\5\2\0\16\5\1\36\2\5\6\0\1\21"+
    "\3\0\1\5\2\0\2\5\2\0\7\5\1\37\11\5"+
    "\6\0\1\21\3\0\1\15\2\0\2\15\2\0\14\15"+
    "\1\40\4\15\6\0\1\35\3\0\1\15\2\0\2\15"+
    "\2\0\21\15\6\0\1\21\3\0\1\15\2\0\2\15"+
    "\2\0\16\15\1\41\2\15\6\0\1\42\41\0\1\43"+
    "\3\0\1\5\2\0\2\5\2\0\21\5\6\0\1\44"+
    "\1\45\1\46\1\47\1\50\2\0\2\51\1\52\1\45"+
    "\21\50\1\0\1\53\4\0\1\54\3\0\1\5\2\0"+
    "\2\5\2\0\21\5\6\0\1\21\3\0\1\5\2\0"+
    "\2\5\2\0\10\5\1\55\10\5\6\0\1\43\3\0"+
    "\1\15\2\0\2\15\2\0\21\15\6\0\1\54\3\0"+
    "\1\15\2\0\2\15\2\0\21\15\6\0\1\56\1\0"+
    "\1\57\1\0\1\60\2\0\2\61\2\0\21\60\6\0"+
    "\1\43\3\0\1\62\2\0\2\62\1\32\1\0\21\62"+
    "\6\0\1\44\1\45\1\46\1\47\1\50\2\0\2\51"+
    "\1\52\1\45\16\50\1\63\2\50\1\0\1\53\4\0"+
    "\1\64\1\0\1\65\1\0\1\66\2\0\2\67\1\70"+
    "\1\0\21\66\3\0\1\46\2\0\2\46\1\71\34\46"+
    "\6\0\1\70\36\0\1\72\1\45\1\0\1\47\1\50"+
    "\2\0\2\50\1\73\1\45\21\50\1\0\1\53\4\0"+
    "\1\72\1\45\1\0\1\47\1\50\1\74\1\0\2\51"+
    "\1\73\1\45\21\50\1\0\1\53\4\0\1\42\10\0"+
    "\1\70\65\0\1\70\4\0\1\54\3\0\1\75\2\0"+
    "\2\75\1\32\1\0\21\75\6\0\1\21\3\0\1\5"+
    "\2\0\2\5\2\0\3\5\1\76\15\5\6\0\1\56"+
    "\1\0\1\57\1\0\1\77\2\0\2\61\2\0\21\60"+
    "\3\0\1\57\2\0\2\57\1\100\34\57\3\0\1\101"+
    "\3\0\1\60\2\0\2\60\2\0\21\60\6\0\1\101"+
    "\3\0\1\60\1\102\1\0\2\61\2\0\21\60\6\0"+
    "\1\103\3\0\1\62\2\0\2\62\2\0\21\62\6\0"+
    "\1\72\1\45\1\0\1\47\1\50\2\0\2\50\1\73"+
    "\1\45\6\50\1\104\12\50\1\0\1\53\4\0\1\64"+
    "\1\0\1\65\1\0\1\66\2\0\2\67\2\0\16\66"+
    "\1\105\2\66\3\0\1\65\2\0\2\65\1\106\34\65"+
    "\3\0\1\107\3\0\1\66\2\0\2\66\2\0\21\66"+
    "\6\0\1\107\3\0\1\66\1\110\1\0\2\67\2\0"+
    "\21\66\6\0\1\64\1\0\1\65\1\0\1\66\2\0"+
    "\2\67\2\0\21\66\3\0\1\46\2\0\1\111\1\112"+
    "\1\71\1\113\5\46\1\114\1\112\22\46\1\115\1\46"+
    "\3\0\1\72\1\45\1\0\1\47\5\0\1\73\1\45"+
    "\16\0\1\116\3\0\1\53\15\0\1\70\37\0\2\117"+
    "\31\0\1\120\3\0\1\75\2\0\2\75\2\0\21\75"+
    "\6\0\1\121\3\0\1\5\2\0\2\5\2\0\21\5"+
    "\6\0\1\101\3\0\1\60\2\0\2\60\1\0\1\122"+
    "\21\60\3\0\1\57\2\0\1\123\1\57\1\100\34\57"+
    "\3\0\1\101\3\0\1\124\44\0\2\125\31\0\1\103"+
    "\16\0\1\126\22\0\1\72\1\45\1\0\1\47\1\50"+
    "\2\0\2\50\1\73\1\45\3\50\1\127\15\50\1\0"+
    "\1\53\4\0\1\107\3\0\1\66\2\0\2\66\2\0"+
    "\6\66\1\130\12\66\3\0\1\65\2\0\1\131\1\65"+
    "\1\106\34\65\3\0\1\107\30\0\1\116\17\0\2\132"+
    "\26\0\1\46\2\0\1\111\1\112\1\71\1\113\5\46"+
    "\1\114\1\112\16\46\1\133\3\46\1\115\2\46\2\0"+
    "\1\134\1\46\1\71\1\46\1\135\2\46\2\136\1\137"+
    "\1\46\21\135\4\46\2\0\2\46\1\71\1\137\34\46"+
    "\2\0\2\46\1\71\6\46\1\137\26\46\2\0\2\46"+
    "\1\71\32\46\1\137\1\46\24\0\1\140\20\0\1\72"+
    "\1\45\1\0\1\47\3\0\2\117\1\73\1\45\22\0"+
    "\1\53\4\0\1\120\10\0\1\141\30\0\1\142\1\143"+
    "\1\144\1\145\1\146\2\0\2\147\1\150\1\143\21\146"+
    "\1\0\1\151\4\0\1\152\36\0\1\57\2\0\1\123"+
    "\1\57\1\100\1\57\1\153\32\57\15\0\1\122\27\0"+
    "\1\101\6\0\2\125\60\0\1\154\12\0\1\72\1\45"+
    "\1\0\1\47\1\50\2\0\2\50\1\73\1\45\12\50"+
    "\1\155\6\50\1\0\1\53\4\0\1\107\3\0\1\66"+
    "\2\0\2\66\2\0\3\66\1\156\15\66\3\0\1\65"+
    "\2\0\1\131\1\65\1\106\26\65\1\157\5\65\3\0"+
    "\1\107\6\0\2\132\26\0\1\46\2\0\2\46\1\71"+
    "\16\46\1\160\16\46\2\0\1\134\1\46\1\71\1\46"+
    "\1\135\2\46\2\136\2\46\16\135\1\161\2\135\4\46"+
    "\2\0\1\162\1\46\1\71\1\46\1\135\2\46\2\135"+
    "\2\46\21\135\4\46\2\0\1\162\1\46\1\71\1\46"+
    "\1\135\1\163\1\46\2\136\2\46\21\135\4\46\2\0"+
    "\1\134\1\46\1\71\1\46\1\135\2\46\2\136\2\46"+
    "\21\135\3\46\21\0\1\164\23\0\1\165\41\0\1\142"+
    "\1\143\1\144\1\145\1\146\2\0\2\147\1\150\1\143"+
    "\2\146\1\166\16\146\1\0\1\151\4\0\1\167\1\0"+
    "\1\170\1\0\1\171\2\0\2\172\1\173\1\0\21\171"+
    "\3\0\1\144\2\0\2\144\1\174\34\144\6\0\1\173"+
    "\36\0\1\175\1\143\1\0\1\145\1\146\2\0\2\146"+
    "\1\176\1\143\21\146\1\0\1\151\4\0\1\175\1\143"+
    "\1\0\1\145\1\146\1\177\1\0\2\147\1\176\1\143"+
    "\21\146\1\0\1\151\4\0\1\42\10\0\1\173\65\0"+
    "\1\173\4\0\1\152\13\0\1\200\10\0\1\201\2\0"+
    "\1\202\6\0\1\57\2\0\2\57\1\100\7\57\1\203"+
    "\24\57\31\0\1\204\13\0\1\107\3\0\1\66\2\0"+
    "\2\66\2\0\12\66\1\205\6\66\3\0\1\65\2\0"+
    "\2\65\1\106\16\65\1\206\15\65\1\46\2\0\2\46"+
    "\1\71\13\46\1\207\21\46\2\0\1\162\1\46\1\71"+
    "\1\46\1\135\2\46\2\135\2\46\6\135\1\210\12\135"+
    "\4\46\2\0\1\162\1\46\1\71\26\46\1\133\6\46"+
    "\2\0\2\46\1\71\4\46\2\211\26\46\30\0\1\212"+
    "\14\0\1\213\1\0\1\214\1\0\1\215\2\0\2\216"+
    "\2\0\21\215\6\0\1\175\1\143\1\0\1\145\1\146"+
    "\2\0\2\146\1\176\1\143\13\146\1\217\5\146\1\0"+
    "\1\151\4\0\1\167\1\0\1\170\1\0\1\171\2\0"+
    "\2\172\2\0\2\171\1\220\16\171\3\0\1\170\2\0"+
    "\2\170\1\221\34\170\3\0\1\222\3\0\1\171\2\0"+
    "\2\171\2\0\21\171\6\0\1\222\3\0\1\171\1\223"+
    "\1\0\2\172\2\0\21\171\6\0\1\167\1\0\1\170"+
    "\1\0\1\171\2\0\2\172\2\0\21\171\3\0\1\144"+
    "\2\0\1\224\1\225\1\174\1\226\5\144\1\227\1\225"+
    "\22\144\1\230\1\144\3\0\1\175\1\143\1\0\1\145"+
    "\5\0\1\176\1\143\2\0\1\231\17\0\1\151\15\0"+
    "\1\173\37\0\2\232\57\0\1\233\45\0\1\234\40\0"+
    "\1\235\5\0\1\57\2\0\1\236\1\57\1\100\34\57"+
    "\27\0\1\237\12\0\1\65\2\0\2\65\1\106\13\65"+
    "\1\240\20\65\1\46\2\0\2\46\1\71\22\46\1\241"+
    "\12\46\2\0\1\162\1\46\1\71\1\46\1\135\2\46"+
    "\2\135\2\46\3\135\1\242\15\135\4\46\2\0\1\162"+
    "\1\46\1\71\4\46\2\211\26\46\3\0\1\213\1\0"+
    "\1\214\1\0\1\243\2\0\2\216\2\0\21\215\3\0"+
    "\1\214\2\0\2\214\1\244\34\214\3\0\1\245\3\0"+
    "\1\215\2\0\2\215\2\0\21\215\6\0\1\245\3\0"+
    "\1\215\1\246\1\0\2\216\2\0\21\215\6\0\1\222"+
    "\3\0\1\171\2\0\2\171\2\0\13\171\1\247\5\171"+
    "\3\0\1\170\2\0\1\250\1\170\1\221\34\170\3\0"+
    "\1\222\14\0\1\231\33\0\2\251\26\0\1\144\2\0"+
    "\1\224\1\225\1\174\1\226\5\144\1\227\1\225\2\144"+
    "\1\252\17\144\1\230\2\144\2\0\1\253\1\144\1\174"+
    "\1\144\1\254\2\144\2\255\1\256\1\144\21\254\4\144"+
    "\2\0\2\144\1\174\1\256\34\144\2\0\2\144\1\174"+
    "\6\144\1\256\26\144\2\0\2\144\1\174\32\144\1\256"+
    "\1\144\31\0\1\257\13\0\1\175\1\143\1\0\1\145"+
    "\3\0\2\232\1\176\1\143\22\0\1\151\32\0\1\260"+
    "\37\0\1\261\44\0\1\262\7\0\1\57\2\0\1\236"+
    "\1\57\1\100\11\57\1\263\10\57\1\264\2\57\1\265"+
    "\6\57\3\0\1\266\36\0\1\65\2\0\2\65\1\106"+
    "\22\65\1\267\11\65\1\46\2\0\1\162\1\46\1\71"+
    "\1\46\1\135\2\46\2\135\2\46\12\135\1\270\6\135"+
    "\3\46\3\0\1\245\3\0\1\215\2\0\2\215\1\0"+
    "\1\271\21\215\3\0\1\214\2\0\1\272\1\214\1\244"+
    "\34\214\3\0\1\245\3\0\1\273\44\0\2\274\26\0"+
    "\1\170\2\0\1\250\1\170\1\221\12\170\1\275\21\170"+
    "\3\0\1\222\6\0\2\251\26\0\1\144\2\0\2\144"+
    "\1\174\23\144\1\276\11\144\2\0\1\253\1\144\1\174"+
    "\1\144\1\254\2\144\2\255\2\144\2\254\1\277\16\254"+
    "\4\144\2\0\1\300\1\144\1\174\1\144\1\254\2\144"+
    "\2\254\2\144\21\254\4\144\2\0\1\300\1\144\1\174"+
    "\1\144\1\254\1\301\1\144\2\255\2\144\21\254\4\144"+
    "\2\0\1\253\1\144\1\174\1\144\1\254\2\144\2\255"+
    "\2\144\21\254\3\144\26\0\1\261\40\0\1\302\14\0"+
    "\1\57\2\0\2\57\1\100\23\57\1\303\11\57\2\0"+
    "\2\57\1\100\27\57\1\304\5\57\2\0\2\57\1\100"+
    "\26\57\1\305\5\57\3\0\1\266\7\0\1\306\31\0"+
    "\1\307\36\0\1\214\2\0\1\272\1\214\1\244\1\214"+
    "\1\310\32\214\15\0\1\271\27\0\1\245\6\0\2\274"+
    "\26\0\1\170\2\0\2\170\1\221\23\170\1\311\10\170"+
    "\1\144\2\0\1\300\1\144\1\174\1\144\1\254\2\144"+
    "\2\254\2\144\13\254\1\312\5\254\4\144\2\0\1\300"+
    "\1\144\1\174\12\144\1\252\22\144\2\0\2\144\1\174"+
    "\4\144\2\313\26\144\30\0\1\314\11\0\1\57\2\0"+
    "\2\57\1\100\23\57\1\315\11\57\2\0\2\57\1\100"+
    "\21\57\1\316\13\57\2\0\2\57\1\100\24\57\1\317"+
    "\7\57\3\0\1\320\6\0\2\306\31\0\1\307\13\0"+
    "\1\321\10\0\1\322\2\0\1\323\6\0\1\214\2\0"+
    "\2\214\1\244\7\214\1\324\24\214\1\144\2\0\1\300"+
    "\1\144\1\174\4\144\2\313\26\144\23\0\1\261\16\0"+
    "\1\57\2\0\2\57\1\100\20\57\1\316\14\57\2\0"+
    "\2\57\1\100\17\57\1\325\14\57\3\0\1\320\30\0"+
    "\1\326\36\0\1\327\45\0\1\330\40\0\1\331\5\0"+
    "\1\214\2\0\1\332\1\214\1\244\34\214\1\57\2\0"+
    "\2\57\1\100\22\57\1\333\11\57\31\0\1\334\41\0"+
    "\1\335\37\0\1\336\44\0\1\337\7\0\1\214\2\0"+
    "\1\332\1\214\1\244\11\214\1\340\10\214\1\341\2\214"+
    "\1\342\6\214\1\57\2\0\2\57\1\100\15\57\1\316"+
    "\16\57\3\0\1\343\64\0\1\336\40\0\1\344\14\0"+
    "\1\214\2\0\2\214\1\244\23\214\1\345\11\214\2\0"+
    "\2\214\1\244\27\214\1\346\5\214\2\0\2\214\1\244"+
    "\26\214\1\347\5\214\3\0\1\343\7\0\1\350\56\0"+
    "\1\351\11\0\1\214\2\0\2\214\1\244\23\214\1\352"+
    "\11\214\2\0\2\214\1\244\21\214\1\353\13\214\2\0"+
    "\2\214\1\244\24\214\1\354\7\214\3\0\1\355\6\0"+
    "\2\350\51\0\1\336\16\0\1\214\2\0\2\214\1\244"+
    "\20\214\1\353\14\214\2\0\2\214\1\244\17\214\1\356"+
    "\14\214\3\0\1\355\14\0\1\357\21\0\1\214\2\0"+
    "\2\214\1\244\22\214\1\360\11\214\31\0\1\361\10\0"+
    "\1\214\2\0\2\214\1\244\15\214\1\353\16\214";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7480];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\2\11\5\0\5\1\4\0\1\11"+
    "\1\1\1\0\2\1\15\0\1\1\20\0\1\1\56\0"+
    "\1\1\27\0\1\1\4\0\1\11\4\0\1\1\21\0"+
    "\1\1\5\0\1\1\7\0\1\11\1\0\1\11\5\0"+
    "\2\1\5\0\1\1\12\0\2\1\3\0\1\1\17\0"+
    "\1\11\14\0\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[241];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 11: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 12: break;
          case 3:
            { 
            }
            // fall through
          case 13: break;
          case 4:
            { parser.lb();
            }
            // fall through
          case 14: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 15: break;
          case 6:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 16: break;
          case 7:
            { parser.while_loop(parser.split(yytext()));
            }
            // fall through
          case 17: break;
          case 8:
            { parser.var_assign(parser.split(yytext()));
            }
            // fall through
          case 18: break;
          case 9:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 19: break;
          case 10:
            { parser.for_loop(parser.split(yytext()));
            }
            // fall through
          case 20: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
