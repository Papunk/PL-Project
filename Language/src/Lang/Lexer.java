// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lang.flex

package Lang;
import LangTools.*;



// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int LOOP = 2;
  public static final int FUNC = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\12\0\1\1\3\2\22\0\1\3\1\4\1\5\3\0"+
    "\1\6\1\0\1\7\1\10\2\0\1\11\1\12\1\13"+
    "\1\14\1\15\11\16\2\0\1\4\1\17\1\20\2\0"+
    "\32\21\4\0\1\21\1\0\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\21\1\33\1\34"+
    "\1\35\1\36\1\37\2\21\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\3\21\1\46\1\47\1\50\7\0\1\2"+
    "\u01a2\0\2\2\326\0\u0100\2";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\11\1\1\4\1\5\1\6"+
    "\1\7\6\0\1\3\11\0\1\3\35\0\1\10\44\0"+
    "\1\11\23\0\1\11\17\0\1\12\11\0\2\11\23\0"+
    "\1\12\4\0\1\12\4\0\1\11\1\0\1\13\25\0"+
    "\1\12\5\0\1\11\1\13\7\0\1\13\11\0\2\12"+
    "\4\0\1\13\20\0\2\13\3\0\1\3\36\0\1\14"+
    "\7\0\1\15\26\0\1\15\17\0\1\16\6\0\1\14"+
    "\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\u0215\0\173"+
    "\0\173\0\173\0\173\0\366\0\u0171\0\u019a\0\u01c3\0\u01ec"+
    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334"+
    "\0\u035d\0\u0386\0\u03af\0\173\0\u03d8\0\u0401\0\u042a\0\u0453"+
    "\0\u047c\0\u04a5\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\u06e3"+
    "\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802\0\u082b"+
    "\0\u0854\0\366\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\u0ae4\0\u0b0d\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda"+
    "\0\u0c03\0\u0c2c\0\u0c55\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\u0d22"+
    "\0\u0d4b\0\u0d74\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a"+
    "\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2"+
    "\0\u0fdb\0\u1004\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa"+
    "\0\u1123\0\u114c\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242"+
    "\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u138a"+
    "\0\u13b3\0\u13dc\0\u070c\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9"+
    "\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1"+
    "\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710\0\u1739"+
    "\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858\0\u1881"+
    "\0\u18aa\0\u09c5\0\u18d3\0\u18fc\0\u1925\0\u194e\0\173\0\u1977"+
    "\0\u19a0\0\u19c9\0\u19f2\0\u154d\0\u1a1b\0\u1294\0\u1a44\0\u1a6d"+
    "\0\u1a96\0\u1abf\0\u1ae8\0\u1b11\0\u1b3a\0\u1b63\0\u1b8c\0\u1bb5"+
    "\0\u1bde\0\u1c07\0\u1c30\0\u1c59\0\u1c82\0\u1cab\0\u1cd4\0\u1cfd"+
    "\0\u1d26\0\u1d4f\0\u1d78\0\u0668\0\u1da1\0\u1dca\0\u1df3\0\u1e1c"+
    "\0\u1e45\0\u1a1b\0\u1695\0\u1e6e\0\u1e97\0\u1ec0\0\u1ee9\0\u1f12"+
    "\0\u1f3b\0\u1f64\0\173\0\u1f8d\0\u1fb6\0\u1fdf\0\u2008\0\u2031"+
    "\0\u205a\0\u2083\0\u20ac\0\u20d5\0\u094a\0\u10fa\0\u20fe\0\u2127"+
    "\0\u2150\0\u2179\0\u11f0\0\u21a2\0\u21cb\0\u21f4\0\u221d\0\u2246"+
    "\0\u226f\0\u2298\0\u22c1\0\u22ea\0\u2313\0\u233c\0\u2365\0\u238e"+
    "\0\u23b7\0\u23e0\0\u2409\0\u161a\0\u1f64\0\u2432\0\u245b\0\u2484"+
    "\0\u0802\0\u24ad\0\u24d6\0\u24ff\0\u2528\0\u2551\0\u257a\0\u25a3"+
    "\0\u25cc\0\u25f5\0\u261e\0\u2647\0\u2670\0\u2699\0\u26c2\0\u26eb"+
    "\0\u2714\0\u273d\0\u2766\0\u278f\0\u27b8\0\u27e1\0\u280a\0\u2833"+
    "\0\u285c\0\u2885\0\u28ae\0\u28d7\0\u2900\0\u2929\0\u2952\0\173"+
    "\0\u297b\0\u29a4\0\u29cd\0\u29f6\0\u2a1f\0\u2a48\0\u2a71\0\173"+
    "\0\u2a9a\0\u2ac3\0\u2aec\0\u2b15\0\u2b3e\0\u2b67\0\u2b90\0\u2bb9"+
    "\0\u2be2\0\u2c0b\0\u2c34\0\u2c5d\0\u2c86\0\u2caf\0\u2cd8\0\u2d01"+
    "\0\u2d2a\0\u2d53\0\u2d7c\0\u2da5\0\u2dce\0\u2df7\0\u19a0\0\u2e20"+
    "\0\u2e49\0\u2e72\0\u2e9b\0\u2ec4\0\u2eed\0\u2f16\0\u2f3f\0\u2f68"+
    "\0\u2f91\0\u2fba\0\u2fe3\0\u300c\0\u3035\0\u305e\0\173\0\u3087"+
    "\0\u30b0\0\u30d9\0\u3102\0\u312b\0\u3154\0\u2313\0\u317d\0\u31a6"+
    "\0\u31cf\0\u31f8\0\u3221";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\10\4\1\7\2\10\2\4"+
    "\2\10\1\11\1\12\2\10\1\13\2\10\1\14\1\10"+
    "\1\15\3\10\1\16\4\10\1\17\1\20\1\4\1\21"+
    "\46\4\1\22\50\4\1\23\2\4\54\0\1\6\11\0"+
    "\2\24\2\0\6\24\1\25\2\24\1\26\1\24\1\27"+
    "\3\24\1\30\4\24\1\31\17\0\1\32\37\0\1\33"+
    "\11\0\2\24\2\0\25\24\6\0\1\33\11\0\2\24"+
    "\2\0\17\24\1\34\5\24\6\0\1\33\11\0\2\24"+
    "\2\0\16\24\1\35\6\24\6\0\1\33\11\0\2\24"+
    "\2\0\16\24\1\36\3\24\1\37\2\24\6\0\1\33"+
    "\11\0\2\24\2\0\6\24\1\40\16\24\6\0\1\33"+
    "\11\0\2\24\2\0\5\24\1\41\17\24\6\0\1\33"+
    "\11\0\2\24\2\0\5\24\1\42\17\24\6\0\1\33"+
    "\11\0\2\24\2\0\10\24\1\43\14\24\3\0\1\32"+
    "\1\44\1\0\46\32\3\0\1\33\13\0\1\45\34\0"+
    "\1\33\11\0\2\24\2\0\5\24\1\46\17\24\6\0"+
    "\1\33\11\0\2\24\2\0\15\24\1\47\7\24\6\0"+
    "\1\33\11\0\2\24\2\0\17\24\1\50\5\24\6\0"+
    "\1\33\11\0\2\24\2\0\15\24\1\51\7\24\6\0"+
    "\1\52\11\0\2\24\2\0\25\24\6\0\1\33\11\0"+
    "\2\24\2\0\21\24\1\53\3\24\6\0\1\33\11\0"+
    "\2\24\2\0\21\24\1\54\3\24\6\0\1\33\11\0"+
    "\2\24\2\0\11\24\1\55\13\24\6\0\1\56\50\0"+
    "\1\33\11\0\2\24\2\0\1\24\1\57\23\24\6\0"+
    "\1\33\11\0\2\24\2\0\21\24\1\60\3\24\6\0"+
    "\1\61\11\0\2\24\2\0\25\24\6\0\1\33\11\0"+
    "\2\24\2\0\3\24\1\62\21\24\6\0\1\63\1\64"+
    "\1\65\1\66\6\0\2\67\1\70\1\64\25\71\1\0"+
    "\1\72\4\0\1\73\11\0\2\24\2\0\25\24\6\0"+
    "\1\33\11\0\2\24\2\0\22\24\1\74\2\24\6\0"+
    "\1\33\11\0\2\24\2\0\13\24\1\75\11\24\6\0"+
    "\1\76\1\0\1\77\7\0\2\100\2\0\25\101\6\0"+
    "\1\33\11\0\2\24\2\0\12\24\1\102\12\24\6\0"+
    "\1\33\11\0\2\24\2\0\11\24\1\103\13\24\6\0"+
    "\1\61\11\0\2\104\1\45\1\0\25\104\6\0\1\105"+
    "\11\0\2\24\2\0\25\24\6\0\1\63\1\64\1\65"+
    "\1\66\6\0\2\67\1\70\1\64\21\71\1\106\3\71"+
    "\1\0\1\72\4\0\1\107\1\0\1\110\7\0\2\111"+
    "\1\112\1\0\25\113\3\0\1\65\2\0\2\65\1\114"+
    "\43\65\6\0\1\112\45\0\1\115\1\64\1\0\1\66"+
    "\4\0\1\116\1\0\2\67\1\117\1\64\25\71\1\0"+
    "\1\72\4\0\1\56\13\0\1\112\34\0\1\115\1\64"+
    "\1\0\1\66\6\0\2\71\1\117\1\64\25\71\1\0"+
    "\1\72\50\0\1\112\4\0\1\73\11\0\2\120\1\45"+
    "\1\0\25\120\6\0\1\33\11\0\2\24\2\0\17\24"+
    "\1\121\5\24\6\0\1\33\11\0\2\24\2\0\5\24"+
    "\1\122\17\24\6\0\1\76\1\0\1\77\4\0\1\123"+
    "\2\0\2\100\2\0\25\101\3\0\1\77\2\0\2\77"+
    "\1\124\43\77\3\0\1\125\7\0\1\126\1\0\2\100"+
    "\2\0\25\101\6\0\1\125\11\0\2\101\2\0\25\101"+
    "\6\0\1\33\11\0\2\24\2\0\15\24\1\127\7\24"+
    "\6\0\1\130\11\0\2\104\2\0\25\104\6\0\1\105"+
    "\11\0\2\131\1\45\1\0\25\131\6\0\1\115\1\64"+
    "\1\0\1\66\6\0\2\71\1\117\1\64\10\71\1\132"+
    "\14\71\1\0\1\72\4\0\1\107\1\0\1\110\7\0"+
    "\2\111\2\0\21\113\1\133\3\113\3\0\1\110\2\0"+
    "\2\110\1\134\43\110\3\0\1\135\7\0\1\136\1\0"+
    "\2\111\2\0\25\113\6\0\1\107\1\0\1\110\7\0"+
    "\2\111\2\0\25\113\6\0\1\135\11\0\2\113\2\0"+
    "\25\113\3\0\1\65\2\0\1\137\1\140\1\114\1\141"+
    "\10\65\1\142\1\140\26\65\1\143\1\65\3\0\1\115"+
    "\1\64\1\0\1\66\10\0\1\117\1\64\21\0\1\144"+
    "\4\0\1\72\16\0\2\145\51\0\1\112\34\0\1\146"+
    "\11\0\2\120\2\0\25\120\6\0\1\33\11\0\2\24"+
    "\2\0\15\24\1\147\7\24\6\0\1\150\11\0\2\24"+
    "\2\0\25\24\23\0\1\151\30\0\1\77\2\0\1\152"+
    "\1\77\1\124\43\77\3\0\1\125\6\0\1\123\53\0"+
    "\2\153\35\0\1\33\11\0\2\24\2\0\22\24\1\154"+
    "\2\24\6\0\1\130\23\0\1\155\24\0\1\156\3\0"+
    "\1\157\5\0\2\131\2\0\25\131\6\0\1\115\1\64"+
    "\1\0\1\66\6\0\2\71\1\117\1\64\5\71\1\160"+
    "\17\71\1\0\1\72\4\0\1\135\11\0\2\113\2\0"+
    "\10\113\1\161\14\113\3\0\1\110\2\0\1\162\1\110"+
    "\1\134\43\110\3\0\1\135\36\0\1\144\23\0\2\163"+
    "\32\0\1\65\2\0\1\137\1\140\1\114\1\141\10\65"+
    "\1\142\1\140\21\65\1\164\4\65\1\143\2\65\2\0"+
    "\1\165\1\65\1\114\7\65\2\166\1\167\1\65\25\170"+
    "\4\65\2\0\2\65\1\114\1\167\43\65\2\0\2\65"+
    "\1\114\11\65\1\167\32\65\2\0\2\65\1\114\41\65"+
    "\1\167\1\65\31\0\1\171\22\0\1\115\1\64\1\0"+
    "\1\66\6\0\2\145\1\117\1\64\26\0\1\72\4\0"+
    "\1\146\13\0\1\172\34\0\1\173\11\0\2\24\2\0"+
    "\25\24\6\0\1\174\1\175\1\176\1\177\6\0\2\200"+
    "\1\201\1\175\25\202\1\0\1\203\4\0\1\204\45\0"+
    "\1\77\2\0\1\152\1\77\1\124\4\77\1\205\36\77"+
    "\3\0\1\125\11\0\2\153\35\0\1\33\11\0\2\24"+
    "\2\0\5\24\1\102\17\24\43\0\1\206\13\0\1\156"+
    "\3\0\1\157\44\0\1\157\4\0\1\207\12\0\1\210"+
    "\12\0\1\211\2\0\1\212\12\0\1\115\1\64\1\0"+
    "\1\66\6\0\2\71\1\117\1\64\15\71\1\213\7\71"+
    "\1\0\1\72\4\0\1\135\11\0\2\113\2\0\5\113"+
    "\1\214\17\113\3\0\1\110\2\0\1\162\1\110\1\134"+
    "\34\110\1\215\6\110\3\0\1\135\11\0\2\163\32\0"+
    "\1\65\2\0\2\65\1\114\23\65\1\216\20\65\2\0"+
    "\1\165\1\65\1\114\7\65\2\166\2\65\21\170\1\217"+
    "\3\170\4\65\2\0\1\220\1\65\1\114\5\65\1\221"+
    "\1\65\2\166\2\65\25\170\4\65\2\0\1\165\1\65"+
    "\1\114\7\65\2\166\2\65\25\170\4\65\2\0\1\220"+
    "\1\65\1\114\7\65\2\170\2\65\25\170\3\65\26\0"+
    "\1\222\25\0\1\223\50\0\1\173\1\0\1\224\7\0"+
    "\2\225\1\45\1\0\25\226\6\0\1\174\1\175\1\176"+
    "\1\177\6\0\2\200\1\201\1\175\4\202\1\227\20\202"+
    "\1\0\1\203\4\0\1\230\1\0\1\231\7\0\2\232"+
    "\1\233\1\0\25\234\3\0\1\176\2\0\2\176\1\235"+
    "\43\176\6\0\1\233\45\0\1\236\1\175\1\0\1\177"+
    "\4\0\1\237\1\0\2\200\1\240\1\175\25\202\1\0"+
    "\1\203\4\0\1\56\13\0\1\233\34\0\1\236\1\175"+
    "\1\0\1\177\6\0\2\202\1\240\1\175\25\202\1\0"+
    "\1\203\50\0\1\233\4\0\1\204\17\0\1\241\12\0"+
    "\1\242\2\0\1\243\7\0\1\77\2\0\2\77\1\124"+
    "\12\77\1\244\30\77\37\0\1\245\14\0\1\246\104\0"+
    "\1\247\54\0\1\250\47\0\1\251\11\0\1\135\11\0"+
    "\2\113\2\0\15\113\1\252\7\113\3\0\1\110\2\0"+
    "\2\110\1\134\23\110\1\253\17\110\1\65\2\0\2\65"+
    "\1\114\20\65\1\254\23\65\2\0\1\220\1\65\1\114"+
    "\7\65\2\170\2\65\10\170\1\255\14\170\4\65\2\0"+
    "\1\220\1\65\1\114\34\65\1\164\7\65\2\0\2\65"+
    "\1\114\7\65\2\256\32\65\36\0\1\257\15\0\1\260"+
    "\1\0\1\261\7\0\2\262\2\0\25\263\3\0\1\224"+
    "\2\0\2\224\1\264\43\224\13\0\1\265\1\0\2\225"+
    "\2\0\25\226\20\0\2\226\2\0\25\226\6\0\1\236"+
    "\1\175\1\0\1\177\6\0\2\202\1\240\1\175\16\202"+
    "\1\266\6\202\1\0\1\203\4\0\1\230\1\0\1\231"+
    "\7\0\2\232\2\0\4\234\1\267\20\234\3\0\1\231"+
    "\2\0\2\231\1\270\43\231\3\0\1\271\7\0\1\272"+
    "\1\0\2\232\2\0\25\234\6\0\1\230\1\0\1\231"+
    "\7\0\2\232\2\0\25\234\6\0\1\271\11\0\2\234"+
    "\2\0\25\234\3\0\1\176\2\0\1\273\1\274\1\235"+
    "\1\275\10\176\1\276\1\274\26\176\1\277\1\176\3\0"+
    "\1\236\1\175\1\0\1\177\10\0\1\240\1\175\4\0"+
    "\1\300\21\0\1\203\16\0\2\301\51\0\1\233\70\0"+
    "\1\302\54\0\1\303\47\0\1\304\6\0\1\77\2\0"+
    "\1\305\1\77\1\124\43\77\35\0\1\306\16\0\1\246"+
    "\6\0\1\307\75\0\1\310\46\0\1\311\53\0\1\312"+
    "\10\0\1\110\2\0\2\110\1\134\20\110\1\313\22\110"+
    "\1\65\2\0\2\65\1\114\30\65\1\314\13\65\2\0"+
    "\1\220\1\65\1\114\7\65\2\170\2\65\5\170\1\315"+
    "\17\170\4\65\2\0\1\220\1\65\1\114\7\65\2\256"+
    "\32\65\3\0\1\260\1\0\1\261\4\0\1\316\2\0"+
    "\2\262\2\0\25\263\3\0\1\261\2\0\2\261\1\317"+
    "\43\261\3\0\1\320\7\0\1\321\1\0\2\262\2\0"+
    "\25\263\6\0\1\320\11\0\2\263\2\0\25\263\20\0"+
    "\2\322\35\0\1\271\11\0\2\234\2\0\16\234\1\323"+
    "\6\234\3\0\1\231\2\0\1\324\1\231\1\270\43\231"+
    "\3\0\1\271\21\0\1\300\40\0\2\325\32\0\1\176"+
    "\2\0\1\273\1\274\1\235\1\275\10\176\1\276\1\274"+
    "\4\176\1\326\21\176\1\277\2\176\2\0\1\327\1\176"+
    "\1\235\7\176\2\330\1\331\1\176\25\332\4\176\2\0"+
    "\2\176\1\235\1\331\43\176\2\0\2\176\1\235\11\176"+
    "\1\331\32\176\2\0\2\176\1\235\41\176\1\331\1\176"+
    "\37\0\1\333\14\0\1\236\1\175\1\0\1\177\6\0"+
    "\2\301\1\240\1\175\26\0\1\203\40\0\1\334\46\0"+
    "\1\44\53\0\1\335\10\0\1\77\2\0\1\305\1\77"+
    "\1\124\15\77\1\336\12\77\1\337\2\77\1\340\7\77"+
    "\3\0\1\341\65\0\1\342\64\0\1\311\17\0\1\343"+
    "\77\0\1\344\16\0\1\110\2\0\2\110\1\134\30\110"+
    "\1\345\12\110\1\65\2\0\1\220\1\65\1\114\7\65"+
    "\2\170\2\65\15\170\1\346\7\170\3\65\20\0\1\347"+
    "\30\0\1\261\2\0\1\350\1\261\1\317\43\261\3\0"+
    "\1\320\6\0\1\316\53\0\2\351\32\0\1\231\2\0"+
    "\1\324\1\231\1\270\17\231\1\352\23\231\3\0\1\271"+
    "\11\0\2\325\32\0\1\176\2\0\2\176\1\235\31\176"+
    "\1\353\12\176\2\0\1\327\1\176\1\235\7\176\2\330"+
    "\2\176\4\332\1\354\20\332\4\176\2\0\1\355\1\176"+
    "\1\235\5\176\1\356\1\176\2\330\2\176\25\332\4\176"+
    "\2\0\1\327\1\176\1\235\7\176\2\330\2\176\25\332"+
    "\4\176\2\0\1\355\1\176\1\235\7\176\2\332\2\176"+
    "\25\332\3\176\34\0\1\44\46\0\1\357\16\0\1\77"+
    "\2\0\2\77\1\124\31\77\1\360\12\77\2\0\2\77"+
    "\1\124\35\77\1\361\6\77\2\0\2\77\1\124\34\77"+
    "\1\362\6\77\3\0\1\341\12\0\1\363\35\0\1\364"+
    "\50\0\1\343\1\0\1\365\2\0\1\207\1\366\3\0"+
    "\2\367\2\0\25\370\41\0\1\371\15\0\1\372\45\0"+
    "\1\261\2\0\1\350\1\261\1\317\4\261\1\373\36\261"+
    "\3\0\1\320\11\0\2\351\32\0\1\231\2\0\2\231"+
    "\1\270\31\231\1\374\11\231\1\176\2\0\1\355\1\176"+
    "\1\235\7\176\2\332\2\176\16\332\1\375\6\332\4\176"+
    "\2\0\1\355\1\176\1\235\17\176\1\326\24\176\2\0"+
    "\2\176\1\235\7\176\2\376\32\176\36\0\1\377\12\0"+
    "\1\77\2\0\2\77\1\124\31\77\1\u0100\12\77\2\0"+
    "\2\77\1\124\27\77\1\u0101\14\77\2\0\2\77\1\124"+
    "\32\77\1\u0102\10\77\3\0\1\u0103\11\0\2\363\35\0"+
    "\1\364\17\0\1\u0104\12\0\1\u0105\2\0\1\u0106\2\0"+
    "\1\u0107\4\0\1\365\2\0\2\365\1\u0108\43\365\3\0"+
    "\1\366\17\0\1\210\12\0\1\211\2\0\1\212\12\0"+
    "\1\u0109\4\0\1\207\1\366\1\0\1\u010a\1\0\2\367"+
    "\2\0\25\370\6\0\1\u0109\4\0\1\207\1\366\3\0"+
    "\2\370\2\0\25\370\33\0\1\311\23\0\1\372\17\0"+
    "\1\u010b\12\0\1\u010c\2\0\1\u010d\7\0\1\261\2\0"+
    "\2\261\1\317\12\261\1\u010e\30\261\1\176\2\0\1\355"+
    "\1\176\1\235\7\176\2\376\32\176\30\0\1\44\20\0"+
    "\1\77\2\0\2\77\1\124\26\77\1\u0101\15\77\2\0"+
    "\2\77\1\124\24\77\1\u010f\16\77\3\0\1\u0103\36\0"+
    "\1\u0110\45\0\1\u0111\54\0\1\u0112\47\0\1\u0113\45\0"+
    "\1\u0114\11\0\1\365\2\0\1\u0115\1\365\1\u0108\2\365"+
    "\1\u0116\1\u0117\37\365\3\0\1\u0109\4\0\1\207\55\0"+
    "\2\u0118\71\0\1\u0119\54\0\1\u011a\47\0\1\u011b\6\0"+
    "\1\261\2\0\1\u011c\1\261\1\317\43\261\1\77\2\0"+
    "\2\77\1\124\30\77\1\u011d\12\77\37\0\1\u011e\50\0"+
    "\1\u011f\46\0\1\u0120\53\0\1\u0121\42\0\1\u0122\16\0"+
    "\1\365\2\0\1\u0115\1\365\1\u0108\2\365\1\u0116\41\365"+
    "\2\0\1\u0123\1\365\1\u0108\44\365\2\0\1\u0117\1\365"+
    "\1\u0108\15\365\1\u0124\12\365\1\u0125\2\365\1\u0126\7\365"+
    "\3\0\1\u0109\4\0\1\207\1\366\3\0\2\u0118\71\0"+
    "\1\u0127\46\0\1\u0128\53\0\1\u0129\10\0\1\261\2\0"+
    "\1\u011c\1\261\1\317\15\261\1\u012a\12\261\1\u012b\2\261"+
    "\1\u012c\7\261\1\77\2\0\2\77\1\124\22\77\1\u0101"+
    "\20\77\3\0\1\u012d\101\0\1\u0120\46\0\1\u012e\43\0"+
    "\1\u0120\23\0\1\365\2\0\1\u0123\1\365\1\u0108\4\365"+
    "\1\u012f\37\365\2\0\2\365\1\u0108\31\365\1\u0130\12\365"+
    "\2\0\2\365\1\u0108\35\365\1\u0131\6\365\2\0\2\365"+
    "\1\u0108\34\365\1\u0132\6\365\34\0\1\u0128\46\0\1\u0133"+
    "\16\0\1\261\2\0\2\261\1\317\31\261\1\u0134\12\261"+
    "\2\0\2\261\1\317\35\261\1\u0135\6\261\2\0\2\261"+
    "\1\317\34\261\1\u0136\6\261\3\0\1\u012d\12\0\1\u0137"+
    "\70\0\1\u0138\12\0\1\365\2\0\2\365\1\u0108\12\365"+
    "\1\u0139\31\365\2\0\2\365\1\u0108\31\365\1\u013a\12\365"+
    "\2\0\2\365\1\u0108\27\365\1\u013b\14\365\2\0\2\365"+
    "\1\u0108\32\365\1\u013c\10\365\36\0\1\u013d\12\0\1\261"+
    "\2\0\2\261\1\317\31\261\1\u013e\12\261\2\0\2\261"+
    "\1\317\27\261\1\u013f\14\261\2\0\2\261\1\317\32\261"+
    "\1\u0140\10\261\3\0\1\u0141\11\0\2\u0137\62\0\1\u0120"+
    "\20\0\1\365\2\0\1\u0142\1\365\1\u0108\44\365\2\0"+
    "\2\365\1\u0108\26\365\1\u013b\15\365\2\0\1\u0143\1\365"+
    "\1\u0108\44\365\2\0\2\365\1\u0108\24\365\1\u0144\16\365"+
    "\30\0\1\u0128\20\0\1\261\2\0\2\261\1\317\26\261"+
    "\1\u013f\15\261\2\0\2\261\1\317\24\261\1\u0145\16\261"+
    "\3\0\1\u0141\21\0\1\u0146\23\0\1\365\2\0\1\u0142"+
    "\1\365\1\u0108\15\365\1\u0147\12\365\1\u0148\2\365\1\u0149"+
    "\2\365\1\u014a\5\365\2\0\1\u0143\1\365\1\u0108\2\365"+
    "\1\u0116\1\u0117\3\365\2\u014b\2\365\25\u014c\4\365\2\0"+
    "\2\365\1\u0108\30\365\1\u014d\12\365\1\261\2\0\2\261"+
    "\1\317\30\261\1\u014e\12\261\37\0\1\u014f\11\0\1\365"+
    "\2\0\2\365\1\u0108\31\365\1\u0150\12\365\2\0\2\365"+
    "\1\u0108\35\365\1\u0151\6\365\2\0\2\365\1\u0108\34\365"+
    "\1\u0152\7\365\2\0\2\365\1\u0108\31\365\1\u0153\12\365"+
    "\2\0\1\u0115\1\365\1\u0108\2\365\1\u0116\1\u0117\1\365"+
    "\1\u0154\1\365\2\u014b\2\365\25\u014c\4\365\2\0\1\u0115"+
    "\1\365\1\u0108\2\365\1\u0116\1\u0117\3\365\2\u014c\2\365"+
    "\25\u014c\4\365\2\0\2\365\1\u0108\22\365\1\u013b\20\365"+
    "\1\261\2\0\2\261\1\317\22\261\1\u013f\20\261\1\365"+
    "\2\0\2\365\1\u0108\31\365\1\u0155\12\365\2\0\2\365"+
    "\1\u0108\27\365\1\u0156\14\365\2\0\2\365\1\u0108\32\365"+
    "\1\u0157\11\365\2\0\2\365\1\u0108\24\365\1\u0158\17\365"+
    "\2\0\2\365\1\u0108\7\365\2\u0159\33\365\2\0\2\365"+
    "\1\u0108\26\365\1\u0156\15\365\2\0\2\365\1\u0108\24\365"+
    "\1\u015a\17\365\2\0\2\365\1\u0108\17\365\1\u0156\24\365"+
    "\2\0\1\u0115\1\365\1\u0108\2\365\1\u0116\1\u0117\3\365"+
    "\2\u0159\33\365\2\0\2\365\1\u0108\30\365\1\u015b\13\365"+
    "\2\0\2\365\1\u0108\22\365\1\u0156\20\365";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12874];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\12\1\4\11\6\0\1\1\11\0\1\11"+
    "\35\0\1\1\44\0\1\1\23\0\1\1\17\0\1\1"+
    "\11\0\2\1\23\0\1\1\4\0\1\11\4\0\1\1"+
    "\1\0\1\1\25\0\1\1\5\0\2\1\7\0\1\11"+
    "\11\0\2\1\4\0\1\1\20\0\2\1\3\0\1\1"+
    "\36\0\1\11\7\0\1\11\26\0\1\1\17\0\1\11"+
    "\6\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[347];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    Parser parser;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
      parser = new Parser();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    parser.end();
    System.out.println("\nLexer: End of execution");
    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return YYEOF;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.print(yytext());
            }
            // fall through
          case 15: break;
          case 2:
            { parser.newline();
            }
            // fall through
          case 16: break;
          case 3:
            { 
            }
            // fall through
          case 17: break;
          case 4:
            { parser.lb(ScopeType.main);
            }
            // fall through
          case 18: break;
          case 5:
            { parser.rb();
            }
            // fall through
          case 19: break;
          case 6:
            { parser.lb(ScopeType.loop);
        yybegin(YYINITIAL);
            }
            // fall through
          case 20: break;
          case 7:
            { parser.lb(ScopeType.func);
        yybegin(YYINITIAL);
            }
            // fall through
          case 21: break;
          case 8:
            { parser.scope_ctrl(parser.split(yytext()));
            }
            // fall through
          case 22: break;
          case 9:
            { parser.return_stmt(parser.split(yytext()));
            }
            // fall through
          case 23: break;
          case 10:
            { parser.if_stmt(parser.split(yytext()));
            }
            // fall through
          case 24: break;
          case 11:
            { parser.while_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 25: break;
          case 12:
            { parser.func_def(parser.split(yytext()));
        yybegin(FUNC);
            }
            // fall through
          case 26: break;
          case 13:
            { parser.var_def(parser.split(yytext()));
            }
            // fall through
          case 27: break;
          case 14:
            { parser.for_loop(parser.split(yytext()));
        yybegin(LOOP);
            }
            // fall through
          case 28: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java Lexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        Lexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new Lexer(reader);
          while ( !scanner.zzAtEOF ) scanner.yylex();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
